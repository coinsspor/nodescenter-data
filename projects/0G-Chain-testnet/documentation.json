{
  "documentation": [
    {
      "id": "section-1755119201508",
      "title": "0G Galileo Testnet",
      "icon": "💫",
      "type": "section",
      "children": [
        {
          "id": "page-1755119233098",
          "title": "Node Installation Guide",
          "icon": "📄",
          "type": "page",
          "content": "# 0G Galileo Testnet Node Installation Guide\n\n<div align=\"center\">\n\n![0G Network](https://img.shields.io/badge/0G-Galileo%20Testnet-blue)\n![Version](https://img.shields.io/badge/Version-v2.0.2-green)\n![Go](https://img.shields.io/badge/Go-1.21.3-00ADD8?logo=go)\n![License](https://img.shields.io/badge/License-MIT-yellow)\n\n</div>\n\n\n\n## 💻 System Requirements\n\n### Recommended Hardware\n- **CPU**: 8 Cores\n- **RAM**: 64GB\n- **Storage**: 1TB (NVME SSD)\n- **OS**: Ubuntu 20.04+ LTS\n\n### Network Requirements\n- Stable internet connection\n- Public IP address\n- Open ports (will be configured during setup)\n\n## 🚀 Manual Installation\n\n### Step 1: Install Dependencies\n\nUpdate your system and install required packages:\n\n```bash\nsudo apt update && sudo apt upgrade -y\nsudo apt install curl git wget htop tmux build-essential jq make lz4 gcc unzip -y\n```\n\n### Step 2: Install Go\n\nInstall Go version 1.21.3:\n\n```bash\ncd $HOME\nVER=\"1.21.3\"\nwget \"https://golang.org/dl/go$VER.linux-amd64.tar.gz\"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf \"go$VER.linux-amd64.tar.gz\"\nrm \"go$VER.linux-amd64.tar.gz\"\n\n[ ! -f ~/.bash_profile ] && touch ~/.bash_profile\necho \"export PATH=$PATH:/usr/local/go/bin:~/go/bin\" >> ~/.bash_profile\nsource $HOME/.bash_profile\n[ ! -d ~/go/bin ] && mkdir -p ~/go/bin\n```\n\n### Step 3: Set Environment Variables\n\n> ⚠️ **Important**: Replace `test` with your desired node name (moniker)\n\n```bash\necho \"export MONIKER=\\\"test\\\"\" >> $HOME/.bash_profile\necho \"export OG_PORT=\\\"47\\\"\" >> $HOME/.bash_profile\necho 'export PATH=$PATH:$HOME/galileo-used/bin' >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n```\n\n> 💡 **Note**: You can change `OG_PORT` to a different value if port 47 is already in use\n\n### Step 4: Download and Setup Binaries\n\n```bash\ncd $HOME\nrm -rf galileo\nwget -O galileo.tar.gz https://github.com/0glabs/0gchain-NG/releases/download/v2.0.2/galileo-v2.0.2.tar.gz\ntar -xzvf galileo.tar.gz -C $HOME\nrm -rf $HOME/galileo.tar.gz\nmv galileo-v2.0.2 galileo\nchmod +x $HOME/galileo/bin/geth\nchmod +x $HOME/galileo/bin/0gchaind\ncp $HOME/galileo/bin/geth $HOME/go/bin/geth\ncp $HOME/galileo/bin/0gchaind $HOME/go/bin/0gchaind\nmv $HOME/galileo $HOME/galileo-used\n```\n\n### Step 5: Create Configuration Directory\n\n```bash\nmkdir -p $HOME/.0gchaind\ncp -r $HOME/galileo-used/0g-home $HOME/.0gchaind\n```\n\n### Step 6: Initialize Geth\n\n```bash\ngeth init --datadir $HOME/.0gchaind/0g-home/geth-home $HOME/galileo-used/genesis.json\n```\n\n### Step 7: Initialize 0gchaind\n\n```bash\n0gchaind init $MONIKER --home $HOME/.0gchaind/tmp\nmv $HOME/.0gchaind/tmp/data/priv_validator_state.json $HOME/.0gchaind/0g-home/0gchaind-home/data/\nmv $HOME/.0gchaind/tmp/config/node_key.json $HOME/.0gchaind/0g-home/0gchaind-home/config/\nmv $HOME/.0gchaind/tmp/config/priv_validator_key.json $HOME/.0gchaind/0g-home/0gchaind-home/config/\nrm -rf $HOME/.0gchaind/tmp\n```\n\n### Step 8: Configure Node Settings\n\nSet moniker in config:\n```bash\nsed -i -e \"s/^moniker *=.*/moniker = \\\"$MONIKER\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\n```\n\nConfigure custom ports for Geth:\n```bash\nsed -i \"s/HTTPPort = .*/HTTPPort = ${OG_PORT}545/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/WSPort = .*/WSPort = ${OG_PORT}546/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/AuthPort = .*/AuthPort = ${OG_PORT}551/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/ListenAddr = .*/ListenAddr = \\\":${OG_PORT}303\\\"/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/^# *Port = .*/# Port = ${OG_PORT}901/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/^# *InfluxDBEndpoint = .*/# InfluxDBEndpoint = \\\"http:\\/\\/localhost:${OG_PORT}086\\\"/\" $HOME/galileo-used/geth-config.toml\n```\n\n### Step 9: Set Seeds and Peers\n\n```bash\nPEERS=3a11d0b48d7c477d133f959efb33d47d81aeae6d@og-testnet-peer.itrocket.net:47656\nSEEDS=cfa49d6db0c9065e974bfdbc9e0f55712ee2b0b9@og-testnet-seed.itrocket.net:47656\nsed -i -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*persistent_peers *=.*/persistent_peers = \\\"$PEERS\\\"/}\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\nsed -i -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*seeds *=.*/seeds = \\\"$SEEDS\\\"/}\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\n```\n\n### Step 10: Configure Custom Ports\n\n```bash\nsed -i.bak -e \"s%:26658%:${OG_PORT}658%g;\ns%:26657%:${OG_PORT}657%g;\ns%:6060%:${OG_PORT}060%g;\ns%:26656%:${OG_PORT}656%g;\ns%:26660%:${OG_PORT}660%g\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\n\nsed -i \"s/address = \\\".*:3500\\\"/address = \\\"127\\.0\\.0\\.1:${OG_PORT}500\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\nsed -i \"s/^rpc-dial-url *=.*/rpc-dial-url = \\\"http:\\/\\/localhost:${OG_PORT}551\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\n```\n\n### Step 11: Optimize Node Settings\n\nDisable indexer:\n```bash\nsed -i -e \"s/^indexer *=.*/indexer = \\\"null\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\n```\n\nConfigure pruning:\n```bash\nsed -i -e \"s/^pruning *=.*/pruning = \\\"custom\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\nsed -i -e \"s/^pruning-keep-recent *=.*/pruning-keep-recent = \\\"100\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\nsed -i -e \"s/^pruning-interval *=.*/pruning-interval = \\\"19\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\n```\n\nCreate symbolic link:\n```bash\nln -sf $HOME/.0gchaind/0g-home/0gchaind-home/config/client.toml $HOME/.0gchaind/config/client.toml\n```\n\n### Step 12: Create Systemd Services\n\n#### Create 0ggeth Service\n\n```bash\nsudo tee /etc/systemd/system/0ggeth.service > /dev/null <<EOF\n[Unit]\nDescription=0g Geth Node Service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/galileo-used\nExecStart=$HOME/go/bin/geth \\\n    --config $HOME/galileo-used/geth-config.toml \\\n    --datadir $HOME/.0gchaind/0g-home/geth-home \\\n    --networkid 16601 \\\n    --http.port ${OG_PORT}545 \\\n    --ws.port ${OG_PORT}546 \\\n    --authrpc.port ${OG_PORT}551 \\\n    --bootnodes enode://de7b86d8ac452b1413983049c20eafa2ea0851a3219c2cc12649b971c1677bd83fe24c5331e078471e52a94d95e8cde84cb9d866574fec957124e57ac6056699@8.218.88.60:30303 \\\n    --port ${OG_PORT}303\nRestart=always\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n#### Create 0gchaind Service\n\n```bash\nsudo tee /etc/systemd/system/0gchaind.service > /dev/null <<EOF\n[Unit]\nDescription=0gchaind Node Service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/galileo-used\nExecStart=$(which 0gchaind) start \\\n--rpc.laddr tcp://0.0.0.0:${OG_PORT}657 \\\n--chaincfg.chain-spec devnet \\\n--chaincfg.kzg.trusted-setup-path $HOME/galileo-used/kzg-trusted-setup.json \\\n--chaincfg.engine.jwt-secret-path $HOME/galileo-used/jwt-secret.hex \\\n--chaincfg.kzg.implementation=crate-crypto/go-kzg-4844 \\\n--chaincfg.block-store-service.enabled \\\n--chaincfg.node-api.enabled \\\n--chaincfg.node-api.logging \\\n--chaincfg.node-api.address 0.0.0.0:${OG_PORT}500 \\\n--chaincfg.engine.rpc-dial-url http://localhost:${OG_PORT}551 \\\n--pruning=nothing \\\n--p2p.seeds 85a9b9a1b7fa0969704db2bc37f7c100855a75d9@8.218.88.60:26656 \\\n--p2p.external_address $(wget -qO- eth0.me):${OG_PORT}656 \\\n--home $HOME/.0gchaind/0g-home/0gchaind-home \\\n--chaincfg.restaking.enabled \\\n--chaincfg.restaking.symbiotic-rpc-dial-url https://ethereum-holesky-rpc.publicnode.com \\\n--chaincfg.restaking.symbiotic-get-logs-block-range 100\nRestart=always\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n### Step 13: Start Services\n\n```bash\n# Enable and start services\nsudo systemctl daemon-reload\nsudo systemctl enable 0ggeth\nsudo systemctl restart 0ggeth\nsudo systemctl enable 0gchaind\nsudo systemctl restart 0gchaind\n\n# Check logs\nsudo journalctl -u 0gchaind -u 0ggeth -f --no-hostname -o cat\n```\n\n## 🔧 Node Management\n\n### Check Service Status\n\n```bash\n# Check 0ggeth status\nsudo systemctl status 0ggeth\n\n# Check 0gchaind status\nsudo systemctl status 0gchaind\n```\n\n### View Logs\n\n```bash\n# View both services logs\nsudo journalctl -u 0gchaind -u 0ggeth -f --no-hostname -o cat\n\n# View 0ggeth logs only\nsudo journalctl -u 0ggeth -f\n\n# View 0gchaind logs only\nsudo journalctl -u 0gchaind -f\n```\n\n### Stop Services\n\n```bash\nsudo systemctl stop 0gchaind 0ggeth\n```\n\n### Restart Services\n\n```bash\nsudo systemctl restart 0ggeth\nsudo systemctl restart 0gchaind\n```\n\n## ⬆️ Manual Upgrade\n\nTo upgrade your node to a new version:\n\n```bash\n# Stop services\nsudo systemctl stop 0gchaind 0ggeth\n\n# Download new version\ncd\nrm -rf bin\nmkdir $HOME/bin\ncd bin\nwget \"https://github.com/0glabs/0gchain-NG/releases/download/v2.0.2/galileo-v2.0.2.tar.gz\"\ntar -xvzf galileo-v2.0.2.tar.gz\ncd galileo-v2.0.2\nchmod +x $HOME/bin/galileo-v2.0.2/bin/0gchaind $HOME/bin/galileo-v2.0.2/bin/geth\ncp $HOME/bin/galileo-v2.0.2/bin/0gchaind $(which 0gchaind)\ncp $HOME/bin/galileo-v2.0.2/bin/geth $(which geth)\n\n# Update 0gchaind systemd file (if needed)\nsudo tee /etc/systemd/system/0gchaind.service > /dev/null <<EOF\n[Unit]\nDescription=0gchaind Node Service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/galileo-used\nExecStart=$(which 0gchaind) start \\\n--rpc.laddr tcp://0.0.0.0:${OG_PORT}657 \\\n--chaincfg.chain-spec devnet \\\n--chaincfg.kzg.trusted-setup-path $HOME/galileo-used/kzg-trusted-setup.json \\\n--chaincfg.engine.jwt-secret-path $HOME/galileo-used/jwt-secret.hex \\\n--chaincfg.kzg.implementation=crate-crypto/go-kzg-4844 \\\n--chaincfg.block-store-service.enabled \\\n--chaincfg.node-api.enabled \\\n--chaincfg.node-api.logging \\\n--chaincfg.node-api.address 0.0.0.0:${OG_PORT}500 \\\n--chaincfg.engine.rpc-dial-url http://localhost:${OG_PORT}551 \\\n--pruning=nothing \\\n--p2p.seeds 85a9b9a1b7fa0969704db2bc37f7c100855a75d9@8.218.88.60:26656 \\\n--p2p.external_address $(wget -qO- eth0.me):${OG_PORT}656 \\\n--home $HOME/.0gchaind/0g-home/0gchaind-home \\\n--chaincfg.restaking.enabled \\\n--chaincfg.restaking.symbiotic-rpc-dial-url https://ethereum-holesky-rpc.publicnode.com \\\n--chaincfg.restaking.symbiotic-get-logs-block-range 1\nRestart=always\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Restart services\nsudo systemctl daemon-reload\nsudo systemctl restart 0ggeth\nsudo systemctl restart 0gchaind && sudo journalctl -u 0gchaind -f\n```\n\n## 🗑️ Delete Node\n\nTo completely remove the node from your system:\n\n```bash\n# Stop and disable services\nsudo systemctl stop 0gchaind 0ggeth\nsudo systemctl disable 0gchaind 0ggeth\n\n# Remove data directory\nrm -rf $HOME/.0gchaind\n\n# Remove service files\nsudo rm /etc/systemd/system/0gchaind.service /etc/systemd/system/0ggeth.service\n\n# Reload systemd\nsudo systemctl daemon-reload\n```\n\n## 📝 Useful Commands\n\n### Check Node Sync Status\n\n```bash\n# Check 0gchaind sync status\n0gchaind status 2>&1 | jq .SyncInfo\n\n# Check if node is catching up\n0gchaind status 2>&1 | jq .SyncInfo.catching_up\n```\n\n### Check Node Info\n\n```bash\n# Get node ID\n0gchaind tendermint show-node-id\n\n# Get validator info\n0gchaind tendermint show-validator\n```\n\n### Check Ports\n\n```bash\n# List all listening ports\nss -tulpn | grep LISTEN\n```\n\n### Monitor System Resources\n\n```bash\n# Check CPU and Memory usage\nhtop\n\n# Check disk usage\ndf -h\n\n# Check network connections\nnetstat -tnp | grep ESTABLISHED\n```\n\n## 🆘 Troubleshooting\n\n### Common Issues and Solutions\n\n#### 1. Node Not Starting\n- Check logs: `sudo journalctl -u 0gchaind -u 0ggeth -f`\n- Verify Go installation: `go version`\n- Check disk space: `df -h`\n- Ensure all ports are available\n\n#### 2. Sync Issues\n- Check peers: `curl -s localhost:${OG_PORT}657/net_info | jq .result.n_peers`\n- Verify genesis file is correct\n- Ensure proper network connectivity\n\n#### 3. Port Already in Use\n- Change `OG_PORT` variable to a different value\n- Re-run port configuration commands\n- Restart services\n\n#### 4. Permission Denied Errors\n- Ensure proper file permissions\n- Check user ownership of directories\n- Run commands with appropriate privileges\n\n## 📚 Resources\n\n- **Official Documentation**: [0G Labs GitHub](https://github.com/0glabs/0gchain-NG)\n- **Testnet Explorer**: Check official channels for explorer links\n- **Community Support**: Join official Discord/Telegram for support\n\n## 🔒 Security Recommendations\n\n1. **Firewall Configuration**: Only open necessary ports\n2. **Regular Updates**: Keep your system and node software updated\n3. **Backup Keys**: Always backup your validator keys securely\n4. **Monitor Performance**: Regularly check node performance and logs\n5. **Use SSH Keys**: Disable password authentication for SSH\n\n\n\n<div align=\"center\">\n\n**Made with ❤️ for 0G Community**\n\n*Last Updated: 2025*\n\n</div>"
        }
      ]
    },
    {
      "id": "section-1755119396742",
      "title": "0G Chain Validator Setup",
      "icon": "✨",
      "type": "section",
      "children": [
        {
          "id": "page-1755119415813",
          "title": "0G Chain Validator Setup with Foundry",
          "icon": "📄",
          "type": "page",
          "content": "# 0G Chain Validator Setup with Foundry\n\n<div align=\"center\">\n\n[![0G Chain](https://img.shields.io/static/v1?label=0G&message=Chain&color=blue&style=for-the-badge)](https://0g.ai)\n[![Foundry](https://img.shields.io/static/v1?label=Foundry&message=v1.2.3&color=green&style=for-the-badge)](https://github.com/foundry-rs/foundry)\n[![Ubuntu](https://img.shields.io/static/v1?label=Ubuntu&message=18.04%2B&color=orange&style=for-the-badge)](https://ubuntu.com)\n[![License](https://img.shields.io/static/v1?label=License&message=MIT&color=yellow&style=for-the-badge)](LICENSE)\n\n**🚀 Complete guide to setup and manage 0G Chain validators using Foundry**\n\n[📋 Prerequisites](#-prerequisites) • [🚀 Installation](#-installation) • [⚙️ Setup](#️-setup) • [🛠️ Management](#️-management) • [⚠️ Troubleshooting](#️-troubleshooting)\n\n---\n\n</div>\n\n## 📋 Prerequisites\n\n### Hardware Requirements\n| Component | Testnet | Mainnet |\n|-----------|---------|---------|\n| **RAM** | 64 GB | 64 GB |\n| **CPU** | 8 cores | 8 cores |\n| **Storage** | 4 TB NVME SSD | 1 TB NVME SSD |\n| **Network** | 100 Mbps | 100 Mbps |\n\n### Software Requirements\n- ✅ **Ubuntu 22.04+** or Debian-based Linux\n- ✅ **0G Node** synced and running\n- ✅ **32+ OG Tokens** for staking\n- ✅ **Root/sudo access**\n- ✅ **Stable internet connection**\n\n### Network Information (Testnet)\n```bash\nNetwork Name: 0G-Galileo-Testnet\nChain ID: 16601\nRPC URL: https://evmrpc-testnet.0g.ai\nExplorer: https://chainscan-galileo.0g.ai\nFaucet: https://faucet.0g.ai\n```\n\n---\n\n## 🚀 Installation\n\n### 1. System Check\n```bash\n# Check system compatibility\necho \"=== System Information ===\"\nuname -a && arch && lsb_release -a\n\n# Install required packages\nsudo apt update && sudo apt install -y curl jq\n\n# Check if 0G node is synced\ncurl -s http://localhost:26657/status | jq .result.sync_info.catching_up\n# USE YOUR OWN RPC PORT ,DEFAULT 26657 ,Should return: false (synced)\n```\n\n### 2. Install Foundry\n```bash\n\n\n# Install Foundry\ncurl -L https://foundry.paradigm.xyz | bash\nsource ~/.bashrc\nfoundryup\n\n# Verify installation\necho \"=== Foundry Version Information ===\"\ncast --version\nforge --version\nanvil --version\n```\n\n### 3. Test 0G Chain Connection\n```bash\n# Test connection to 0G testnet\necho \"=== 0G Chain Connection Test ===\"\n\n# Check chain ID (should return 16601)\ncast chain-id --rpc-url https://evmrpc-testnet.0g.ai\n\n# Get current block number\ncast block-number --rpc-url https://evmrpc-testnet.0g.ai\n\n# Test staking contract read\ncast call 0xea224dBB52F57752044c0C86aD50930091F561B9 \\\n    \"validatorCount()(uint32)\" \\\n    --rpc-url https://evmrpc-testnet.0g.ai\n```\n\n---\n\n## ⚙️ Setup\n\n### 1. Environment Configuration\n```bash\n# Set your node data path (adjust to your actual path)\nexport HOME_DIR=/root/.0gchaind/0g-home/0gchaind-home\nexport GENESIS_PATH=$HOME_DIR/config/genesis.json\nexport CHAIN_SPEC=devnet\n\n# 0G Testnet configuration\nexport RPC_URL=https://evmrpc-testnet.0g.ai\nexport STAKING_CONTRACT=0xea224dBB52F57752044c0C86aD50930091F561B9\n\n# Stake amounts (different for EVM and Cosmos operations)\nexport INITIAL_STAKE_EVM=32000000000000000000    # 32 OG in wei (for EVM/cast commands)\nexport INITIAL_STAKE_COSMOS=32000000000          # 32 OG in Cosmos format (for 0gchaind commands)\n\n# Make persistent (add to ~/.bashrc)\necho \"export RPC_URL=https://evmrpc-testnet.0g.ai\" >> ~/.bashrc\necho \"export STAKING_CONTRACT=0xea224dBB52F57752044c0C86aD50930091F561B9\" >> ~/.bashrc\necho \"export INITIAL_STAKE_EVM=32000000000000000000\" >> ~/.bashrc\necho \"export INITIAL_STAKE_COSMOS=32000000000\" >> ~/.bashrc\n```\n\n### 2. Verify Required Files\n```bash\n# Check if required files exist\nls -la $HOME_DIR/config/genesis.json || echo \"❌ genesis.json not found!\"\nls -la $HOME_DIR/config/priv_validator_key.json || echo \"❌ priv_validator_key.json not found!\"\n\n# Check if 0gchaind binary is accessible\nwhich 0gchaind || echo \"❌ 0gchaind not in PATH!\"\n```\n\n### 3. Generate Validator Keys\n```bash\n# Generate validator public key\necho \"=== Generating Validator Keys ===\"\n0gchaind deposit validator-keys \\\n  --home $HOME_DIR \\\n  --chaincfg.chain-spec=$CHAIN_SPEC\n\n# Output example:\n# Eth/Beacon Pubkey (Compressed 48-byte Hex):\n# 0xaa0f99735a6436d6b7ed763c2eaa8452d753c5152a4fb1e4dc0bd7e33bcfc8cd4fac0e2d6cbab941f423c17728fecc56\n```\n\n**⚠️ IMPORTANT:** Copy the 48-byte pubkey from the output:\n```bash\n# Replace with your actual pubkey\nexport PUBKEY=0xaa0f99735a6436d6b7ed763c2eaa8452d753c5152a4fb1e4dc0bd7e33bcfc8cd4fac0e2d6cbab941f423c17728fecc56\n```\n\n### 4. Compute Validator Contract Address\n```bash\n# Calculate validator contract address\necho \"=== Computing Validator Contract Address ===\"\nVALIDATOR_CONTRACT=$(cast call $STAKING_CONTRACT \\\n    \"computeValidatorAddress(bytes)(address)\" \\\n    $PUBKEY \\\n    --rpc-url $RPC_URL)\n\necho \"Validator Contract Address: $VALIDATOR_CONTRACT\"\nexport VALIDATOR_CONTRACT=$VALIDATOR_CONTRACT\n```\n\n### 5. Generate Signature\n```bash\n# Create validator signature (using Cosmos format)\necho \"=== Generating Validator Signature ===\"\n0gchaind deposit create-validator \\\n  $VALIDATOR_CONTRACT \\\n  $INITIAL_STAKE_COSMOS \\\n  $GENESIS_PATH \\\n  --home $HOME_DIR \\\n  --chaincfg.chain-spec=$CHAIN_SPEC\n\n# Output example:\n# ✅ Deposit message created successfully!\n# pubkey: 0xaa0f99735a6436d6b7ed763c2eaa8452d753c5152a4fb1e4dc0bd7e33bcfc8cd4fac0e2d6cbab941f423c17728fecc56\n# signature: 0x8d9f2e7a6b5c4d3e8f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e...\n```\n\n**⚠️ IMPORTANT:** Copy the signature from the output:\n```bash\n# Replace with your actual signature\nexport SIGNATURE=0x8d9f2e7a6b5c4d3e8f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e...\n```\n\n### 6. Prepare Wallet\n```bash\n# Set your private key (get from MetaMask)\n# ⚠️ SECURITY: Never share your private key!\nexport PRIVATE_KEY=0x1234567890abcdef...  # Replace with your actual private key\n\n# Check wallet balance (should have 32+ OG)\nexport YOUR_WALLET_ADDRESS=0x...  # Replace with your wallet address\ncast balance $YOUR_WALLET_ADDRESS --rpc-url $RPC_URL --ether\n```\n\n### 7. Register Validator\n```bash\n# Register validator with staking contract (using EVM format)\necho \"=== Registering Validator ===\"\ncast send $STAKING_CONTRACT \\\n  \"createAndInitializeValidatorIfNecessary((string,string,string,string,string),uint32,uint96,bytes,bytes)\" \\\n  \"('Your Validator Name','keybase-id','https://yourwebsite.com','security@youremail.com','Your validator description')\" \\\n  50000 \\\n  1 \\\n  $PUBKEY \\\n  $SIGNATURE \\\n  --value $INITIAL_STAKE_EVM \\\n  --gas-limit 1000000 \\\n  --gas-price 50000000000 \\\n  --private-key $PRIVATE_KEY \\\n  --rpc-url $RPC_URL\n\n# You will receive a transaction hash\n# Example: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n```\n\n#### Parameter Explanation:\n- `'Your Validator Name'`: Display name for your validator\n- `'keybase-id'`: Keybase identity (optional)\n- `'https://yourwebsite.com'`: Your website URL (optional)\n- `'security@youremail.com'`: Contact email\n- `'Your validator description'`: Brief description\n- `50000`: 5% commission rate (50000/1000000)\n- `1`: 1 gwei withdrawal fee\n\n---\n\n## 🔍 Verification\n\n### 1. Check Transaction Status\n```bash\n# Check transaction on explorer\necho \"Check your transaction at: https://chainscan-galileo.0g.ai\"\n\n# Verify transaction status (replace with your actual tx hash)\ncast tx 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef --rpc-url $RPC_URL\n```\n\n### 2. Verify Validator Registration\n```bash\n# Check if validator is registered\necho \"=== Validator Registration Check ===\"\n\n# Get validator contract address\ncast call $STAKING_CONTRACT \\\n    \"getValidator(bytes)(address)\" \\\n    $PUBKEY \\\n    --rpc-url $RPC_URL\n\n# Check validator balance (should show 32000000000000000000)\ncast call $VALIDATOR_CONTRACT \\\n    \"tokens()(uint256)\" \\\n    --rpc-url $RPC_URL\n\n# Check commission rate (should show 50000)\ncast call $VALIDATOR_CONTRACT \\\n    \"commissionRate()(uint32)\" \\\n    --rpc-url $RPC_URL\n\n# Check delegator shares\ncast call $VALIDATOR_CONTRACT \\\n    \"delegatorShares()(uint256)\" \\\n    --rpc-url $RPC_URL\n```\n\n### 3. Monitor Node Logs\n```bash\n# Monitor validator activation in node logs\ntail -f $HOME_DIR/../log/0gchaind.log | grep -i validator\n\n# Check consensus participation\ncurl -s http://localhost:26657/validators | jq '.result.validators[] | select(.pub_key.value != null)'\n```\n\n---\n\n## 🛠️ Management\n\n### Withdraw Commission\n```bash\n# Withdraw earned commission (only validator operator can do this)\ncast send $VALIDATOR_CONTRACT \\\n    \"withdrawCommission(address)\" \\\n    $YOUR_WALLET_ADDRESS \\\n    --gas-limit 1000000 \\\n    --gas-price 50000000000 \\\n    --private-key $PRIVATE_KEY \\\n    --rpc-url $RPC_URL\n```\n\n### Check Delegation Information\n```bash\n# View total delegator shares\ncast call $VALIDATOR_CONTRACT \\\n    \"delegatorShares()(uint256)\" \\\n    --rpc-url $RPC_URL\n\n# Check specific delegator's shares\ncast call $VALIDATOR_CONTRACT \\\n    \"getDelegation(address)(address,uint256)\" \\\n    $DELEGATOR_ADDRESS \\\n    --rpc-url $RPC_URL\n\n# Calculate estimated token value for shares\n# Formula: (shares * totalTokens) / totalShares\n```\n\n### Delegate Additional Tokens\n```bash\n# Add more stake to your validator\ncast send $VALIDATOR_CONTRACT \\\n    \"delegate(address)\" \\\n    $YOUR_WALLET_ADDRESS \\\n    --value 1000000000000000000 \\\n    --gas-limit 1000000 \\\n    --gas-price 50000000000 \\\n    --private-key $PRIVATE_KEY \\\n    --rpc-url $RPC_URL\n```\n\n### Undelegate (Advanced)\n```bash\n# Undelegate shares (requires withdrawal fee)\ncast send $VALIDATOR_CONTRACT \\\n    \"undelegate(address,uint256)\" \\\n    $WITHDRAWAL_ADDRESS \\\n    $SHARES_AMOUNT \\\n    --value 1000000000000000000 \\\n    --private-key $PRIVATE_KEY \\\n    --rpc-url $RPC_URL\n```\n\n### Network Statistics\n```bash\n# Total validator count\ncast call $STAKING_CONTRACT \\\n    \"validatorCount()(uint32)\" \\\n    --rpc-url $RPC_URL\n\n# Maximum validator count\ncast call $STAKING_CONTRACT \\\n    \"maxValidatorCount()(uint32)\" \\\n    --rpc-url $RPC_URL\n\n# Current gas price\ncast gas-price --rpc-url $RPC_URL\n```\n\n---\n\n## ⚠️ Troubleshooting\n\n### Common Errors\n\n#### 1. \"insufficient funds\"\n```bash\n# Check wallet balance\ncast balance $YOUR_WALLET_ADDRESS --rpc-url $RPC_URL --ether\n# Need at least 32.1 OG (extra for gas)\n\n# Get test tokens from faucet\necho \"Get tokens from: https://faucet.0g.ai\"\n```\n\n#### 2. \"DelegationBelowMinimum\"\n```bash\n# Check stake amount for EVM operations\necho $INITIAL_STAKE_EVM\n# Must be exactly 32000000000000000000 (32 OG in wei)\n\n# Check stake amount for Cosmos operations\necho $INITIAL_STAKE_COSMOS\n# Must be exactly 32000000000 (32 OG in Cosmos format)\n```\n\n#### 3. \"signature mismatch\"\n```bash\n# Regenerate signature (using Cosmos format)\n0gchaind deposit create-validator \\\n  $VALIDATOR_CONTRACT \\\n  $INITIAL_STAKE_COSMOS \\\n  $GENESIS_PATH \\\n  --home $HOME_DIR \\\n  --chaincfg.chain-spec=$CHAIN_SPEC\n```\n\n#### 4. \"command not found: 0gchaind\"\n```bash\n# Check if 0gchaind is in PATH\nwhich 0gchaind\n\n# Add to PATH if needed\nexport PATH=$PATH:/path/to/0gchaind/bin\necho 'export PATH=$PATH:/path/to/0gchaind/bin' >> ~/.bashrc\n```\n\n#### 5. \"invalid opcode\"\n```bash\n# Check if using correct EVM version\n# Ensure contracts are compiled with --evm-version cancun\n```\n\n### Debug Commands\n```bash\n# Check node sync status\ncurl -s http://localhost:26657/status | jq .result.sync_info\n\n# Check network connection\ncurl -s https://evmrpc-testnet.0g.ai >/dev/null && echo \"✅ RPC accessible\" || echo \"❌ Connection issue\"\n\n# View latest block\ncast block latest --rpc-url $RPC_URL\n\n# Check transaction pool\ncast tx-pool --rpc-url $RPC_URL\n```\n\n### Health Check Script\n```bash\n#!/bin/bash\necho \"=== 0G Validator Health Check ===\"\n\necho \"1. Node sync status:\"\ncurl -s http://localhost:26657/status | jq -r .result.sync_info.catching_up\n\necho \"2. Validator contract address:\"\ncast call $STAKING_CONTRACT \"getValidator(bytes)(address)\" $PUBKEY --rpc-url $RPC_URL\n\necho \"3. Validator balance:\"\ncast call $VALIDATOR_CONTRACT \"tokens()(uint256)\" --rpc-url $RPC_URL\n\necho \"4. Commission rate:\"\ncast call $VALIDATOR_CONTRACT \"commissionRate()(uint32)\" --rpc-url $RPC_URL\n\necho \"5. Total network validators:\"\ncast call $STAKING_CONTRACT \"validatorCount()(uint32)\" --rpc-url $RPC_URL\n\necho \"6. Wallet balance:\"\ncast balance $YOUR_WALLET_ADDRESS --rpc-url $RPC_URL --ether\n\necho \"7. Stake amounts:\"\necho \"   EVM format: $INITIAL_STAKE_EVM\"\necho \"   Cosmos format: $INITIAL_STAKE_COSMOS\"\n\necho \"=== Health check complete ===\"\n```\n\n---\n\n## ✅ Success Criteria\n\nYour validator setup is successful if:\n\n- ✅ **Transaction confirmed** - Shows SUCCESS status on explorer\n- ✅ **getValidator()** returns your validator contract address\n- ✅ **tokens()** returns 32000000000000000000 (32 OG in wei)\n- ✅ **Node logs** show validator activation messages\n- ✅ **Consensus participation** - Validator appears in validator set\n\n---\n\n## 📚 Resources\n\n### Official Links\n- **Documentation**: https://docs.0g.ai\n- **GitHub**: https://github.com/0glabs\n- **Block Explorer**: https://chainscan-galileo.0g.ai\n- **Faucet**: https://faucet.0g.ai\n\n### Contract Addresses\n- **Staking Contract**: `0xea224dBB52F57752044c0C86aD50930091F561B9`\n\n### RPC Endpoints\n- **Primary**: https://evmrpc-testnet.0g.ai\n- **QuickNode**: Custom endpoint available\n- **ThirdWeb**: Custom endpoint available\n\n### Support\n- **Discord**: [0G Labs Community](https://discord.gg/0glabs)\n- **Telegram**: Official 0G Channel\n- **GitHub Issues**: For technical problems\n\n---\n\n## 📄 License\n\nThis guide is released under the MIT License. See [LICENSE](LICENSE) for details.\n\n---\n\n<div align=\"center\">\n\n**🎉 Congratulations! You are now running a 0G Chain validator! 🎉**\n\n*If you found this guide helpful, please ⭐ star this repository!*\n\n</div>"
        }
      ]
    },
    {
      "id": "section-1755383536199",
      "title": "0G Chain Upgrade",
      "icon": "☄️",
      "type": "section",
      "children": [
        {
          "id": "page-1755383547424",
          "title": "0gchain v2.0.3 Update",
          "icon": "⚡",
          "type": "page",
          "content": "# 0gchain v2.0.3 Update\n\n```javascript\nCURRENT_PATH=$(which 0gchaind)\nsystemctl stop 0gchaind geth\nwget https://github.com/0glabs/0gchain-NG/releases/download/v2.0.3/galileo-v2.0.3.tar.gz\ntar -xzf galileo-v2.0.3.tar.gz\ncp galileo-v2.0.3/bin/0gchaind $CURRENT_PATH\nchmod +x $CURRENT_PATH\nsystemctl start geth\nsleep 5\nsystemctl start 0gchaind\njournalctl -u 0gchaind -f\n\n```"
        }
      ]
    },
    {
      "id": "section-1755426330328",
      "title": "0g galileo explorer",
      "icon": "🔍",
      "type": "section",
      "children": [
        {
          "id": "page-1755426374441",
          "title": "0g galileo explorer",
          "icon": "⮕",
          "type": "page",
          "content": "[https://0ggalileoexplorer.coinsspor.com/](https://0ggalileoexplorer.coinsspor.com/)"
        }
      ]
    },
    {
      "id": "section-1755426833735",
      "title": "0G Storage Node ",
      "icon": "🌟",
      "type": "section",
      "children": [
        {
          "id": "page-1755426849372",
          "title": "0G Storage Node Installation Guide",
          "icon": "📕",
          "type": "page",
          "content": "# 0G Storage Node Installation Guide\n\nA comprehensive guide for installing and managing 0G Storage Node on Ubuntu/Debian systems.\n\n\n\n## Prerequisites\n\n### System Requirements\n- **OS**: Ubuntu 20.04+ or Debian 11+\n- **CPU**: 4+ cores recommended\n- **RAM**: 8GB+ recommended\n- **Storage**: 100GB+ SSD\n- **Network**: Stable internet connection\n\n## Installation\n\n### Step 1: Install Dependencies\n\nUpdate your system and install required packages:\n\n```bash\nsudo apt-get update\nsudo apt-get install clang cmake build-essential openssl pkg-config libssl-dev jq git bc curl wget -y\n```\n\n### Step 2: Install Go\n\nInstall Go programming language (version 1.22.0):\n\n```bash\ncd $HOME\nver=\"1.22.0\"\nwget \"https://golang.org/dl/go$ver.linux-amd64.tar.gz\"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf \"go$ver.linux-amd64.tar.gz\"\nrm \"go$ver.linux-amd64.tar.gz\"\necho \"export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin\" >> ~/.bash_profile\nsource ~/.bash_profile\ngo version\n```\n\n### Step 3: Install Rust\n\nInstall Rust programming language:\n\n```bash\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource \"$HOME/.cargo/env\"\nrustc --version\n```\n\n### Step 4: Clone and Build 0G Storage Node\n\nDownload the source code and build the node:\n\n```bash\n# Clone the repository\ngit clone -b v1.1.0 https://github.com/0glabs/0g-storage-node.git\n\n# Navigate to the directory\ncd $HOME/0g-storage-node\n\n# Ensure we're on the correct version\ngit stash\ngit fetch --all --tags\ngit checkout v1.1.0\ngit submodule update --init\n\n# Build the project\ncargo build --release\n```\n\n## Configuration\n\n### Step 1: Download Configuration File\n\nRemove the default config and download the optimized configuration:\n\n```bash\nrm -rf $HOME/0g-storage-node/run/config.toml\ncurl -o $HOME/0g-storage-node/run/config.toml https://vault.astrostake.xyz/testnet/0g-labs/config-v3.toml\n```\n\n### Step 2: Configure Miner Key\n\nEdit the configuration file to add your private key:\n\n```bash\nnano $HOME/0g-storage-node/run/config.toml\n```\n\nFind the `miner_key` line and replace with your private key (without 0x prefix):\n\n```toml\n# Miner key is used to sign blockchain transaction for incentive.\n# The value should be a hex string of length 64 without 0x prefix.\n#\n# Note, the corresponding address should have enough tokens to pay\n# transaction gas fee.\nminer_key = \"YOUR_PRIVATE_KEY_HERE\"\n```\n\n> ⚠️ **Important**: \n> - Your private key should be 64 characters long (without 0x prefix)\n> - The corresponding wallet address must have sufficient tokens for gas fees\n> - Never share your private key with anyone\n\n## Service Management\n\n### Create Systemd Service\n\nCreate a systemd service for automatic startup and management:\n\n```bash\nsudo tee /etc/systemd/system/zgs.service > /dev/null <<EOF\n[Unit]\nDescription=0G Storage Node\nAfter=network.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/0g-storage-node/run\nExecStart=$HOME/0g-storage-node/target/release/zgs_node --config $HOME/0g-storage-node/run/config.toml\nRestart=on-failure\nRestartSec=10\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n### Start the Service\n\nEnable and start the 0G Storage Node service:\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable zgs\nsudo systemctl start zgs\n```\n\n### Check Service Status\n\n```bash\nsudo systemctl status zgs\n```\n\n## Security Setup\n\nConfigure firewall to allow necessary ports:\n\n```bash\n# Allow P2P communication port\nsudo ufw allow 1234/tcp comment '0G Storage P2P Port'\nsudo ufw allow 1234/udp comment '0G Storage P2P Port'\n\n# Allow RPC port (if needed for external access)\nsudo ufw allow 5678/tcp comment '0G Storage RPC Port'\n\n# Enable firewall\nsudo ufw enable\n```\n\n## Monitoring Tools\n\n### Block Checker Script\n\nSave this script to monitor your node's synchronization status:\n\n```bash\n# Create the monitoring script\ncat > $HOME/check_storage_blocks.sh << 'EOF'\n#!/bin/bash\n\necho \"\"\necho \"🛰️  0G Storage Block Checker\"\necho \"===============================\"\necho \"\"\n\n# Detect RPC from Systemd Service\nSYSTEMD_SERVICE=\"/etc/systemd/system/zgs.service\"\nif [[ -f \"$SYSTEMD_SERVICE\" ]]; then\n    RPC_URL=$(grep -oP '(?<=--rpc\\s)[^ ]+|(?<=--blockchain_rpc_endpoint\\s)[^ ]+' \"$SYSTEMD_SERVICE\" | head -n 1)\nfi\n\n# If RPC from systemd is not found, check from config.toml\nif [[ -z \"$RPC_URL\" ]]; then\n    RPC_URL=$(grep 'blockchain_rpc_endpoint' $HOME/0g-storage-node/run/config.toml | cut -d '\"' -f2)\nfi\n\n# If there is still no RPC URL, use the default\nif [[ -z \"$RPC_URL\" ]]; then\n    RPC_URL=\"https://0g-testnet-rpc.astrostake.xyz\"\n    echo -e \"❌ RPC URL not detected in systemd service or config.toml.\"\n    echo -e \"🌐 Using default RPC: \\033[1;34m$RPC_URL\\033[0m\"\nfi\n\n# Display RPC used\necho -e \"🔗 RPC: \\033[1;34m$RPC_URL\\033[0m\"\necho -e \"\"\n\n# Check node version\ncd $HOME/0g-storage-node\nVERSION=$(git describe --tags --abbrev=0 2>/dev/null)\nif [[ -n \"$VERSION\" ]]; then\n    echo -e \"🧩 Storage Node Version: \\e[1;32m$VERSION\\e[0m\"\nelse\n    echo -e \"🧩 Storage Node Version: \\e[31mUnknown\\e[0m\"\nfi\n\necho -e \"\"\n\nprev_block=0\nprev_time=0\n\nwhile true; do \n    # Fetch local node status\n    LOCAL_RESPONSE=$(curl -s -X POST http://127.0.0.1:5678 -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"zgs_getStatus\",\"params\":[],\"id\":1}')\n    logSyncHeight=$(echo \"$LOCAL_RESPONSE\" | jq '.result.logSyncHeight' 2>/dev/null)\n    connectedPeers=$(echo \"$LOCAL_RESPONSE\" | jq '.result.connectedPeers' 2>/dev/null)\n\n    # Fetch network block number\n    NETWORK_RESPONSE=$(curl -s -m 5 -X POST \"$RPC_URL\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}')\n    latestBlockHex=$(echo \"$NETWORK_RESPONSE\" | jq -r '.result' 2>/dev/null)\n\n    # Validate block status\n    if [[ \"$logSyncHeight\" =~ ^[0-9]+$ ]]; then\n        local_status=\"$logSyncHeight\"\n    else\n        local_status=\"N/A\"\n    fi\n\n    [[ \"$connectedPeers\" =~ ^[0-9]+$ ]] || connectedPeers=0\n\n    if [[ \"$NETWORK_RESPONSE\" == *\"rate limit\"* || \"$NETWORK_RESPONSE\" == *\"Too Many Requests\"* ]]; then\n        network_status=\"N/A (RPC Rate Limited)\"\n    elif [[ -z \"$NETWORK_RESPONSE\" || \"$NETWORK_RESPONSE\" == \"null\" ]]; then\n        network_status=\"N/A (RPC Timeout)\"\n    elif [[ \"$latestBlockHex\" =~ ^0x[0-9a-fA-F]+$ ]]; then\n        latestBlock=$((16#${latestBlockHex:2}))\n        network_status=\"$latestBlock\"\n    else\n        network_status=\"N/A (Invalid RPC Response)\"\n    fi\n\n    # Calculate BPS and ETA\n    extra_info=\"\"\n    if [[ \"$logSyncHeight\" =~ ^[0-9]+$ && \"$latestBlock\" =~ ^[0-9]+$ ]]; then\n        block_diff=$((latestBlock - logSyncHeight))\n        current_time=$(date +%s)\n\n        # Only show speed & ETA if block difference is 10 or more\n        if [ \"$block_diff\" -ge 10 ]; then\n            if [[ \"$prev_block\" =~ ^[0-9]+$ && \"$prev_time\" =~ ^[0-9]+$ ]]; then\n                delta_block=$((logSyncHeight - prev_block))\n                delta_time=$((current_time - prev_time))\n\n                if (( delta_time > 0 && delta_block >= 0 )); then\n                    bps=$(echo \"scale=2; $delta_block / $delta_time\" | bc)\n                    if (( $(echo \"$bps > 0\" | bc -l) )); then\n                        eta_sec=$(echo \"scale=0; $block_diff / $bps\" | bc)\n                        if (( eta_sec < 60 )); then\n                            eta_display=\"$eta_sec sec\"\n                        elif (( eta_sec < 3600 )); then\n                            eta_display=\"$((eta_sec / 60)) min\"\n                        elif (( eta_sec < 86400 )); then\n                            eta_display=\"$((eta_sec / 3600)) hr\"\n                        else\n                            eta_display=\"$((eta_sec / 86400)) day(s)\"\n                        fi\n                        extra_info=\"| Speed: ${bps} blocks/s | ETA: ${eta_display}\"\n                    else\n                        extra_info=\"| Speed: 0 blocks/s | ETA: ∞\"\n                    fi\n                fi\n            fi\n        fi\n\n        prev_block=$logSyncHeight\n        prev_time=$current_time\n\n        # Set color based on block difference\n        if [ \"$block_diff\" -le 5 ]; then\n            diff_color=\"\\\\033[32m\" # Green\n        elif [ \"$block_diff\" -le 20 ]; then\n            diff_color=\"\\\\033[33m\" # Yellow\n        else\n            diff_color=\"\\\\033[31m\" # Red\n        fi\n\n        block_status=\"(\\033[0m${diff_color}Behind $block_diff\\033[0m)\"\n    else\n        block_status=\"\"\n    fi\n\n    # Display Status\n    echo -e \"Local Block: \\033[32m$local_status\\033[0m / Network Block: \\033[33m$network_status\\033[0m $block_status | Peers: \\033[34m$connectedPeers\\033[0m $extra_info\"\n    sleep 5\ndone\nEOF\n\n# Make the script executable\nchmod +x $HOME/check_storage_blocks.sh\n```\n\nRun the block checker:\n\n```bash\n$HOME/check_storage_blocks.sh\n```\n\n### RPC Updater Script\n\nScript to easily change RPC endpoints:\n\n```bash\n# Create RPC updater script\ncat > $HOME/change_storage_rpc.sh << 'EOF'\n#!/bin/bash\n\nCONFIG_FILE=\"$HOME/0g-storage-node/run/config.toml\"\n\necho \"===================================\"\necho \"    Storage RPC Updater Script     \"\necho \"===================================\"\necho \"\"\n\n# Check if config file exists\nif [[ ! -f \"$CONFIG_FILE\" ]]; then\n    echo \"❌ Error: Config file not found at $CONFIG_FILE\"\n    exit 1\nfi\n\n# Get current RPC from config.toml\nCURRENT_RPC=$(grep -oP '(?<=^blockchain_rpc_endpoint = \")[^\"]+' \"$CONFIG_FILE\")\n\necho \"🔹 Current RPC: $CURRENT_RPC\"\necho \"\"\n\n# Get new RPC input from user\nread -p \"Enter the new RPC URL: \" NEW_RPC\n\n# Check if user provided input\nif [[ -z \"$NEW_RPC\" ]]; then\n    echo \"❌ No RPC URL provided. Exiting...\"\n    exit 1\nfi\n\n# Validate RPC format\nif ! [[ \"$NEW_RPC\" =~ ^https?:// ]]; then\n    echo \"❌ Invalid RPC URL format. Must start with http:// or https://\"\n    exit 1\nfi\n\n# Check if new RPC is same as current\nif [[ \"$NEW_RPC\" == \"$CURRENT_RPC\" ]]; then\n    echo \"⚠️ New RPC is the same as the current one. No changes made.\"\n    exit 0\nfi\n\n# Update configuration\nsed -i \"s|^blockchain_rpc_endpoint = .*|blockchain_rpc_endpoint = \\\"$NEW_RPC\\\"|\" \"$CONFIG_FILE\"\n\n# Restart zgs service\necho \"\"\necho \"Restarting zgs service...\"\nsudo systemctl restart zgs\n\n# Confirm changes\necho \"✅ RPC updated to: $NEW_RPC\"\necho \"===============================\"\nEOF\n\n# Make the script executable\nchmod +x $HOME/change_storage_rpc.sh\n```\n\nRun the RPC updater:\n\n```bash\n$HOME/change_storage_rpc.sh\n```\n\n## Useful Commands\n\n### Check Service Status\n```bash\nsudo systemctl status zgs\n```\n\n### View Real-time Logs\n```bash\nsudo journalctl -u zgs -f\n```\n\n### View Storage Node Logs\n```bash\ntail -f ~/0g-storage-node/run/log/zgs.log.$(TZ=UTC date +%Y-%m-%d)\n```\n\n### Restart Service\n```bash\nsudo systemctl restart zgs\n```\n\n### Stop Service\n```bash\nsudo systemctl stop zgs\n```\n\n### Check Node Version\n```bash\ncd $HOME/0g-storage-node && git describe --tags --abbrev=0\n```\n\n### Check Local Node Status\n```bash\ncurl -s -X POST http://127.0.0.1:5678 -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"zgs_getStatus\",\"params\":[],\"id\":1}' | jq\n```\n\n## Troubleshooting\n\n### Common Issues\n\n#### 1. Node Not Syncing\n- Check if the RPC endpoint is working\n- Verify your miner key is correct\n- Check firewall settings\n- Ensure sufficient disk space\n\n#### 2. Service Won't Start\n```bash\n# Check service status\nsudo systemctl status zgs\n\n# View detailed logs\nsudo journalctl -u zgs -n 50\n\n# Check config file syntax\ncat $HOME/0g-storage-node/run/config.toml\n```\n\n#### 3. Connection Issues\n```bash\n# Test RPC connectivity\ncurl -X POST YOUR_RPC_URL -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n\n# Check firewall\nsudo ufw status\n\n# Check port binding\nsudo netstat -tlnp | grep :5678\n```\n\n#### 4. Build Errors\n```bash\n# Clean and rebuild\ncd $HOME/0g-storage-node\ncargo clean\ncargo build --release\n```\n\n### Reset Node Data\n\nIf you need to reset your node and start fresh:\n\n```bash\n# Stop the service\nsudo systemctl stop zgs\n\n# Remove node data (keeps config)\nrm -rf $HOME/0g-storage-node/run/db\nrm -rf $HOME/0g-storage-node/run/log\n\n# Start the service\nsudo systemctl start zgs\n```\n\n### Complete Removal\n\nTo completely remove the node:\n\n```bash\n# Stop and disable service\nsudo systemctl stop zgs\nsudo systemctl disable zgs\n\n# Remove service file\nsudo rm /etc/systemd/system/zgs.service\nsudo systemctl daemon-reload\n\n# Remove node directory\nrm -rf $HOME/0g-storage-node\n\n# Remove scripts\nrm -f $HOME/check_storage_blocks.sh\nrm -f $HOME/change_storage_rpc.sh\n```\n\n## Support\n\n- **Official Documentation**: [0G Labs Documentation](https://docs.0g.ai/)\n- **Discord**: [0G Labs Discord](https://discord.gg/0glabs)\n- **GitHub**: [0G Storage Node Repository](https://github.com/0glabs/0g-storage-node)\n\n---\n\n**Note**: This guide is for testnet purposes. Always ensure you understand the risks involved in running blockchain nodes and never share your private keys."
        }
      ]
    },
    {
      "id": "section-1755455087064",
      "title": "0G Chain Snapshot Service",
      "icon": "💾",
      "type": "section",
      "children": [
        {
          "id": "page-1755455125928",
          "title": "0G Chain Snapshot  Guide",
          "icon": "⌨️",
          "type": "page",
          "content": "# 📸 Coinsspor 0G Chain Snapshot Service\n\n**Ultra-Fast LZ4 Compression • Professional Infrastructure**\n\n[![Website](https://img.shields.io/badge/Website-snaps.coinsspor.com-blue)](https://snaps.coinsspor.com)\n[![API](https://img.shields.io/badge/API-LZ4-green)](https://snaps.coinsspor.com/api/0g/)\n[![Update](https://img.shields.io/badge/Update-Every%205%20Hours-orange)](https://snaps.coinsspor.com)\n\n## 🎯 Quick Info\n\n- **🌐 URL**: https://snaps.coinsspor.com/\n- **🔗 API**: https://snaps.coinsspor.com/api/0g/\n- **⏰ Update**: Every 5 hours (00:00, 05:00, 10:00, 15:00, 20:00 UTC)\n- **🗜️ Compression**: LZ4 (ultra-fast extraction)\n- **📦 Size**: ~70MB Consensus + ~131GB Execution\n- **🌐 Network**: 0G Testnet\n\n## 📋 Prerequisites\n\nInstall required tools:\n\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y aria2 lz4 jq curl\n\n# Verify installation\naria2c --version && lz4 --version && jq --version\n```\n\n## 📊 Check Latest Snapshot\n\n```bash\n# Get current block height\necho \"Current 0G Height: $(curl -s https://snaps.coinsspor.com/api/0g/ | jq -r '.block_height')\"\n\n# Get detailed snapshot information\ncurl -s https://snaps.coinsspor.com/api/0g/ | jq '.'\n```\n\n## 🚀 Download & Install Snapshots\n\n### Step 1: Prepare Environment\n\n```bash\n# Stop 0G services\nsudo systemctl stop 0gchaind 0ggeth\n\n# Backup validator state (IMPORTANT!)\nmkdir -p /tmp/0g-backup\ncp ~/.0gchaind/0g-home/0gchaind-home/data/priv_validator_state.json /tmp/0g-backup/\n\n# Clear old data (but keep structure)\nrm -rf ~/.0gchaind/0g-home/0gchaind-home/data/*\nrm -rf ~/.0gchaind/0g-home/geth-home/geth/chaindata\nmkdir -p ~/.0gchaind/0g-home/0gchaind-home/data\nmkdir -p ~/.0gchaind/0g-home/geth-home/geth\n```\n\n### Step 2: Download Snapshots\n\n```bash\n# Get latest snapshot URLs\nAPI_DATA=$(curl -s https://snaps.coinsspor.com/api/0g/)\nCONSENSUS_URL=\"https://snaps.coinsspor.com$(echo \"$API_DATA\" | jq -r '.snapshots[] | select(.type==\"consensus\") | .url')\"\nEXECUTION_URL=\"https://snaps.coinsspor.com$(echo \"$API_DATA\" | jq -r '.snapshots[] | select(.type==\"execution\") | .url')\"\n\necho \"Downloading from:\"\necho \"Consensus: $CONSENSUS_URL\"\necho \"Execution: $EXECUTION_URL\"\n\n# Download with aria2c (ultra-fast multi-connection)\nmkdir -p /tmp/0g-snapshots\ncd /tmp/0g-snapshots\n\n# Optimized aria2c settings for maximum speed\nARIA2C_OPTS=(\n    --max-connection-per-server=12\n    --split=12\n    --min-split-size=10M\n    --max-concurrent-downloads=2\n    --disk-cache=64M\n    --file-allocation=falloc\n    --continue=true\n    --max-tries=5\n    --retry-wait=2\n    --timeout=120\n    --user-agent=\"Coinsspor-0G-Client/1.0\"\n)\n\n# Download consensus (~70MB) - Super fast\necho \"📥 Downloading 0G consensus snapshot...\"\naria2c \"${ARIA2C_OPTS[@]}\" \"$CONSENSUS_URL\"\n\n# Download execution (~131GB) - Ultra fast with 12 connections  \necho \"📥 Downloading 0G execution snapshot...\"\naria2c \"${ARIA2C_OPTS[@]}\" \"$EXECUTION_URL\"\n```\n\n### Step 3: Extract Snapshots\n\n```bash\n# Extract consensus to 0gchaind data directory\necho \"📂 Extracting 0G consensus snapshot...\"\nCONSENSUS_FILE=$(basename \"$CONSENSUS_URL\")\nlz4 -dc \"$CONSENSUS_FILE\" | tar -xf - -C ~/.0gchaind/0g-home/0gchaind-home/data/\n\n# Extract execution to 0ggeth data directory\necho \"📂 Extracting 0G execution snapshot...\"\nEXECUTION_FILE=$(basename \"$EXECUTION_URL\")\nlz4 -dc \"$EXECUTION_FILE\" | tar -xf - -C ~/.0gchaind/0g-home/geth-home/\n```\n\n### Step 4: Restore & Start\n\n```bash\n# Restore validator state\ncp /tmp/0g-backup/priv_validator_state.json ~/.0gchaind/0g-home/0gchaind-home/data/\n\n# Start 0G services\nsudo systemctl start 0ggeth\nsleep 10\nsudo systemctl start 0gchaind\n\n# Cleanup temporary files and downloaded snapshots\necho \"🧹 Cleaning up temporary files...\"\nrm -rf /tmp/0g-snapshots /tmp/0g-backup\n\n# Remove downloaded snapshot files to save disk space\necho \"🗑️ Removing downloaded snapshot files to save disk space...\"\ncd /tmp\nrm -f coinsspor-0g-*.tar.lz4\necho \"✅ Cleanup completed!\"\n```\n\n## 📊 Verify Installation\n\n```bash\n# Check 0G services\nsudo systemctl status 0gchaind 0ggeth\n\n# Monitor 0G sync\nsudo journalctl -u 0gchaind -f\n\n# Check 0G sync status\n0gchaind status --node tcp://localhost:47657 | jq '.SyncInfo'\n\n# Check if node is catching up\ncurl -s localhost:47657/status | jq '.result.sync_info.catching_up'\n```\n\n## 🔒 Security Features\n\n- ✅ **Validator Safe**: Automatic state backup/restore\n- ✅ **Rollback Ready**: Original data preserved until completion\n- ✅ **SSL Secured**: HTTPS downloads only\n- ✅ **Integrity Check**: LZ4 built-in verification\n- ✅ **Safe Extraction**: Atomic operations\n\n## 📈 Performance\n\n- **Download Speed**: Up to 500MB/s+ (12 parallel connections)\n- **Compression Ratio**: ~50% (160GB → 131GB)\n- **Sync Time**: 3-8 minutes download + **30 seconds extraction**\n- **Disk Space**: Requires ~250GB free during extraction\n- **Technology**: aria2c multi-connection + LZ4 compression\n\n## 🆘 Troubleshooting\n\n### Download Issues\n```bash\n# Resume interrupted download with same optimized settings\ncd /tmp/0g-snapshots\naria2c --max-connection-per-server=12 --split=12 --continue=true [SNAPSHOT_URL]\n\n# Force re-download if corrupted\nrm -f *.tar.lz4\n# Re-run Step 2 download commands\n\n# Check network connectivity\ncurl -I https://snaps.coinsspor.com/api/0g/\n```\n\n### Extraction Issues\n```bash\n# Test file integrity\nlz4 -t snapshot_file.tar.lz4\n\n# Check disk space\ndf -h ~/.0gchaind/\n\n# Manual extraction test\nlz4 -dc snapshot_file.tar.lz4 | tar -tf - | head -10\n```\n\n### Service Issues\n```bash\n# Reset and restart 0G services\nsudo systemctl stop 0gchaind 0ggeth\nsudo systemctl reset-failed 0gchaind 0ggeth\nsudo systemctl start 0ggeth\nsleep 10\nsudo systemctl start 0gchaind\n\n# Check service logs\nsudo journalctl -u 0gchaind -n 50\nsudo journalctl -u 0ggeth -n 50\n```\n\n### Port Issues\n```bash\n# Check if correct port is being used\ngrep -n \"laddr\" ~/.0gchaind/0g-home/0gchaind-home/config/config.toml\n\n# Test RPC with correct port\ncurl -s localhost:47657/status | jq '.result.node_info.network'\n```\n\n## 📞 Support\n\n- **🌐 Website**: https://snaps.coinsspor.com/\n- **🔗 API**: https://snaps.coinsspor.com/api/0g/\n- **📊 Status**: Check service status via API\n- **💬 Community**: [Join our community for support](https://coinsspor.com)\n\n## 🎖️ Why Choose Coinsspor Snapshots?\n\n### ⚡ **Ultra-Fast Performance**\n- **LZ4 Compression**: 20x faster extraction than ZSTD\n- **aria2c Multi-connection**: Up to 12 parallel downloads\n- **Professional Infrastructure**: 99.9% uptime guarantee\n\n### 🔒 **Maximum Security**\n- **Validator Protection**: Your validator keys are never at risk\n- **SSL Encryption**: All downloads are HTTPS secured\n- **Atomic Operations**: Safe rollback if anything goes wrong\n\n### 🕐 **Always Fresh**\n- **5-Hour Updates**: Always get the latest blockchain state\n- **Automated Pipeline**: No manual intervention required\n- **Real-time API**: Check exact block height before download\n\n### 🌟 **Community First**\n- **Open Source**: All scripts and guides are public\n- **Free Service**: No hidden costs or limitations\n- **Professional Support**: Community-driven assistance\n\n---\n\n## 📊 Service Statistics\n\n| Metric | Value |\n|--------|--------|\n| **Average Download Speed** | 300-500 MB/s |\n| **Extraction Time** | ~30 seconds |\n| **Total Sync Time** | 3-8 minutes |\n| **Uptime** | 99.9% |\n| **Updates** | Every 5 hours |\n| **Compression** | LZ4 (Ultra-fast) |\n\n---\n\n**🚀 Powered by [Coinsspor](https://coinsspor.com) | Professional 0G Chain Infrastructure**\n\n*Making blockchain sync lightning fast for everyone* ⚡\n\n---\n\n### Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=coinsspor/0G-Testnet&type=Date)](https://star-history.com/#coinsspor/0G-Testnet&Date)\n\n---\n\n*If this service helped you, please consider giving us a ⭐ on GitHub!*"
        }
      ]
    }
  ],
  "projectInfo": {
    "name": "0g Galileo Testnet",
    "logo": "https://raw.githubusercontent.com/coinsspor/coinsspor/refs/heads/main/0glogo.jpg",
    "banner": "https://raw.githubusercontent.com/coinsspor/coinsspor/refs/heads/main/0gbabbmer.jpg",
    "description": "0g Galileo Testnet",
    "theme": {
      "primary": "#10b981",
      "secondary": "#8b5cf6"
    }
  },
  "lastUpdated": "2025-08-17T18:33:04.047Z",
  "projectId": "0G-Chain-testnet",
  "version": "1.0.0"
}