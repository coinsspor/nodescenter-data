{
  "documentation": [
    {
      "id": "section-1755119201508",
      "title": "0G Galileo Testnet",
      "icon": "💫",
      "type": "section",
      "children": [
        {
          "id": "page-1755119233098",
          "title": "Node Installation Guide",
          "icon": "📄",
          "type": "page",
          "content": "# 0G Galileo Testnet Node Installation Guide\n\n<div align=\"center\">\n\n![0G Network](https://img.shields.io/badge/0G-Galileo%20Testnet-blue)\n![Version](https://img.shields.io/badge/Version-v2.0.2-green)\n![Go](https://img.shields.io/badge/Go-1.21.3-00ADD8?logo=go)\n![License](https://img.shields.io/badge/License-MIT-yellow)\n\n</div>\n\n## 📖 Table of Contents\n- [System Requirements](#-system-requirements)\n- [Manual Installation](#-manual-installation)\n- [Node Management](#-node-management)\n- [Manual Upgrade](#-manual-upgrade)\n- [Delete Node](#-delete-node)\n- [Useful Commands](#-useful-commands)\n- [Troubleshooting](#-troubleshooting)\n\n## 💻 System Requirements\n\n### Recommended Hardware\n- **CPU**: 8 Cores\n- **RAM**: 64GB\n- **Storage**: 1TB (NVME SSD)\n- **OS**: Ubuntu 20.04+ LTS\n\n### Network Requirements\n- Stable internet connection\n- Public IP address\n- Open ports (will be configured during setup)\n\n## 🚀 Manual Installation\n\n### Step 1: Install Dependencies\n\nUpdate your system and install required packages:\n\n```bash\nsudo apt update && sudo apt upgrade -y\nsudo apt install curl git wget htop tmux build-essential jq make lz4 gcc unzip -y\n```\n\n### Step 2: Install Go\n\nInstall Go version 1.21.3:\n\n```bash\ncd $HOME\nVER=\"1.21.3\"\nwget \"https://golang.org/dl/go$VER.linux-amd64.tar.gz\"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf \"go$VER.linux-amd64.tar.gz\"\nrm \"go$VER.linux-amd64.tar.gz\"\n\n[ ! -f ~/.bash_profile ] && touch ~/.bash_profile\necho \"export PATH=$PATH:/usr/local/go/bin:~/go/bin\" >> ~/.bash_profile\nsource $HOME/.bash_profile\n[ ! -d ~/go/bin ] && mkdir -p ~/go/bin\n```\n\n### Step 3: Set Environment Variables\n\n> ⚠️ **Important**: Replace `test` with your desired node name (moniker)\n\n```bash\necho \"export MONIKER=\\\"test\\\"\" >> $HOME/.bash_profile\necho \"export OG_PORT=\\\"47\\\"\" >> $HOME/.bash_profile\necho 'export PATH=$PATH:$HOME/galileo-used/bin' >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n```\n\n> 💡 **Note**: You can change `OG_PORT` to a different value if port 47 is already in use\n\n### Step 4: Download and Setup Binaries\n\n```bash\ncd $HOME\nrm -rf galileo\nwget -O galileo.tar.gz https://github.com/0glabs/0gchain-NG/releases/download/v2.0.2/galileo-v2.0.2.tar.gz\ntar -xzvf galileo.tar.gz -C $HOME\nrm -rf $HOME/galileo.tar.gz\nmv galileo-v2.0.2 galileo\nchmod +x $HOME/galileo/bin/geth\nchmod +x $HOME/galileo/bin/0gchaind\ncp $HOME/galileo/bin/geth $HOME/go/bin/geth\ncp $HOME/galileo/bin/0gchaind $HOME/go/bin/0gchaind\nmv $HOME/galileo $HOME/galileo-used\n```\n\n### Step 5: Create Configuration Directory\n\n```bash\nmkdir -p $HOME/.0gchaind\ncp -r $HOME/galileo-used/0g-home $HOME/.0gchaind\n```\n\n### Step 6: Initialize Geth\n\n```bash\ngeth init --datadir $HOME/.0gchaind/0g-home/geth-home $HOME/galileo-used/genesis.json\n```\n\n### Step 7: Initialize 0gchaind\n\n```bash\n0gchaind init $MONIKER --home $HOME/.0gchaind/tmp\nmv $HOME/.0gchaind/tmp/data/priv_validator_state.json $HOME/.0gchaind/0g-home/0gchaind-home/data/\nmv $HOME/.0gchaind/tmp/config/node_key.json $HOME/.0gchaind/0g-home/0gchaind-home/config/\nmv $HOME/.0gchaind/tmp/config/priv_validator_key.json $HOME/.0gchaind/0g-home/0gchaind-home/config/\nrm -rf $HOME/.0gchaind/tmp\n```\n\n### Step 8: Configure Node Settings\n\nSet moniker in config:\n```bash\nsed -i -e \"s/^moniker *=.*/moniker = \\\"$MONIKER\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\n```\n\nConfigure custom ports for Geth:\n```bash\nsed -i \"s/HTTPPort = .*/HTTPPort = ${OG_PORT}545/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/WSPort = .*/WSPort = ${OG_PORT}546/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/AuthPort = .*/AuthPort = ${OG_PORT}551/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/ListenAddr = .*/ListenAddr = \\\":${OG_PORT}303\\\"/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/^# *Port = .*/# Port = ${OG_PORT}901/\" $HOME/galileo-used/geth-config.toml\nsed -i \"s/^# *InfluxDBEndpoint = .*/# InfluxDBEndpoint = \\\"http:\\/\\/localhost:${OG_PORT}086\\\"/\" $HOME/galileo-used/geth-config.toml\n```\n\n### Step 9: Set Seeds and Peers\n\n```bash\nPEERS=3a11d0b48d7c477d133f959efb33d47d81aeae6d@og-testnet-peer.itrocket.net:47656\nSEEDS=cfa49d6db0c9065e974bfdbc9e0f55712ee2b0b9@og-testnet-seed.itrocket.net:47656\nsed -i -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*persistent_peers *=.*/persistent_peers = \\\"$PEERS\\\"/}\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\nsed -i -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*seeds *=.*/seeds = \\\"$SEEDS\\\"/}\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\n```\n\n### Step 10: Configure Custom Ports\n\n```bash\nsed -i.bak -e \"s%:26658%:${OG_PORT}658%g;\ns%:26657%:${OG_PORT}657%g;\ns%:6060%:${OG_PORT}060%g;\ns%:26656%:${OG_PORT}656%g;\ns%:26660%:${OG_PORT}660%g\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\n\nsed -i \"s/address = \\\".*:3500\\\"/address = \\\"127\\.0\\.0\\.1:${OG_PORT}500\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\nsed -i \"s/^rpc-dial-url *=.*/rpc-dial-url = \\\"http:\\/\\/localhost:${OG_PORT}551\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\n```\n\n### Step 11: Optimize Node Settings\n\nDisable indexer:\n```bash\nsed -i -e \"s/^indexer *=.*/indexer = \\\"null\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/config.toml\n```\n\nConfigure pruning:\n```bash\nsed -i -e \"s/^pruning *=.*/pruning = \\\"custom\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\nsed -i -e \"s/^pruning-keep-recent *=.*/pruning-keep-recent = \\\"100\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\nsed -i -e \"s/^pruning-interval *=.*/pruning-interval = \\\"19\\\"/\" $HOME/.0gchaind/0g-home/0gchaind-home/config/app.toml\n```\n\nCreate symbolic link:\n```bash\nln -sf $HOME/.0gchaind/0g-home/0gchaind-home/config/client.toml $HOME/.0gchaind/config/client.toml\n```\n\n### Step 12: Create Systemd Services\n\n#### Create 0ggeth Service\n\n```bash\nsudo tee /etc/systemd/system/0ggeth.service > /dev/null <<EOF\n[Unit]\nDescription=0g Geth Node Service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/galileo-used\nExecStart=$HOME/go/bin/geth \\\n    --config $HOME/galileo-used/geth-config.toml \\\n    --datadir $HOME/.0gchaind/0g-home/geth-home \\\n    --networkid 16601 \\\n    --http.port ${OG_PORT}545 \\\n    --ws.port ${OG_PORT}546 \\\n    --authrpc.port ${OG_PORT}551 \\\n    --bootnodes enode://de7b86d8ac452b1413983049c20eafa2ea0851a3219c2cc12649b971c1677bd83fe24c5331e078471e52a94d95e8cde84cb9d866574fec957124e57ac6056699@8.218.88.60:30303 \\\n    --port ${OG_PORT}303\nRestart=always\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n#### Create 0gchaind Service\n\n```bash\nsudo tee /etc/systemd/system/0gchaind.service > /dev/null <<EOF\n[Unit]\nDescription=0gchaind Node Service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/galileo-used\nExecStart=$(which 0gchaind) start \\\n--rpc.laddr tcp://0.0.0.0:${OG_PORT}657 \\\n--chaincfg.chain-spec devnet \\\n--chaincfg.kzg.trusted-setup-path $HOME/galileo-used/kzg-trusted-setup.json \\\n--chaincfg.engine.jwt-secret-path $HOME/galileo-used/jwt-secret.hex \\\n--chaincfg.kzg.implementation=crate-crypto/go-kzg-4844 \\\n--chaincfg.block-store-service.enabled \\\n--chaincfg.node-api.enabled \\\n--chaincfg.node-api.logging \\\n--chaincfg.node-api.address 0.0.0.0:${OG_PORT}500 \\\n--chaincfg.engine.rpc-dial-url http://localhost:${OG_PORT}551 \\\n--pruning=nothing \\\n--p2p.seeds 85a9b9a1b7fa0969704db2bc37f7c100855a75d9@8.218.88.60:26656 \\\n--p2p.external_address $(wget -qO- eth0.me):${OG_PORT}656 \\\n--home $HOME/.0gchaind/0g-home/0gchaind-home \\\n--chaincfg.restaking.enabled \\\n--chaincfg.restaking.symbiotic-rpc-dial-url https://ethereum-holesky-rpc.publicnode.com \\\n--chaincfg.restaking.symbiotic-get-logs-block-range 1\nRestart=always\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n### Step 13: Start Services\n\n```bash\n# Enable and start services\nsudo systemctl daemon-reload\nsudo systemctl enable 0ggeth\nsudo systemctl restart 0ggeth\nsudo systemctl enable 0gchaind\nsudo systemctl restart 0gchaind\n\n# Check logs\nsudo journalctl -u 0gchaind -u 0ggeth -f --no-hostname -o cat\n```\n\n## 🔧 Node Management\n\n### Check Service Status\n\n```bash\n# Check 0ggeth status\nsudo systemctl status 0ggeth\n\n# Check 0gchaind status\nsudo systemctl status 0gchaind\n```\n\n### View Logs\n\n```bash\n# View both services logs\nsudo journalctl -u 0gchaind -u 0ggeth -f --no-hostname -o cat\n\n# View 0ggeth logs only\nsudo journalctl -u 0ggeth -f\n\n# View 0gchaind logs only\nsudo journalctl -u 0gchaind -f\n```\n\n### Stop Services\n\n```bash\nsudo systemctl stop 0gchaind 0ggeth\n```\n\n### Restart Services\n\n```bash\nsudo systemctl restart 0ggeth\nsudo systemctl restart 0gchaind\n```\n\n## ⬆️ Manual Upgrade\n\nTo upgrade your node to a new version:\n\n```bash\n# Stop services\nsudo systemctl stop 0gchaind 0ggeth\n\n# Download new version\ncd\nrm -rf bin\nmkdir $HOME/bin\ncd bin\nwget \"https://github.com/0glabs/0gchain-NG/releases/download/v2.0.2/galileo-v2.0.2.tar.gz\"\ntar -xvzf galileo-v2.0.2.tar.gz\ncd galileo-v2.0.2\nchmod +x $HOME/bin/galileo-v2.0.2/bin/0gchaind $HOME/bin/galileo-v2.0.2/bin/geth\ncp $HOME/bin/galileo-v2.0.2/bin/0gchaind $(which 0gchaind)\ncp $HOME/bin/galileo-v2.0.2/bin/geth $(which geth)\n\n# Update 0gchaind systemd file (if needed)\nsudo tee /etc/systemd/system/0gchaind.service > /dev/null <<EOF\n[Unit]\nDescription=0gchaind Node Service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/galileo-used\nExecStart=$(which 0gchaind) start \\\n--rpc.laddr tcp://0.0.0.0:${OG_PORT}657 \\\n--chaincfg.chain-spec devnet \\\n--chaincfg.kzg.trusted-setup-path $HOME/galileo-used/kzg-trusted-setup.json \\\n--chaincfg.engine.jwt-secret-path $HOME/galileo-used/jwt-secret.hex \\\n--chaincfg.kzg.implementation=crate-crypto/go-kzg-4844 \\\n--chaincfg.block-store-service.enabled \\\n--chaincfg.node-api.enabled \\\n--chaincfg.node-api.logging \\\n--chaincfg.node-api.address 0.0.0.0:${OG_PORT}500 \\\n--chaincfg.engine.rpc-dial-url http://localhost:${OG_PORT}551 \\\n--pruning=nothing \\\n--p2p.seeds 85a9b9a1b7fa0969704db2bc37f7c100855a75d9@8.218.88.60:26656 \\\n--p2p.external_address $(wget -qO- eth0.me):${OG_PORT}656 \\\n--home $HOME/.0gchaind/0g-home/0gchaind-home \\\n--chaincfg.restaking.enabled \\\n--chaincfg.restaking.symbiotic-rpc-dial-url https://ethereum-holesky-rpc.publicnode.com \\\n--chaincfg.restaking.symbiotic-get-logs-block-range 1\nRestart=always\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Restart services\nsudo systemctl daemon-reload\nsudo systemctl restart 0ggeth\nsudo systemctl restart 0gchaind && sudo journalctl -u 0gchaind -f\n```\n\n## 🗑️ Delete Node\n\nTo completely remove the node from your system:\n\n```bash\n# Stop and disable services\nsudo systemctl stop 0gchaind 0ggeth\nsudo systemctl disable 0gchaind 0ggeth\n\n# Remove data directory\nrm -rf $HOME/.0gchaind\n\n# Remove service files\nsudo rm /etc/systemd/system/0gchaind.service /etc/systemd/system/0ggeth.service\n\n# Reload systemd\nsudo systemctl daemon-reload\n```\n\n## 📝 Useful Commands\n\n### Check Node Sync Status\n\n```bash\n# Check 0gchaind sync status\n0gchaind status 2>&1 | jq .SyncInfo\n\n# Check if node is catching up\n0gchaind status 2>&1 | jq .SyncInfo.catching_up\n```\n\n### Check Node Info\n\n```bash\n# Get node ID\n0gchaind tendermint show-node-id\n\n# Get validator info\n0gchaind tendermint show-validator\n```\n\n### Check Ports\n\n```bash\n# List all listening ports\nss -tulpn | grep LISTEN\n```\n\n### Monitor System Resources\n\n```bash\n# Check CPU and Memory usage\nhtop\n\n# Check disk usage\ndf -h\n\n# Check network connections\nnetstat -tnp | grep ESTABLISHED\n```\n\n## 🆘 Troubleshooting\n\n### Common Issues and Solutions\n\n#### 1. Node Not Starting\n- Check logs: `sudo journalctl -u 0gchaind -u 0ggeth -f`\n- Verify Go installation: `go version`\n- Check disk space: `df -h`\n- Ensure all ports are available\n\n#### 2. Sync Issues\n- Check peers: `curl -s localhost:${OG_PORT}657/net_info | jq .result.n_peers`\n- Verify genesis file is correct\n- Ensure proper network connectivity\n\n#### 3. Port Already in Use\n- Change `OG_PORT` variable to a different value\n- Re-run port configuration commands\n- Restart services\n\n#### 4. Permission Denied Errors\n- Ensure proper file permissions\n- Check user ownership of directories\n- Run commands with appropriate privileges\n\n## 📚 Resources\n\n- **Official Documentation**: [0G Labs GitHub](https://github.com/0glabs/0gchain-NG)\n- **Testnet Explorer**: Check official channels for explorer links\n- **Community Support**: Join official Discord/Telegram for support\n\n## 🔒 Security Recommendations\n\n1. **Firewall Configuration**: Only open necessary ports\n2. **Regular Updates**: Keep your system and node software updated\n3. **Backup Keys**: Always backup your validator keys securely\n4. **Monitor Performance**: Regularly check node performance and logs\n5. **Use SSH Keys**: Disable password authentication for SSH\n\n\n\n<div align=\"center\">\n\n**Made with ❤️ for 0G Community**\n\n*Last Updated: 2025*\n\n</div>"
        }
      ]
    },
    {
      "id": "section-1755119396742",
      "title": "0G Chain Validator Setup",
      "icon": "✨",
      "type": "section",
      "children": [
        {
          "id": "page-1755119415813",
          "title": "0G Chain Validator Setup with Foundry",
          "icon": "📄",
          "type": "page",
          "content": "# 0G Chain Validator Setup with Foundry\n\n<div align=\"center\">\n\n[![0G Chain](https://img.shields.io/static/v1?label=0G&message=Chain&color=blue&style=for-the-badge)](https://0g.ai)\n[![Foundry](https://img.shields.io/static/v1?label=Foundry&message=v1.2.3&color=green&style=for-the-badge)](https://github.com/foundry-rs/foundry)\n[![Ubuntu](https://img.shields.io/static/v1?label=Ubuntu&message=18.04%2B&color=orange&style=for-the-badge)](https://ubuntu.com)\n[![License](https://img.shields.io/static/v1?label=License&message=MIT&color=yellow&style=for-the-badge)](LICENSE)\n\n**🚀 Complete guide to setup and manage 0G Chain validators using Foundry**\n\n[📋 Prerequisites](#-prerequisites) • [🚀 Installation](#-installation) • [⚙️ Setup](#️-setup) • [🛠️ Management](#️-management) • [⚠️ Troubleshooting](#️-troubleshooting)\n\n---\n\n</div>\n\n## 📋 Prerequisites\n\n### Hardware Requirements\n| Component | Testnet | Mainnet |\n|-----------|---------|---------|\n| **RAM** | 64 GB | 64 GB |\n| **CPU** | 8 cores | 8 cores |\n| **Storage** | 4 TB NVME SSD | 1 TB NVME SSD |\n| **Network** | 100 Mbps | 100 Mbps |\n\n### Software Requirements\n- ✅ **Ubuntu 22.04+** or Debian-based Linux\n- ✅ **0G Node** synced and running\n- ✅ **32+ OG Tokens** for staking\n- ✅ **Root/sudo access**\n- ✅ **Stable internet connection**\n\n### Network Information (Testnet)\n```bash\nNetwork Name: 0G-Galileo-Testnet\nChain ID: 16601\nRPC URL: https://evmrpc-testnet.0g.ai\nExplorer: https://chainscan-galileo.0g.ai\nFaucet: https://faucet.0g.ai\n```\n\n---\n\n## 🚀 Installation\n\n### 1. System Check\n```bash\n# Check system compatibility\necho \"=== System Information ===\"\nuname -a && arch && lsb_release -a\n\n# Install required packages\nsudo apt update && sudo apt install -y curl jq\n\n# Check if 0G node is synced\ncurl -s http://localhost:26657/status | jq .result.sync_info.catching_up\n# USE YOUR OWN RPC PORT ,DEFAULT 26657 ,Should return: false (synced)\n```\n\n### 2. Install Foundry\n```bash\n\n\n# Install Foundry\ncurl -L https://foundry.paradigm.xyz | bash\nsource ~/.bashrc\nfoundryup\n\n# Verify installation\necho \"=== Foundry Version Information ===\"\ncast --version\nforge --version\nanvil --version\n```\n\n### 3. Test 0G Chain Connection\n```bash\n# Test connection to 0G testnet\necho \"=== 0G Chain Connection Test ===\"\n\n# Check chain ID (should return 16601)\ncast chain-id --rpc-url https://evmrpc-testnet.0g.ai\n\n# Get current block number\ncast block-number --rpc-url https://evmrpc-testnet.0g.ai\n\n# Test staking contract read\ncast call 0xea224dBB52F57752044c0C86aD50930091F561B9 \\\n    \"validatorCount()(uint32)\" \\\n    --rpc-url https://evmrpc-testnet.0g.ai\n```\n\n---\n\n## ⚙️ Setup\n\n### 1. Environment Configuration\n```bash\n# Set your node data path (adjust to your actual path)\nexport HOME_DIR=/root/.0gchaind/0g-home/0gchaind-home\nexport GENESIS_PATH=$HOME_DIR/config/genesis.json\nexport CHAIN_SPEC=devnet\n\n# 0G Testnet configuration\nexport RPC_URL=https://evmrpc-testnet.0g.ai\nexport STAKING_CONTRACT=0xea224dBB52F57752044c0C86aD50930091F561B9\n\n# Stake amounts (different for EVM and Cosmos operations)\nexport INITIAL_STAKE_EVM=32000000000000000000    # 32 OG in wei (for EVM/cast commands)\nexport INITIAL_STAKE_COSMOS=32000000000          # 32 OG in Cosmos format (for 0gchaind commands)\n\n# Make persistent (add to ~/.bashrc)\necho \"export RPC_URL=https://evmrpc-testnet.0g.ai\" >> ~/.bashrc\necho \"export STAKING_CONTRACT=0xea224dBB52F57752044c0C86aD50930091F561B9\" >> ~/.bashrc\necho \"export INITIAL_STAKE_EVM=32000000000000000000\" >> ~/.bashrc\necho \"export INITIAL_STAKE_COSMOS=32000000000\" >> ~/.bashrc\n```\n\n### 2. Verify Required Files\n```bash\n# Check if required files exist\nls -la $HOME_DIR/config/genesis.json || echo \"❌ genesis.json not found!\"\nls -la $HOME_DIR/config/priv_validator_key.json || echo \"❌ priv_validator_key.json not found!\"\n\n# Check if 0gchaind binary is accessible\nwhich 0gchaind || echo \"❌ 0gchaind not in PATH!\"\n```\n\n### 3. Generate Validator Keys\n```bash\n# Generate validator public key\necho \"=== Generating Validator Keys ===\"\n0gchaind deposit validator-keys \\\n  --home $HOME_DIR \\\n  --chaincfg.chain-spec=$CHAIN_SPEC\n\n# Output example:\n# Eth/Beacon Pubkey (Compressed 48-byte Hex):\n# 0xaa0f99735a6436d6b7ed763c2eaa8452d753c5152a4fb1e4dc0bd7e33bcfc8cd4fac0e2d6cbab941f423c17728fecc56\n```\n\n**⚠️ IMPORTANT:** Copy the 48-byte pubkey from the output:\n```bash\n# Replace with your actual pubkey\nexport PUBKEY=0xaa0f99735a6436d6b7ed763c2eaa8452d753c5152a4fb1e4dc0bd7e33bcfc8cd4fac0e2d6cbab941f423c17728fecc56\n```\n\n### 4. Compute Validator Contract Address\n```bash\n# Calculate validator contract address\necho \"=== Computing Validator Contract Address ===\"\nVALIDATOR_CONTRACT=$(cast call $STAKING_CONTRACT \\\n    \"computeValidatorAddress(bytes)(address)\" \\\n    $PUBKEY \\\n    --rpc-url $RPC_URL)\n\necho \"Validator Contract Address: $VALIDATOR_CONTRACT\"\nexport VALIDATOR_CONTRACT=$VALIDATOR_CONTRACT\n```\n\n### 5. Generate Signature\n```bash\n# Create validator signature (using Cosmos format)\necho \"=== Generating Validator Signature ===\"\n0gchaind deposit create-validator \\\n  $VALIDATOR_CONTRACT \\\n  $INITIAL_STAKE_COSMOS \\\n  $GENESIS_PATH \\\n  --home $HOME_DIR \\\n  --chaincfg.chain-spec=$CHAIN_SPEC\n\n# Output example:\n# ✅ Deposit message created successfully!\n# pubkey: 0xaa0f99735a6436d6b7ed763c2eaa8452d753c5152a4fb1e4dc0bd7e33bcfc8cd4fac0e2d6cbab941f423c17728fecc56\n# signature: 0x8d9f2e7a6b5c4d3e8f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e...\n```\n\n**⚠️ IMPORTANT:** Copy the signature from the output:\n```bash\n# Replace with your actual signature\nexport SIGNATURE=0x8d9f2e7a6b5c4d3e8f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e...\n```\n\n### 6. Prepare Wallet\n```bash\n# Set your private key (get from MetaMask)\n# ⚠️ SECURITY: Never share your private key!\nexport PRIVATE_KEY=0x1234567890abcdef...  # Replace with your actual private key\n\n# Check wallet balance (should have 32+ OG)\nexport YOUR_WALLET_ADDRESS=0x...  # Replace with your wallet address\ncast balance $YOUR_WALLET_ADDRESS --rpc-url $RPC_URL --ether\n```\n\n### 7. Register Validator\n```bash\n# Register validator with staking contract (using EVM format)\necho \"=== Registering Validator ===\"\ncast send $STAKING_CONTRACT \\\n  \"createAndInitializeValidatorIfNecessary((string,string,string,string,string),uint32,uint96,bytes,bytes)\" \\\n  \"('Your Validator Name','keybase-id','https://yourwebsite.com','security@youremail.com','Your validator description')\" \\\n  50000 \\\n  1 \\\n  $PUBKEY \\\n  $SIGNATURE \\\n  --value $INITIAL_STAKE_EVM \\\n  --gas-limit 1000000 \\\n  --gas-price 50000000000 \\\n  --private-key $PRIVATE_KEY \\\n  --rpc-url $RPC_URL\n\n# You will receive a transaction hash\n# Example: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n```\n\n#### Parameter Explanation:\n- `'Your Validator Name'`: Display name for your validator\n- `'keybase-id'`: Keybase identity (optional)\n- `'https://yourwebsite.com'`: Your website URL (optional)\n- `'security@youremail.com'`: Contact email\n- `'Your validator description'`: Brief description\n- `50000`: 5% commission rate (50000/1000000)\n- `1`: 1 gwei withdrawal fee\n\n---\n\n## 🔍 Verification\n\n### 1. Check Transaction Status\n```bash\n# Check transaction on explorer\necho \"Check your transaction at: https://chainscan-galileo.0g.ai\"\n\n# Verify transaction status (replace with your actual tx hash)\ncast tx 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef --rpc-url $RPC_URL\n```\n\n### 2. Verify Validator Registration\n```bash\n# Check if validator is registered\necho \"=== Validator Registration Check ===\"\n\n# Get validator contract address\ncast call $STAKING_CONTRACT \\\n    \"getValidator(bytes)(address)\" \\\n    $PUBKEY \\\n    --rpc-url $RPC_URL\n\n# Check validator balance (should show 32000000000000000000)\ncast call $VALIDATOR_CONTRACT \\\n    \"tokens()(uint256)\" \\\n    --rpc-url $RPC_URL\n\n# Check commission rate (should show 50000)\ncast call $VALIDATOR_CONTRACT \\\n    \"commissionRate()(uint32)\" \\\n    --rpc-url $RPC_URL\n\n# Check delegator shares\ncast call $VALIDATOR_CONTRACT \\\n    \"delegatorShares()(uint256)\" \\\n    --rpc-url $RPC_URL\n```\n\n### 3. Monitor Node Logs\n```bash\n# Monitor validator activation in node logs\ntail -f $HOME_DIR/../log/0gchaind.log | grep -i validator\n\n# Check consensus participation\ncurl -s http://localhost:26657/validators | jq '.result.validators[] | select(.pub_key.value != null)'\n```\n\n---\n\n## 🛠️ Management\n\n### Withdraw Commission\n```bash\n# Withdraw earned commission (only validator operator can do this)\ncast send $VALIDATOR_CONTRACT \\\n    \"withdrawCommission(address)\" \\\n    $YOUR_WALLET_ADDRESS \\\n    --gas-limit 1000000 \\\n    --gas-price 50000000000 \\\n    --private-key $PRIVATE_KEY \\\n    --rpc-url $RPC_URL\n```\n\n### Check Delegation Information\n```bash\n# View total delegator shares\ncast call $VALIDATOR_CONTRACT \\\n    \"delegatorShares()(uint256)\" \\\n    --rpc-url $RPC_URL\n\n# Check specific delegator's shares\ncast call $VALIDATOR_CONTRACT \\\n    \"getDelegation(address)(address,uint256)\" \\\n    $DELEGATOR_ADDRESS \\\n    --rpc-url $RPC_URL\n\n# Calculate estimated token value for shares\n# Formula: (shares * totalTokens) / totalShares\n```\n\n### Delegate Additional Tokens\n```bash\n# Add more stake to your validator\ncast send $VALIDATOR_CONTRACT \\\n    \"delegate(address)\" \\\n    $YOUR_WALLET_ADDRESS \\\n    --value 1000000000000000000 \\\n    --gas-limit 1000000 \\\n    --gas-price 50000000000 \\\n    --private-key $PRIVATE_KEY \\\n    --rpc-url $RPC_URL\n```\n\n### Undelegate (Advanced)\n```bash\n# Undelegate shares (requires withdrawal fee)\ncast send $VALIDATOR_CONTRACT \\\n    \"undelegate(address,uint256)\" \\\n    $WITHDRAWAL_ADDRESS \\\n    $SHARES_AMOUNT \\\n    --value 1000000000000000000 \\\n    --private-key $PRIVATE_KEY \\\n    --rpc-url $RPC_URL\n```\n\n### Network Statistics\n```bash\n# Total validator count\ncast call $STAKING_CONTRACT \\\n    \"validatorCount()(uint32)\" \\\n    --rpc-url $RPC_URL\n\n# Maximum validator count\ncast call $STAKING_CONTRACT \\\n    \"maxValidatorCount()(uint32)\" \\\n    --rpc-url $RPC_URL\n\n# Current gas price\ncast gas-price --rpc-url $RPC_URL\n```\n\n---\n\n## ⚠️ Troubleshooting\n\n### Common Errors\n\n#### 1. \"insufficient funds\"\n```bash\n# Check wallet balance\ncast balance $YOUR_WALLET_ADDRESS --rpc-url $RPC_URL --ether\n# Need at least 32.1 OG (extra for gas)\n\n# Get test tokens from faucet\necho \"Get tokens from: https://faucet.0g.ai\"\n```\n\n#### 2. \"DelegationBelowMinimum\"\n```bash\n# Check stake amount for EVM operations\necho $INITIAL_STAKE_EVM\n# Must be exactly 32000000000000000000 (32 OG in wei)\n\n# Check stake amount for Cosmos operations\necho $INITIAL_STAKE_COSMOS\n# Must be exactly 32000000000 (32 OG in Cosmos format)\n```\n\n#### 3. \"signature mismatch\"\n```bash\n# Regenerate signature (using Cosmos format)\n0gchaind deposit create-validator \\\n  $VALIDATOR_CONTRACT \\\n  $INITIAL_STAKE_COSMOS \\\n  $GENESIS_PATH \\\n  --home $HOME_DIR \\\n  --chaincfg.chain-spec=$CHAIN_SPEC\n```\n\n#### 4. \"command not found: 0gchaind\"\n```bash\n# Check if 0gchaind is in PATH\nwhich 0gchaind\n\n# Add to PATH if needed\nexport PATH=$PATH:/path/to/0gchaind/bin\necho 'export PATH=$PATH:/path/to/0gchaind/bin' >> ~/.bashrc\n```\n\n#### 5. \"invalid opcode\"\n```bash\n# Check if using correct EVM version\n# Ensure contracts are compiled with --evm-version cancun\n```\n\n### Debug Commands\n```bash\n# Check node sync status\ncurl -s http://localhost:26657/status | jq .result.sync_info\n\n# Check network connection\ncurl -s https://evmrpc-testnet.0g.ai >/dev/null && echo \"✅ RPC accessible\" || echo \"❌ Connection issue\"\n\n# View latest block\ncast block latest --rpc-url $RPC_URL\n\n# Check transaction pool\ncast tx-pool --rpc-url $RPC_URL\n```\n\n### Health Check Script\n```bash\n#!/bin/bash\necho \"=== 0G Validator Health Check ===\"\n\necho \"1. Node sync status:\"\ncurl -s http://localhost:26657/status | jq -r .result.sync_info.catching_up\n\necho \"2. Validator contract address:\"\ncast call $STAKING_CONTRACT \"getValidator(bytes)(address)\" $PUBKEY --rpc-url $RPC_URL\n\necho \"3. Validator balance:\"\ncast call $VALIDATOR_CONTRACT \"tokens()(uint256)\" --rpc-url $RPC_URL\n\necho \"4. Commission rate:\"\ncast call $VALIDATOR_CONTRACT \"commissionRate()(uint32)\" --rpc-url $RPC_URL\n\necho \"5. Total network validators:\"\ncast call $STAKING_CONTRACT \"validatorCount()(uint32)\" --rpc-url $RPC_URL\n\necho \"6. Wallet balance:\"\ncast balance $YOUR_WALLET_ADDRESS --rpc-url $RPC_URL --ether\n\necho \"7. Stake amounts:\"\necho \"   EVM format: $INITIAL_STAKE_EVM\"\necho \"   Cosmos format: $INITIAL_STAKE_COSMOS\"\n\necho \"=== Health check complete ===\"\n```\n\n---\n\n## ✅ Success Criteria\n\nYour validator setup is successful if:\n\n- ✅ **Transaction confirmed** - Shows SUCCESS status on explorer\n- ✅ **getValidator()** returns your validator contract address\n- ✅ **tokens()** returns 32000000000000000000 (32 OG in wei)\n- ✅ **Node logs** show validator activation messages\n- ✅ **Consensus participation** - Validator appears in validator set\n\n---\n\n## 📚 Resources\n\n### Official Links\n- **Documentation**: https://docs.0g.ai\n- **GitHub**: https://github.com/0glabs\n- **Block Explorer**: https://chainscan-galileo.0g.ai\n- **Faucet**: https://faucet.0g.ai\n\n### Contract Addresses\n- **Staking Contract**: `0xea224dBB52F57752044c0C86aD50930091F561B9`\n\n### RPC Endpoints\n- **Primary**: https://evmrpc-testnet.0g.ai\n- **QuickNode**: Custom endpoint available\n- **ThirdWeb**: Custom endpoint available\n\n### Support\n- **Discord**: [0G Labs Community](https://discord.gg/0glabs)\n- **Telegram**: Official 0G Channel\n- **GitHub Issues**: For technical problems\n\n---\n\n## 📄 License\n\nThis guide is released under the MIT License. See [LICENSE](LICENSE) for details.\n\n---\n\n<div align=\"center\">\n\n**🎉 Congratulations! You are now running a 0G Chain validator! 🎉**\n\n*If you found this guide helpful, please ⭐ star this repository!*\n\n</div>"
        }
      ]
    },
    {
      "id": "section-1755383536199",
      "title": "0G Chain Upgrade",
      "icon": "☄️",
      "type": "section",
      "children": [
        {
          "id": "page-1755383547424",
          "title": "0gchain v2.0.3 Update",
          "icon": "⚡",
          "type": "page",
          "content": "# 0gchain v2.0.3 Update\n\n```javascript\nCURRENT_PATH=$(which 0gchaind)\nsystemctl stop 0gchaind geth\nwget https://github.com/0glabs/0gchain-NG/releases/download/v2.0.3/galileo-v2.0.3.tar.gz\ntar -xzf galileo-v2.0.3.tar.gz\ncp galileo-v2.0.3/bin/0gchaind $CURRENT_PATH\nchmod +x $CURRENT_PATH\nsystemctl start geth\nsleep 5\nsystemctl start 0gchaind\njournalctl -u 0gchaind -f\n\n```"
        }
      ]
    }
  ],
  "projectInfo": {
    "name": "0g Galileo Testnet",
    "logo": "https://raw.githubusercontent.com/coinsspor/coinsspor/refs/heads/main/0glogo.jpg",
    "banner": "https://raw.githubusercontent.com/coinsspor/coinsspor/refs/heads/main/0gbabbmer.jpg",
    "description": "0g Galileo Testnet",
    "theme": {
      "primary": "#10b981",
      "secondary": "#8b5cf6"
    }
  },
  "lastUpdated": "2025-08-17T10:13:41.800Z",
  "projectId": "0G-Chain-testnet",
  "version": "1.0.0"
}