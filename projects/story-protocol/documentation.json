{
  "documentation": [
    {
      "id": "overview",
      "title": "Overview",
      "icon": "🌌",
      "type": "section",
      "children": [
        {
          "id": "introduction",
          "title": "Introduction",
          "icon": "📖",
          "type": "page",
          "content": "# 🌌 Story Protocol Aeneid Testnet Complete Node Setup Guide\n\n> **The Ultimate Guide to Setting Up Your Story Protocol Aeneid Testnet Node with Cosmovisor**\n\nWelcome to the most comprehensive guide for setting up a Story Protocol Aeneid Testnet node! This guide covers everything from installation to validator setup, monitoring, and maintenance.\n\n## 📋 What You'll Learn\n\n- Complete node installation from scratch\n- Cosmovisor setup for automatic upgrades\n- Validator creation and management\n- Performance monitoring and optimization\n- Troubleshooting common issues\n- Advanced maintenance procedures\n\n## 🎯 Prerequisites\n\n- Ubuntu 22.04 LTS server\n- Basic Linux command line knowledge\n- Access to server with sudo privileges\n- Minimum 16GB RAM and 500GB SSD\n\n## 🚀 Let's Get Started!\n\nFollow this guide step by step to set up your Story Protocol validator node and participate in the Aeneid testnet."
        },
        {
          "id": "endpoints-resources",
          "title": "Endpoints & Resources",
          "icon": "📡",
          "type": "page",
          "content": "# 📡 Endpoints & Resources\n\n## 🌟 Coinsspor Endpoints\n\n| Service | Endpoint | Type |\n|---------|----------|------|\n| 🔹 **Cosmos RPC** | [https://story-aeneid-testnet-rpc.coinsspor.com](https://story-aeneid-testnet-rpc.coinsspor.com) | REST API |\n| 🔹 **Cosmos WebSocket** | [wss://story-aeneid-testnet-rpc.coinsspor.com/websocket](wss://story-aeneid-testnet-rpc.coinsspor.com/websocket) | WebSocket |\n| 🔹 **Cosmos REST API** | [https://story-aeneid-testnet-api.coinsspor.com](https://story-aeneid-testnet-api.coinsspor.com) | REST API |\n| 🟣 **EVM RPC** | [https://story-aeneid-testnet-evm.coinsspor.com](https://story-aeneid-testnet-evm.coinsspor.com) | JSON-RPC |\n| 🟣 **EVM WebSocket** | [wss://story-aeneid-testnet-evm.coinsspor.com](wss://story-aeneid-testnet-evm.coinsspor.com) | WebSocket |\n\n## 🌐 Official Resources\n\n| Resource | Link | Description |\n|----------|------|-------------|\n| **Chain ID** | `1315` | Aeneid Testnet Chain ID |\n| **Official RPC** | [https://aeneid.storyrpc.io](https://aeneid.storyrpc.io) | Official RPC Endpoint |\n| **Explorer** | [https://aeneid.storyscan.io](https://aeneid.storyscan.io) | Block Explorer |\n| **IP Explorer** | [https://aeneid.explorer.story.foundation](https://aeneid.explorer.story.foundation) | IP Explorer |\n| **Faucet** | [https://faucet.story.foundation](https://faucet.story.foundation) | Testnet Faucet |\n\n## 🛠️ Development Resources\n\n| Resource | Link | Description |\n|----------|------|-------------|\n| **Story Geth Releases** | [GitHub](https://github.com/piplabs/story-geth/releases) | Latest Releases |\n| **Story Releases** | [GitHub](https://github.com/piplabs/story/releases) | Latest Releases |\n| **Documentation** | [Docs](https://docs.story.foundation) | Official Docs |\n| **GitHub** | [PipLabs](https://github.com/piplabs) | Source Code |"
        },
        {
          "id": "competition",
          "title": "Competition Resources",
          "icon": "🏅",
          "type": "page",
          "content": "# 🏅 Competition Resources\n\n## 🏆 Story Protocol Validator Competition\n\n| Resource | Link | Description |\n|----------|------|-------------|\n| **📊 Round 1 Results** | [storytable.coinsspor.com](https://storytable.coinsspor.com) | Complete Round 1 Stats |\n| **📊 Round 2 Tracking** | [storytable.coinsspor.com/round2](https://storytable.coinsspor.com/round2) | Current Round Stats |\n\n## 📅 Competition Details\n\n- **Competition Period:** June 30, 2025 - July 28, 2025\n- **🎯 Active Validators:** 80+\n- **📈 Average Uptime:** 99.9%\n- **🏆 Prize Pool:** TBA\n\n## 🎖️ Performance Metrics\n\n### Key Metrics Tracked\n- **Uptime Percentage**\n- **Block Production Rate**\n- **Missed Blocks Count**\n- **Response Time**\n- **Network Participation**\n\n### Scoring System\n- Uptime: 40% weight\n- Block Production: 30% weight\n- Network Participation: 20% weight\n- Community Contribution: 10% weight\n\n## 📊 How to Track Your Performance\n\n1. Visit the tracking dashboard\n2. Search for your validator moniker\n3. Monitor your metrics daily\n4. Optimize based on performance data"
        }
      ]
    },
    {
      "id": "requirements",
      "title": "System Requirements",
      "icon": "🖥️",
      "type": "section",
      "children": [
        {
          "id": "hardware-requirements",
          "title": "Hardware Requirements",
          "icon": "⚙️",
          "type": "page",
          "content": "# 🖥️ System Requirements\n\n## Minimum Hardware Requirements\n\n| Component | Minimum | Recommended |\n|-----------|---------|-------------|\n| **CPU** | 4 cores | 8 cores |\n| **RAM** | 16 GB | 32 GB |\n| **Storage** | 500 GB NVMe SSD | 1 TB NVMe SSD |\n| **OS** | Ubuntu 22.04 LTS | Ubuntu 22.04 LTS |\n| **Network** | 100 Mbps | 1 Gbps |\n\n## 📊 Why These Requirements?\n\n### CPU\n- **Minimum 4 cores:** Required for parallel processing of transactions\n- **8 cores recommended:** Better performance during high network activity\n\n### RAM\n- **16 GB minimum:** Needed for both Story and Geth processes\n- **32 GB recommended:** Ensures smooth operation and caching\n\n### Storage\n- **NVMe SSD required:** For fast I/O operations\n- **500 GB minimum:** Current chain size + growth buffer\n- **1 TB recommended:** Future-proof for chain growth\n\n### Network\n- **100 Mbps minimum:** For syncing and peer connections\n- **1 Gbps recommended:** For optimal block propagation\n\n## 🔍 How to Check Your System\n\n```bash\n# Check CPU cores\nnproc\n\n# Check RAM\nfree -h\n\n# Check storage\ndf -h\n\n# Check network speed\nspeedtest-cli\n```"
        },
        {
          "id": "port-configuration",
          "title": "Port Configuration",
          "icon": "🔌",
          "type": "page",
          "content": "# 🔌 Port Configuration\n\n## Dynamic Port System\n\nStory Protocol uses a dynamic port configuration system based on a prefix you choose. This prevents conflicts when running multiple nodes on the same network.\n\n## Port Formula\n\n| Service | Port Formula | Example (prefix=26) | Example (prefix=56) |\n|---------|--------------|---------------------|---------------------|\n| Story P2P | `${STORY_PORT}656` | 26656 | 56656 |\n| Story RPC | `${STORY_PORT}657` | 26657 | 56657 |\n| Story API | `${STORY_PORT}317` | 26317 | 56317 |\n| Story Prometheus | `${STORY_PORT}660` | 26660 | 56660 |\n| Story-Geth P2P | `${STORY_PORT}303` | 26303 | 56303 |\n| Story-Geth RPC | `${STORY_PORT}545` | 26545 | 56545 |\n| Story-Geth WS | `${STORY_PORT}546` | 26546 | 56546 |\n| Story-Geth Auth | `${STORY_PORT}551` | 26551 | 56551 |\n| Story-Geth Metrics | `${STORY_PORT}060` | 26060 | 56060 |\n\n## 🔧 Choosing Your Port Prefix\n\n### Common Prefixes\n- **26**: Default (most common)\n- **16**: Alternative 1\n- **36**: Alternative 2\n- **46**: Alternative 3\n- **56**: Alternative 4\n\n### How to Choose\n1. Check for existing services on your server\n2. Avoid conflicts with other nodes\n3. Pick an unused prefix\n4. Set it in your environment variables\n\n## 🔓 Firewall Configuration\n\n```bash\n# Example for prefix 26\nsudo ufw allow 26656/tcp  # P2P\nsudo ufw allow 26657/tcp  # RPC\nsudo ufw allow 26317/tcp  # API\nsudo ufw allow 26303/tcp  # Geth P2P\nsudo ufw allow 26545/tcp  # Geth RPC\nsudo ufw allow 26546/tcp  # Geth WS\n```"
        }
      ]
    },
    {
      "id": "installation",
      "title": "Installation",
      "icon": "🚀",
      "type": "section",
      "children": [
        {
          "id": "system-preparation",
          "title": "System Preparation",
          "icon": "🔧",
          "type": "page",
          "content": "# 🚀 Installation - System Preparation\n\n## Step 1: Update System Packages\n\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n```\n\n## Step 2: Install Dependencies\n\n```bash\n# Install required dependencies\nsudo apt install -y curl git wget htop tmux build-essential jq make lz4 gcc unzip aria2\n```\n\n## 📦 Package Descriptions\n\n- **curl**: For downloading files from URLs\n- **git**: Version control for cloning repositories\n- **wget**: Alternative download tool\n- **htop**: System monitoring tool\n- **tmux**: Terminal multiplexer for persistent sessions\n- **build-essential**: Compilation tools (gcc, make, etc.)\n- **jq**: JSON processor for parsing API responses\n- **make**: Build automation tool\n- **lz4**: Fast compression library\n- **gcc**: GNU Compiler Collection\n- **unzip**: Archive extraction tool\n- **aria2**: Multi-connection download accelerator\n\n## ✅ Verify Installation\n\n```bash\n# Check if all tools are installed\nfor tool in curl git wget htop tmux jq make lz4 gcc unzip aria2; do\n    if command -v $tool &> /dev/null; then\n        echo \"✅ $tool is installed\"\n    else\n        echo \"❌ $tool is NOT installed\"\n    fi\ndone\n```"
        },
        {
          "id": "install-go",
          "title": "Install Go 1.22.11",
          "icon": "🐹",
          "type": "page",
          "content": "# 🐹 Install Go 1.22.11\n\n## Download and Install Go\n\n```bash\ncd $HOME\nVER=\"1.22.11\"\nwget \"https://golang.org/dl/go$VER.linux-amd64.tar.gz\"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf \"go$VER.linux-amd64.tar.gz\"\nrm \"go$VER.linux-amd64.tar.gz\"\n```\n\n## Configure Environment\n\n```bash\n# Add Go to PATH\necho \"export PATH=$PATH:/usr/local/go/bin:~/go/bin\" >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n## Verify Installation\n\n```bash\n# Check Go version\ngo version\n```\n\nExpected output:\n```\ngo version go1.22.11 linux/amd64\n```\n\n## 🔍 Troubleshooting\n\n### If `go version` doesn't work:\n\n1. **Check if Go is installed:**\n```bash\nls -la /usr/local/go/\n```\n\n2. **Manually add to current session:**\n```bash\nexport PATH=$PATH:/usr/local/go/bin:~/go/bin\n```\n\n3. **Check PATH variable:**\n```bash\necho $PATH\n```\n\n## 📝 Why Go 1.22.11?\n\n- Required version for Story Protocol\n- Latest stable version in 1.22.x series\n- Compatible with all Story dependencies\n- Includes performance improvements"
        },

{
          "id": "set-variables",
          "title": "Set Variables",
          "icon": "⚙️",
          "type": "page",
          "content": "# ⚙️ Set Variables and Port Configuration\n\n## Set Your Moniker (Node Name)\n\n```bash\n# Replace YourNodeName with your desired name\necho \"export STORY_MONIKER=\\\"YourNodeName\\\"\" >> $HOME/.bash_profile\n```\n\n### Moniker Guidelines:\n- Use alphanumeric characters\n- Can include hyphens and underscores\n- Avoid special characters\n- Keep it unique and memorable\n- Example: `MyValidator-01`\n\n## Set Port Prefix\n\n```bash\n# Set port prefix (change to your desired prefix)\necho \"export STORY_PORT=\\\"26\\\"\" >> $HOME/.bash_profile\n```\n\n### Available Prefixes:\n- `26` - Default (recommended)\n- `16` - Alternative 1\n- `36` - Alternative 2\n- `46` - Alternative 3\n- `56` - Alternative 4\n\n## Apply Variables\n\n```bash\n# Load the variables\nsource $HOME/.bash_profile\n```\n\n## Verify Variables\n\n```bash\n# Check if variables are set correctly\necho \"Moniker: $STORY_MONIKER\"\necho \"Port Prefix: $STORY_PORT\"\n```\n\n## 📝 Complete Example\n\n```bash\n# Example setup\necho \"export STORY_MONIKER=\\\"SuperValidator\\\"\" >> $HOME/.bash_profile\necho \"export STORY_PORT=\\\"26\\\"\" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n\n# Verify\necho \"✅ Moniker: $STORY_MONIKER\"\necho \"✅ Port Prefix: $STORY_PORT\"\necho \"📡 RPC will be on port: ${STORY_PORT}657\"\necho \"🔗 P2P will be on port: ${STORY_PORT}656\"\n```"
        },
        {
          "id": "install-story-geth",
          "title": "Install Story-Geth",
          "icon": "⚡",
          "type": "page",
          "content": "# ⚡ Install Story-Geth (Execution Client)\n\n## Clone and Build Story-Geth\n\n```bash\ncd $HOME\nrm -rf story-geth\ngit clone https://github.com/piplabs/story-geth.git\ncd story-geth\ngit checkout v1.1.1\ngo build -v ./cmd/geth\nmv ./geth $HOME/go/bin/story-geth\n```\n\n## Verify Installation\n\n```bash\n# Check story-geth version\nstory-geth version\n```\n\nExpected output should show:\n```\nGeth Version: 1.1.1-stable\n```\n\n## 📊 What is Story-Geth?\n\nStory-Geth is the execution layer client for Story Protocol:\n\n- **Based on:** Go-Ethereum (Geth)\n- **Purpose:** Handles EVM transactions\n- **Features:** \n  - EVM compatibility\n  - Smart contract execution\n  - Transaction processing\n  - State management\n\n## 🔧 Build Troubleshooting\n\n### If build fails:\n\n1. **Check Go version:**\n```bash\ngo version\n```\n\n2. **Clear Go module cache:**\n```bash\ngo clean -modcache\n```\n\n3. **Try building with verbose output:**\n```bash\ngo build -v -x ./cmd/geth\n```\n\n4. **Check for missing dependencies:**\n```bash\ngo mod download\n```"
        },
        {
          "id": "install-story",
          "title": "Install Story",
          "icon": "📚",
          "type": "page",
          "content": "# 📚 Install Story (Consensus Client)\n\n## Clone and Build Story\n\n```bash\ncd $HOME\nrm -rf story\ngit clone https://github.com/piplabs/story\ncd story\ngit checkout v1.3.0\ngo build -o story ./client \nmv ./story $HOME/go/bin/story\n```\n\n## Verify Installation\n\n```bash\n# Check story version\nstory version\n```\n\nExpected output:\n```\nVersion: v1.3.0\n```\n\n## 📊 What is Story?\n\nStory is the consensus layer client:\n\n- **Based on:** CometBFT (Tendermint)\n- **Purpose:** Consensus and block production\n- **Features:**\n  - Byzantine fault tolerance\n  - Proof of Stake consensus\n  - Validator management\n  - Governance\n\n## Initialize Node\n\n```bash\n# Initialize the node\nstory init --moniker $STORY_MONIKER --network aeneid\n```\n\n## Create Required Directories\n\n```bash\n# Create necessary directories\nmkdir -p $HOME/.story/story\nmkdir -p $HOME/.story/geth\n```\n\n## ✅ Verify Initialization\n\n```bash\n# Check if initialization was successful\nls -la $HOME/.story/\nls -la $HOME/.story/story/config/\n```\n\nYou should see:\n- `config/` directory with configuration files\n- `data/` directory for blockchain data\n- `keyring-test/` directory for keys"
        }
      ]
    },
    {
      "id": "cosmovisor",
      "title": "Cosmovisor Setup",
      "icon": "🔄",
      "type": "section",
      "children": [
        {
          "id": "install-cosmovisor",
          "title": "Install Cosmovisor",
          "icon": "📦",
          "type": "page",
          "content": "# 🔄 Cosmovisor Setup\n\n## What is Cosmovisor?\n\nCosmovisor is a process manager for Cosmos SDK applications that:\n- Automates binary upgrades\n- Manages different versions\n- Handles upgrade proposals\n- Ensures zero-downtime upgrades\n\n## Install Cosmovisor\n\n```bash\n# Install Cosmovisor v1.6.0\ngo install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@v1.6.0\n```\n\n## Verify Installation\n\n```bash\n# Check cosmovisor version\ncosmovisor version\n```\n\nExpected output:\n```\ncosmovisor version: v1.6.0\n```\n\n## 🔍 Why Use Cosmovisor?\n\n### Benefits:\n1. **Automatic Upgrades**: No manual intervention needed\n2. **Version Management**: Easy rollback if needed\n3. **Backup Creation**: Automatic state backups\n4. **Downtime Reduction**: Minimal service interruption\n5. **Error Handling**: Automatic recovery mechanisms\n\n### How It Works:\n1. Monitors for upgrade governance proposals\n2. Downloads new binary at specified block height\n3. Stops current version\n4. Backs up data\n5. Starts new version\n6. Verifies successful upgrade"
        },
        {
          "id": "configure-cosmovisor",
          "title": "Configure Cosmovisor",
          "icon": "⚙️",
          "type": "page",
          "content": "# ⚙️ Configure Cosmovisor Environment\n\n## Set Environment Variables\n\n```bash\n# Set Cosmovisor environment variables\necho \"export DAEMON_NAME=story\" >> $HOME/.bash_profile\necho \"export DAEMON_HOME=$HOME/.story/story\" >> $HOME/.bash_profile\necho \"export DAEMON_DATA_BACKUP_DIR=$DAEMON_HOME/cosmovisor/backup\" >> $HOME/.bash_profile\necho \"export DAEMON_ALLOW_DOWNLOAD_BINARIES=false\" >> $HOME/.bash_profile\necho \"export DAEMON_RESTART_AFTER_UPGRADE=true\" >> $HOME/.bash_profile\n\nsource $HOME/.bash_profile\n```\n\n## Environment Variables Explained\n\n| Variable | Value | Description |\n|----------|-------|-------------|\n| `DAEMON_NAME` | story | Name of the binary |\n| `DAEMON_HOME` | $HOME/.story/story | Node home directory |\n| `DAEMON_DATA_BACKUP_DIR` | .../cosmovisor/backup | Backup location |\n| `DAEMON_ALLOW_DOWNLOAD_BINARIES` | false | Security: manual binary management |\n| `DAEMON_RESTART_AFTER_UPGRADE` | true | Auto-restart after upgrade |\n\n## Initialize Cosmovisor\n\n```bash\n# Initialize cosmovisor with story binary\ncosmovisor init $(which story)\n```\n\n## Create Backup Directory\n\n```bash\n# Create backup directory\nmkdir -p $DAEMON_HOME/cosmovisor/backup\n```\n\n## Set Permissions\n\n```bash\n# Set proper permissions\nsudo chown -R $USER:$USER $HOME/.story\n```\n\n## ✅ Verify Setup\n\n```bash\n# Check cosmovisor structure\nls -la $DAEMON_HOME/cosmovisor/\n```\n\nYou should see:\n- `current/` - symlink to active version\n- `genesis/` - initial binary\n- `backup/` - backup directory\n- `upgrades/` - future upgrade binaries"
        }
      ]
    },
    {
      "id": "configuration",
      "title": "Configuration",
      "icon": "⚙️",
      "type": "section",
      "children": [
        {
          "id": "configure-ports",
          "title": "Configure Ports",
          "icon": "🔌",
          "type": "page",
          "content": "# ⚙️ Configure Ports\n\n## Configure Story Ports\n\n```bash\n# Configure Story ports using your prefix\nsed -i.bak -e \"s%:1317%:${STORY_PORT}317%g;\ns%:8551%:${STORY_PORT}551%g\" $HOME/.story/story/config/story.toml\n\nsed -i.bak -e \"s%:26658%:${STORY_PORT}658%g;\ns%:26657%:${STORY_PORT}657%g;\ns%:26656%:${STORY_PORT}656%g;\ns%^external_address = \\\"\\\"%external_address = \\\"$(wget -qO- eth0.me):${STORY_PORT}656\\\"%;\ns%:26660%:${STORY_PORT}660%g\" $HOME/.story/story/config/config.toml\n```\n\n## Verify Port Configuration\n\n```bash\necho \"✅ Configured ports with prefix: $STORY_PORT\"\necho \"🌐 RPC Port: ${STORY_PORT}657\"\necho \"🔗 P2P Port: ${STORY_PORT}656\"\necho \"📡 API Port: ${STORY_PORT}317\"\necho \"🔧 Geth Auth Port: ${STORY_PORT}551\"\necho \"📊 Prometheus Port: ${STORY_PORT}660\"\n```\n\n## Port Usage Summary\n\n| Service | Port | Usage |\n|---------|------|-------|\n| RPC | ${STORY_PORT}657 | API calls and queries |\n| P2P | ${STORY_PORT}656 | Peer connections |\n| API | ${STORY_PORT}317 | REST API |\n| Auth | ${STORY_PORT}551 | Geth authentication |\n| Metrics | ${STORY_PORT}660 | Prometheus metrics |"
        },
        {
          "id": "configure-peers",
          "title": "Configure Peers",
          "icon": "🌐",
          "type": "page",
          "content": "# 🌐 Configure Seeds and Peers\n\n## Set Seeds and Persistent Peers\n\n```bash\nSEEDS=\"944e8889ecd7c13623ef1081aae4555d6f525041@b1-b.odyssey-devnet.storyrpc.io:26656\"\nPEERS=\"3b1aaa03f996d619cb2f4230ebace45686ab3b8a@34.140.167.127:26656,36ca8b119bf5851cd1e37060af914cb07dec24f9@34.79.40.193:26656,2a28bd1a6ecb0a1d8ceade599b311d202447d635@193.122.141.78:26656\"\n\nsed -i -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*seeds *=.*/seeds = \\\"$SEEDS\\\"/}\" \\\n       -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*persistent_peers *=.*/persistent_peers = \\\"$PEERS\\\"/}\" $HOME/.story/story/config/config.toml\n```\n\n## 🍀 Fresh Peers Discovery (Recommended)\n\n```bash\n# Get fresh peers from Coinsspor RPC\nURL=\"https://story-aeneid-testnet-rpc.coinsspor.com/net_info\"\n\necho \"🔍 Discovering fresh peers from Coinsspor RPC...\"\nresponse=$(curl -s $URL)\n\n# Extract active peers with valid IP addresses\nPEERS=$(echo $response | jq -r '.result.peers[] | select(.remote_ip | test(\"^[0-9]{1,3}(\\\\.[0-9]{1,3}){3}$\")) | \"\\(.node_info.id)@\\(.remote_ip):\" + (.node_info.listen_addr | capture(\":(?<port>[0-9]+)$\").port)' | paste -sd \",\" -)\n\nif [ -n \"$PEERS\" ]; then\n    echo \"✅ Found fresh peers: $PEERS\"\n    echo \"🔧 Updating config.toml with fresh peers...\"\n    \n    # Update persistent_peers in config.toml\n    sed -i 's|^persistent_peers *=.*|persistent_peers = \"'$PEERS'\"|' $HOME/.story/story/config/config.toml\n    \n    echo \"✅ Fresh peers configured successfully!\"\nelse\n    echo \"⚠️  No fresh peers found, using default peers\"\nfi\n```"
        },
{
          "id": "configure-settings",
          "title": "Configure Settings",
          "icon": "🔧",
          "type": "page",
          "content": "# 🔧 Configure Indexer and Prometheus\n\n## Enable Prometheus Metrics\n\n```bash\n# Enable Prometheus for monitoring\nsed -i -e \"s/prometheus = false/prometheus = true/\" $HOME/.story/story/config/config.toml\n```\n\n## Disable Indexer for Better Performance\n\n```bash\n# Disable indexer to save resources\nsed -i -e \"s/^indexer *=.*/indexer = \\\"null\\\"/\" $HOME/.story/story/config/config.toml\n```\n\n## Why These Settings?\n\n### Prometheus Enabled\n- Monitor node performance\n- Track validator metrics\n- Set up alerts\n- Visualize with Grafana\n\n### Indexer Disabled\n- Saves disk space\n- Reduces CPU usage\n- Faster sync\n- Not needed for validators\n\n## Additional Optimizations\n\n```bash\n# Set minimum gas price\nsed -i -e \"s/^minimum-gas-prices *=.*/minimum-gas-prices = \\\"0.001uip\\\"/\" $HOME/.story/story/config/app.toml\n\n# Enable API\nsed -i -e \"s/^enable *=.*/enable = true/\" $HOME/.story/story/config/app.toml\n```"
        },
        {
          "id": "download-genesis",
          "title": "Download Genesis & Addrbook",
          "icon": "📥",
          "type": "page",
          "content": "# 📥 Download Genesis and Addrbook\n\n## Download Genesis File\n\n```bash\n# Download genesis file from Coinsspor GitHub\nwget -O $HOME/.story/story/config/genesis.json https://raw.githubusercontent.com/coinsspor/Story-Aeneid/refs/heads/main/genesis.json\n```\n\n## Download Addrbook\n\n```bash\n# Download addrbook for faster peer discovery\nwget -O $HOME/.story/story/config/addrbook.json https://raw.githubusercontent.com/coinsspor/Story-Aeneid/refs/heads/main/addrbook.json\n```\n\n## Verify Downloads\n\n```bash\n# Verify files are downloaded correctly\necho \"✅ Verifying downloaded files...\"\n\nif [ -f \"$HOME/.story/story/config/genesis.json\" ]; then\n    genesis_size=$(stat -c%s \"$HOME/.story/story/config/genesis.json\")\n    echo \"✅ Genesis file downloaded successfully (Size: $genesis_size bytes)\"\nelse\n    echo \"❌ Genesis download failed\"\n    exit 1\nfi\n\nif [ -f \"$HOME/.story/story/config/addrbook.json\" ]; then\n    addrbook_size=$(stat -c%s \"$HOME/.story/story/config/addrbook.json\")\n    echo \"✅ Addrbook downloaded successfully (Size: $addrbook_size bytes)\"\nelse\n    echo \"⚠️  Addrbook download failed - node will discover peers automatically\"\nfi\n```\n\n## Set Permissions\n\n```bash\n# Set proper permissions\nchmod 644 $HOME/.story/story/config/genesis.json\nchmod 644 $HOME/.story/story/config/addrbook.json\n\necho \"✅ Genesis and addrbook setup completed\"\n```\n\n## What Are These Files?\n\n### Genesis.json\n- Initial chain state\n- Chain parameters\n- Validator set\n- Required for node start\n\n### Addrbook.json\n- Known peer addresses\n- Speeds up peer discovery\n- Optional but recommended\n- Auto-updated during runtime"
        }
      ]
    },
    {
      "id": "services",
      "title": "System Services",
      "icon": "🔧",
      "type": "section",
      "children": [
        {
          "id": "geth-service",
          "title": "Story-Geth Service",
          "icon": "⚡",
          "type": "page",
          "content": "# ⚡ Create Story-Geth Service\n\n## Create Service File\n\n```bash\nsudo tee /etc/systemd/system/story-geth.service > /dev/null <<EOF\n[Unit]\nDescription=Story Geth Client\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$HOME/go/bin/story-geth --aeneid --syncmode full --port ${STORY_PORT}303 --http --http.api eth,net,web3,engine --http.vhosts '*' --http.addr 0.0.0.0 --http.port ${STORY_PORT}545 --authrpc.addr 127.0.0.1 --authrpc.port ${STORY_PORT}551 --authrpc.vhosts=* --ws --ws.api eth,web3,net,txpool --ws.addr 0.0.0.0 --ws.port ${STORY_PORT}546 --ws.origins '*' --metrics --metrics.addr 0.0.0.0 --metrics.port ${STORY_PORT}060\nRestart=on-failure\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n## Service Parameters Explained\n\n| Parameter | Value | Description |\n|-----------|-------|-------------|\n| `--aeneid` | - | Aeneid testnet flag |\n| `--syncmode` | full | Sync mode (full/snap) |\n| `--port` | ${STORY_PORT}303 | P2P port |\n| `--http` | - | Enable HTTP RPC |\n| `--http.port` | ${STORY_PORT}545 | HTTP RPC port |\n| `--authrpc.port` | ${STORY_PORT}551 | Auth RPC port |\n| `--ws` | - | Enable WebSocket |\n| `--ws.port` | ${STORY_PORT}546 | WebSocket port |\n| `--metrics` | - | Enable metrics |\n| `--metrics.port` | ${STORY_PORT}060 | Metrics port |"
        },
        {
          "id": "story-service",
          "title": "Story Service",
          "icon": "📚",
          "type": "page",
          "content": "# 📚 Create Story Service with Cosmovisor\n\n## Create Service File\n\n```bash\nsudo tee /etc/systemd/system/story.service > /dev/null <<EOF\n[Unit]\nDescription=Story Cosmovisor\nAfter=network.target\n\n[Service]\nType=simple\nUser=$USER\nExecStart=$HOME/go/bin/cosmovisor run run --api-enable --api-address=0.0.0.0:${STORY_PORT}317\nRestart=on-failure\nRestartSec=5\nLimitNOFILE=65535\nEnvironment=\"DAEMON_NAME=story\"\nEnvironment=\"DAEMON_HOME=$HOME/.story/story\"\nEnvironment=\"DAEMON_ALLOW_DOWNLOAD_BINARIES=false\"\nEnvironment=\"DAEMON_RESTART_AFTER_UPGRADE=true\"\nEnvironment=\"DAEMON_DATA_BACKUP_DIR=$HOME/.story/story/cosmovisor/backup\"\nWorkingDirectory=$HOME/.story/story\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n## Service Configuration\n\n### Key Features:\n- **Cosmovisor Integration**: Automatic upgrades\n- **API Enabled**: REST API access\n- **Auto-restart**: On failure recovery\n- **Environment Variables**: Cosmovisor settings\n- **High File Limits**: For many connections\n\n### Service Management Commands:\n\n```bash\n# Reload systemd\nsudo systemctl daemon-reload\n\n# Enable services\nsudo systemctl enable story-geth story\n\n# Start services\nsudo systemctl start story-geth\nsleep 5\nsudo systemctl start story\n\n# Check status\nsudo systemctl status story-geth\nsudo systemctl status story\n```"
        }
      ]
    },
    {
      "id": "snapshot",
      "title": "Snapshot Service",
      "icon": "⚡",
      "type": "section",
      "children": [
        {
          "id": "snapshot-info",
          "title": "Snapshot Information",
          "icon": "📸",
          "type": "page",
          "content": "# 📸 Coinsspor Advanced Snapshot Service\n\n## Next-Generation Snapshot Service\n\n**Features:**\n- 🔄 **Updated**: Every 6 hours (00:00, 06:00, 12:00, 18:00 UTC)\n- 🗜️ **Compression**: ZSTD format (superior to LZ4)\n- ⚡ **Download Tool**: aria2c multi-connection\n- 🔒 **Security**: SSL secured with validator-safe backup/restore\n- 💾 **Size**: ~36GB Consensus + ~15GB Execution (optimized compression)\n\n## Service Information\n\n| Feature | Details |\n|---------|---------|  \n| **URL** | https://snaps.coinsspor.com/story/aeneid/ |\n| **API Endpoint** | `coinsspor-info.json` |\n| **Update Frequency** | Every 6 hours |\n| **Compression** | ZSTD (superior to LZ4) |\n| **Download Tool** | aria2c multi-connection |\n| **File Format** | `coinsspor-aeneid-TYPE-HEIGHT-DATE.tar.zst` |\n| **Security** | Validator state preservation |\n| **SSL** | ✅ HTTPS secured |\n\n## Performance Benefits\n\n- **🚀 Ultra-Fast Downloads**: aria2c with 8 parallel connections (~270MB/s)\n- **🗜️ Superior Compression**: ZSTD provides better compression than LZ4\n- **💾 Optimized Size**: ~51GB total (vs ~200GB+ full node)\n- **⏱️ Quick Sync**: 3-5 minutes download + extraction\n- **🔒 Validator Safe**: Automatic state backup/restore\n- **🔄 Always Fresh**: Updated every 6 hours\n- **🌐 Reliable**: Professional infrastructure with 99.9% uptime\n\n## Prerequisites\n\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y aria2 zstd jq curl\n\n# Verify installation\naria2c --version\nzstd --version\n```"
        },
        {
          "id": "snapshot-download",
          "title": "Snapshot Download",
          "icon": "📥",
          "type": "page",
          "content": "# 🚀 Coinsspor Advanced Snapshot Download\n\n## Check Latest Snapshot Status\n\n```bash\n# Get current snapshot height\necho \"Coinsspor Snapshot Height: $(curl -s https://snaps.coinsspor.com/story/aeneid/coinsspor-height.txt)\"\n\n# Get detailed snapshot information\ncurl -s https://snaps.coinsspor.com/story/aeneid/coinsspor-info.json | jq '.'\n```\n\n## Advanced Download Script\n\n```bash\n#!/bin/bash\n\n# Coinsspor Advanced Snapshot Download - Server Optimized\nset -e\n\necho \"🌟 Coinsspor Advanced Snapshot Download (Server Optimized)\"\necho \"=========================================================\"\n\n# Configuration\nCOINSSPOR_BASE=\"https://snaps.coinsspor.com/story/aeneid\"\nSTORY_DATA=\"$HOME/.story\"\nTEMP_DIR=\"/tmp/coinsspor_sync\"\n\n# Check dependencies\necho \"📦 Checking dependencies...\"\nfor cmd in aria2c zstd jq; do\n    if ! command -v $cmd &> /dev/null; then\n        echo \"❌ Missing dependency: $cmd\"\n        echo \"💡 Install with: sudo apt install aria2 zstd jq\"\n        exit 1\n    fi\ndone\necho \"✅ All dependencies ready\"\n\n# Discover snapshots via JSON API\necho \"🔍 Discovering latest snapshots...\"\nMETADATA=$(curl -s \"$COINSSPOR_BASE/coinsspor-info.json\")\nCONSENSUS_FILE=$(echo \"$METADATA\" | jq -r '.snapshots.consensus')\nEXECUTION_FILE=$(echo \"$METADATA\" | jq -r '.snapshots.execution')\nBLOCK_HEIGHT=$(echo \"$METADATA\" | jq -r '.block_height')\n\nif [ \"$CONSENSUS_FILE\" = \"null\" ] || [ \"$EXECUTION_FILE\" = \"null\" ]; then\n    echo \"❌ Could not discover snapshot files\"\n    exit 1\nfi\n\necho \"📊 Snapshot Information:\"\necho \"  Block Height: $BLOCK_HEIGHT\"\necho \"  Consensus: $CONSENSUS_FILE\"\necho \"  Execution: $EXECUTION_FILE\"\n\n# Confirmation\nread -p \"🚀 Continue with download? (y/N): \" -n 1 -r\necho\nif [[ ! $REPLY =~ ^[Yy]$ ]]; then\n    echo \"Download cancelled\"\n    exit 0\nfi\n\n# Prepare environment\nmkdir -p \"$TEMP_DIR\"\n\necho \"🛑 Stopping services...\"\nsudo systemctl stop story story-geth\n\necho \"💾 Backing up validator state...\"\nif [[ -f \"$STORY_DATA/story/data/priv_validator_state.json\" ]]; then\n    cp \"$STORY_DATA/story/data/priv_validator_state.json\" \"$TEMP_DIR/validator_backup.json\"\n    echo \"✅ Validator state backed up\"\nfi\n\necho \"🧹 Cleaning target directories...\"\nrm -rf \"$STORY_DATA/story/data\"\nrm -rf \"$STORY_DATA/geth/aeneid/geth/chaindata\"\nmkdir -p \"$STORY_DATA/geth/aeneid/geth\"\n\necho \"\"\necho \"📥 Downloading with optimized aria2c settings...\"\n\n# SERVER OPTIMIZED aria2c configuration\nARIA2C_OPTIONS=(\n    --max-connection-per-server=12\n    --split=12\n    --min-split-size=15M\n    --max-concurrent-downloads=2\n    --disk-cache=64M\n    --file-allocation=falloc\n    --continue=true\n    --max-tries=5\n    --retry-wait=2\n    --timeout=90\n    --connect-timeout=20\n    --lowest-speed-limit=400K\n    --user-agent=\"Coinsspor-Client/3.0-Fast\"\n)\n\n# Download consensus\necho \"🔹 Downloading consensus snapshot...\"\naria2c \"${ARIA2C_OPTIONS[@]}\" \\\n    --dir=\"$TEMP_DIR\" \\\n    --out=\"$CONSENSUS_FILE\" \\\n    \"$COINSSPOR_BASE/$CONSENSUS_FILE\"\n\n# Download execution\necho \"🔸 Downloading execution snapshot...\"\naria2c \"${ARIA2C_OPTIONS[@]}\" \\\n    --dir=\"$TEMP_DIR\" \\\n    --out=\"$EXECUTION_FILE\" \\\n    \"$COINSSPOR_BASE/$EXECUTION_FILE\"\n\necho \"\"\necho \"📂 Extracting with ZSTD compression...\"\n\n# Extract consensus\necho \"🔹 Extracting consensus snapshot...\"\nif ! zstd -d --stdout \"$TEMP_DIR/$CONSENSUS_FILE\" | tar -xf - -C \"$STORY_DATA/story\"; then\n    echo \"❌ Error extracting consensus snapshot\"\n    exit 1\nfi\n\n# Extract execution\necho \"🔸 Extracting execution snapshot...\"\nif ! zstd -d --stdout \"$TEMP_DIR/$EXECUTION_FILE\" | tar -xf - -C \"$STORY_DATA/geth/aeneid/geth\"; then\n    echo \"❌ Error extracting execution snapshot\"\n    exit 1\nfi\n\necho \"🔄 Restoring validator state...\"\nif [[ -f \"$TEMP_DIR/validator_backup.json\" ]]; then\n    cp \"$TEMP_DIR/validator_backup.json\" \"$STORY_DATA/story/data/priv_validator_state.json\"\n    echo \"✅ Validator state restored\"\nfi\n\necho \"🚀 Starting services...\"\nsudo systemctl start story-geth\nsleep 10\nsudo systemctl start story\n\necho \"🧹 Cleaning up temporary files...\"\nrm -rf \"$TEMP_DIR\"\n\necho \"\"\necho \"✅ Coinsspor snapshot download completed successfully!\"\necho \"📊 Monitor sync with: sudo journalctl -u story -u story-geth -f\"\n```"
        }
      ]
    },
{
      "id": "monitoring",
      "title": "Monitoring & Sync",
      "icon": "📊",
      "type": "section",
      "children": [
        {
          "id": "start-services",
          "title": "Start Services",
          "icon": "🏁",
          "type": "page",
          "content": "# 🏁 Start Services\n\n## Reload and Start Services\n\n```bash\n# Reload systemd and start services\nsudo systemctl daemon-reload\n\n# Enable services\nsudo systemctl enable story-geth story\n\n# Start story-geth first\nsudo systemctl start story-geth\n\n# Wait a few seconds then start story\nsleep 5\nsudo systemctl start story\n\n# Check status\nsudo systemctl status story-geth\nsudo systemctl status story\n```\n\n## Check Service Logs\n\n```bash\n# View story-geth logs\nsudo journalctl -u story-geth -f -o cat\n\n# View story logs\nsudo journalctl -u story -f -o cat\n\n# View both logs together\nsudo journalctl -u story -u story-geth -f\n```\n\n## Service Management Commands\n\n```bash\n# Stop services\nsudo systemctl stop story story-geth\n\n# Restart services\nsudo systemctl restart story-geth\nsleep 5\nsudo systemctl restart story\n\n# Check if services are running\nsudo systemctl is-active story\nsudo systemctl is-active story-geth\n```"
        },
        {
          "id": "check-sync",
          "title": "Check Sync Status",
          "icon": "🔄",
          "type": "page",
          "content": "# 🔄 Check Sync Status\n\n## Check if Node is Syncing\n\n```bash\n# Check if node is catching up\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info.catching_up'\n```\n\n- `true` = Still syncing\n- `false` = Fully synced\n\n## Get Current Block Height\n\n```bash\n# Get current block height\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info.latest_block_height'\n```\n\n## Check Geth Sync Status\n\n```bash\n# Check geth sync status\nstory-geth --exec \"eth.syncing\" attach ~/.story/geth/aeneid/geth.ipc\n```\n\n## Complete Sync Information\n\n```bash\n# Get detailed sync info\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info'\n```\n\nThis shows:\n- `latest_block_height`: Current height\n- `latest_block_time`: Last block time\n- `catching_up`: Sync status\n- `earliest_block_height`: First block\n\n## Check Network Height\n\n```bash\n# Compare with network height\nNETWORK_HEIGHT=$(curl -s https://aeneid.storyrpc.io/status | jq -r '.result.sync_info.latest_block_height')\nLOCAL_HEIGHT=$(curl -s localhost:${STORY_PORT}657/status | jq -r '.result.sync_info.latest_block_height')\n\necho \"Network Height: $NETWORK_HEIGHT\"\necho \"Local Height: $LOCAL_HEIGHT\"\necho \"Blocks Behind: $((NETWORK_HEIGHT - LOCAL_HEIGHT))\"\n```"
        },
        {
          "id": "live-monitor",
          "title": "Live Sync Monitor",
          "icon": "📈",
          "type": "page",
          "content": "# 📈 Live Sync Monitor Script\n\n## Create Monitor Script\n\n```bash\n# Remove any existing broken monitor script\nrm -f $HOME/monitor.sh\n\n# Create new monitoring script\ncat > $HOME/monitor.sh << 'EOF'\n#!/bin/bash\n\n# Get port from environment variable\nsource $HOME/.bash_profile\nrpc_port=\"${STORY_PORT}657\"\nlocal_rpc=\"localhost:$rpc_port\"\nnetwork_rpc=\"https://aeneid.storyrpc.io\"\n\necho \"🚀 Story Protocol Sync Monitor\"\necho \"==============================\"\necho \"Local RPC: $local_rpc\"\necho \"Network RPC: $network_rpc\"\necho \"Press Ctrl+C to stop monitoring\"\necho \"==============================\"\n\nwhile true; do\n local_height=$(curl -s \"$local_rpc/status\" | jq -r '.result.sync_info.latest_block_height')\n network_height=$(curl -s \"$network_rpc/status\" | jq -r '.result.sync_info.latest_block_height')\n\n if ! [[ \"$local_height\" =~ ^[0-9]+$ ]] || ! [[ \"$network_height\" =~ ^[0-9]+$ ]]; then\n   echo -e \"\\033[1;31m❌ Error: Failed to fetch block heights. Retrying...\\033[0m\"\n   sleep 5\n   continue\n fi\n\n blocks_left=$((network_height - local_height))\n if [ \"$blocks_left\" -lt 0 ]; then\n   blocks_left=0\n fi\n\n # Calculate sync percentage\n sync_percentage=$(echo \"scale=2; ($local_height / $network_height) * 100\" | bc -l 2>/dev/null || echo \"0\")\n\n echo -e \"\\033[1;33m📊 Node Height:\\033[1;34m $local_height\\033[0m \\033[1;33m| 🌐 Network Height:\\033[1;36m $network_height\\033[0m \\033[1;33m| ⏳ Blocks Left:\\033[1;31m $blocks_left\\033[0m \\033[1;32m| 🔄 Sync: ${sync_percentage}%\\033[0m\"\n sleep 5\ndone\nEOF\n\n# Set execute permissions\nchmod +x $HOME/monitor.sh\n```\n\n## Run the Monitor\n\n```bash\n# Run the monitor\ncd $HOME\n./monitor.sh\n```\n\n## Monitor Features\n\n- **Real-time Updates**: Every 5 seconds\n- **Color Coded**: Easy to read\n- **Sync Percentage**: Track progress\n- **Blocks Remaining**: Know time left\n- **Error Handling**: Auto-retry on errors"
        }
      ]
    },
    {
      "id": "validator",
      "title": "Validator Creation",
      "icon": "🏆",
      "type": "section",
      "children": [
        {
          "id": "export-keys",
          "title": "Export Keys",
          "icon": "🔑",
          "type": "page",
          "content": "# 🔑 Export Validator Keys\n\n## Export Validator Public Key\n\n```bash\n# Export validator public key\nstory validator export\n```\n\nThis will show:\n- Validator Public Key (compressed)\n- EVM Address\n- Consensus Address\n\n## Export EVM Private Key\n\n```bash\n# Export EVM private key to file\nstory validator export --export-evm-key\n```\n\nThis creates `$HOME/.story/story/config/private_key.txt`\n\n## ⚠️ Security Warning\n\n**NEVER share your private key!**\n- Keep it secure\n- Back it up safely\n- Don't commit to git\n- Don't share in chat\n\n## Backup Your Keys\n\n```bash\n# Create backup directory\nmkdir -p $HOME/story_backup\n\n# Backup important files\ncp $HOME/.story/story/config/priv_validator_key.json $HOME/story_backup/\ncp $HOME/.story/story/config/node_key.json $HOME/story_backup/\ncp $HOME/.story/story/config/private_key.txt $HOME/story_backup/\n\n# Set secure permissions\nchmod -R 600 $HOME/story_backup/\n\necho \"✅ Keys backed up to $HOME/story_backup/\"\n```"
        },
        {
          "id": "setup-env",
          "title": "Setup Environment",
          "icon": "⚙️",
          "type": "page",
          "content": "# ⚙️ Setup .env File\n\n## Create .env File\n\n```bash\n# Create .env file in the Story config directory\necho \"PRIVATE_KEY=$(cat $HOME/.story/story/config/private_key.txt | grep \"PRIVATE_KEY\" | awk -F'=' '{print $2}')\" > $HOME/.story/story/config/.env\n```\n\n## Verify .env File\n\n```bash\n# Verify .env file (DO NOT share this output)\necho \"✅ .env file created in $HOME/.story/story/config/\"\necho \"⚠️  Keep your .env file secure and never share it!\"\n\n# Check if .env file is correctly formatted\nif [ -f \"$HOME/.story/story/config/.env\" ]; then\n    echo \"✅ .env file exists in config directory\"\nelse\n    echo \"❌ .env file creation failed\"\n    exit 1\nfi\n```\n\n## Set Secure Permissions\n\n```bash\n# Set proper permissions for security\nchmod 600 $HOME/.story/story/config/.env\necho \"✅ .env file permissions set to 600 (owner read/write only)\"\n```\n\n## Why .env File?\n\n- **Required**: Story v1.2.0+ requires .env\n- **Security**: Keeps private key separate\n- **Convenience**: No need to export each time\n- **Standard**: Industry standard practice\n\n## Important Notes\n\n- ✅ Never commit .env to git\n- ✅ Keep backup in secure location\n- ✅ Use from config directory\n- ✅ Required for all validator operations"
        },
        {
          "id": "create-validator",
          "title": "Create Validator",
          "icon": "🎯",
          "type": "page",
          "content": "# 🎯 Create Validator\n\n## Wait for Full Sync\n\n```bash\n# Check sync status first\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info.catching_up'\n```\n\n**⚠️ IMPORTANT: Only proceed when `catching_up: false`**\n\n## Navigate to Config Directory\n\n```bash\n# Navigate to the directory containing .env file\ncd $HOME/.story/story/config/\n```\n\n## Create Validator (LOCKED Tokens)\n\n```bash\n# For LOCKED tokens (recommended for competition)\nstory validator create \\\n  --stake 1024000000000000000000 \\\n  --moniker \"$STORY_MONIKER\" \\\n  --chain-id 1315 \\\n  --unlocked=false \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n## Create Validator (UNLOCKED Tokens)\n\n```bash\n# For UNLOCKED tokens\nstory validator create \\\n  --stake 1024000000000000000000 \\\n  --moniker \"$STORY_MONIKER\" \\\n  --chain-id 1315 \\\n  --unlocked=true \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n## Parameters Explained\n\n| Parameter | Value | Description |\n|-----------|-------|-------------|\n| `--stake` | 1024000000000000000000 | Minimum 1024 IP |\n| `--moniker` | Your node name | Validator display name |\n| `--chain-id` | 1315 | Aeneid testnet ID |\n| `--unlocked` | true/false | Token lock status |\n| `--rpc` | RPC endpoint | Network RPC |\n\n## Important Notes\n\n- ✅ Minimum stake is 1024 IP\n- ✅ Must be fully synced\n- ✅ Need funded wallet\n- ✅ .env file required\n- ✅ Use locked for competition"
        },
        {
          "id": "delegate-stake",
          "title": "Delegate Stake",
          "icon": "💰",
          "type": "page",
          "content": "# 💰 Delegate to Your Validator\n\n## Get Your Validator Public Key\n\n```bash\n# Get your validator public key\nVALIDATOR_PUBKEY=$(story validator export | grep \"Compressed Public Key (hex)\" | awk '{print $NF}')\necho \"Your Validator PubKey: $VALIDATOR_PUBKEY\"\n```\n\n## Navigate to Config Directory\n\n```bash\n# Navigate to the directory containing .env file\ncd $HOME/.story/story/config/\n```\n\n## Delegate Additional Stake\n\n```bash\n# Delegate additional stake\nstory validator stake \\\n  --chain-id 1315 \\\n  --validator-pubkey $VALIDATOR_PUBKEY \\\n  --stake 1000000000000000000000 \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n## Check Your Delegations\n\n```bash\n# Check delegations\nstory query staking delegations YOUR_DELEGATOR_ADDRESS --rpc https://aeneid.storyrpc.io\n```\n\n## Unstake Tokens\n\n```bash\n# Unstake tokens if needed\nstory validator unstake \\\n  --validator-pubkey $VALIDATOR_PUBKEY \\\n  --unstake 1000000000000000000000 \\\n  --delegation-id 0 \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n## Staking Tips\n\n- Start with minimum stake\n- Add more as you gain confidence\n- Monitor validator performance\n- Keep some tokens for gas\n- Consider lock period for rewards"
        }
      ]
    },
    {
      "id": "commands",
      "title": "Useful Commands",
      "icon": "🔧",
      "type": "section",
      "children": [
        {
          "id": "service-commands",
          "title": "Service Management",
          "icon": "⚙️",
          "type": "page",
          "content": "# 🔧 Service Management\n\n## View Logs\n\n```bash\n# View story logs\nsudo journalctl -u story -f -o cat\n\n# View story-geth logs\nsudo journalctl -u story-geth -f -o cat\n\n# View both logs together\nsudo journalctl -u story -u story-geth -f\n\n# View last 100 lines\nsudo journalctl -u story -n 100 --no-pager\n\n# View logs from last hour\nsudo journalctl -u story --since \"1 hour ago\"\n```\n\n## Restart Services\n\n```bash\n# Restart story\nsudo systemctl restart story\n\n# Restart story-geth\nsudo systemctl restart story-geth\n\n# Restart both\nsudo systemctl restart story-geth\nsleep 5\nsudo systemctl restart story\n```\n\n## Stop Services\n\n```bash\n# Stop both services\nsudo systemctl stop story story-geth\n\n# Stop individually\nsudo systemctl stop story\nsudo systemctl stop story-geth\n```\n\n## Service Status\n\n```bash\n# Check service status\nsudo systemctl status story\nsudo systemctl status story-geth\n\n# Check if running\nsudo systemctl is-active story\nsudo systemctl is-active story-geth\n\n# Check if enabled\nsudo systemctl is-enabled story\nsudo systemctl is-enabled story-geth\n```"
        },
        {
          "id": "node-info",
          "title": "Node Information",
          "icon": "📊",
          "type": "page",
          "content": "# 📊 Node Information\n\n## Get Node ID\n\n```bash\n# Get node ID\ncurl localhost:${STORY_PORT}657/status | jq '.result.node_info.id'\n```\n\n## Get Validator Address\n\n```bash\n# Get validator address\nstory status 2>&1 | jq '.ValidatorInfo.address'\n```\n\n## Check Validator Status\n\n```bash\n# Check validator status\ncurl localhost:${STORY_PORT}657/validators | jq '.result.validators[] | select(.address==\"YOUR_VALIDATOR_ADDRESS\")'\n```\n\n## Check Node Sync Info\n\n```bash\n# Check node sync info\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info'\n```\n\n## Check Connected Peers\n\n```bash\n# Check number of connected peers\ncurl -s localhost:${STORY_PORT}657/net_info | jq '.result.n_peers'\n\n# Check peer details\ncurl -s localhost:${STORY_PORT}657/net_info | jq -r '.result.peers[] | \"\\(.node_info.id)@\\(.remote_ip):\\(.node_info.listen_addr | capture(\":(?<port>[0-9]+)$\").port) - \\(.node_info.moniker)\"'\n```\n\n## Node Version\n\n```bash\n# Check story version\nstory version\n\n# Check geth version\nstory-geth version\n\n# Check cosmovisor version\ncosmovisor version\n```"
        },
{
          "id": "wallet-operations",
          "title": "Wallet Operations",
          "icon": "💰",
          "type": "page",
          "content": "# 💰 Wallet Operations\n\n## Check Balance\n\n```bash\n# Navigate to the directory containing .env file\ncd $HOME/.story/story/config/\n\n# Check balance (replace YOUR_ADDRESS with your actual address)\ncurl -s \"https://aeneid.storyrpc.io/cosmos/bank/v1beta1/balances/YOUR_ADDRESS\" | jq\n```\n\n## Send Tokens\n\n```bash\n# Send tokens\nstory tx bank send YOUR_ADDRESS RECIPIENT_ADDRESS 1000000000000000000000uip \\\n  --chain-id 1315 \\\n  --rpc https://aeneid.storyrpc.io\n```\n\n## Check Transaction Status\n\n```bash\n# Check transaction status\ncurl -s \"https://aeneid.storyrpc.io/cosmos/tx/v1beta1/txs/TX_HASH\" | jq\n```"
        },
        {
          "id": "fresh-peers",
          "title": "Fresh Peers Management",
          "icon": "🌐",
          "type": "page",
          "content": "# 🌐 Fresh Peers Management\n\n## Create Fresh Peers Script\n\n```bash\n# Create fresh peers function for easy use\ncat > $HOME/get_fresh_peers.sh << 'EOF'\n#!/bin/bash\n\nget_fresh_peers() {\n    echo \"🔍 Fetching fresh peers from Coinsspor RPC...\"\n    URL=\"https://story-aeneid-testnet-rpc.coinsspor.com/net_info\"\n    response=$(curl -s $URL)\n    \n    if [ -z \"$response\" ]; then\n        echo \"❌ Failed to connect to RPC endpoint\"\n        return 1\n    fi\n    \n    PEERS=$(echo $response | jq -r '.result.peers[] | select(.remote_ip | test(\"^[0-9]{1,3}(\\\\.[0-9]{1,3}){3}$\")) | \"\\(.node_info.id)@\\(.remote_ip):\" + (.node_info.listen_addr | capture(\":(?<port>[0-9]+)$\").port)' | paste -sd \",\" -)\n    \n    if [ -n \"$PEERS\" ]; then\n        echo \"✅ Fresh peers found:\"\n        echo \"$PEERS\" | tr ',' '\\n' | head -10  # Show first 10 peers\n        echo \"\"\n        echo \"🔧 Apply these peers? (y/n)\"\n        read -r apply_peers\n        \n        if [ \"$apply_peers\" = \"y\" ] || [ \"$apply_peers\" = \"Y\" ]; then\n            sed -i 's|^persistent_peers *=.*|persistent_peers = \"'$PEERS'\"|' $HOME/.story/story/config/config.toml\n            sudo systemctl restart story\n            echo \"✅ Fresh peers applied and service restarted!\"\n            \n            # Check connection after restart\n            sleep 10\n            peer_count=$(curl -s localhost:${STORY_PORT}657/net_info | jq '.result.n_peers')\n            echo \"📊 Connected to $peer_count peers\"\n        fi\n    else\n        echo \"❌ No fresh peers found\"\n    fi\n}\n\n# Run the function\nget_fresh_peers\nEOF\n\nchmod +x $HOME/get_fresh_peers.sh\necho \"✅ Fresh peers script created: $HOME/get_fresh_peers.sh\"\n```\n\n## Run Fresh Peers Script\n\n```bash\n# Run the script\n./get_fresh_peers.sh\n```"
        },
        {
          "id": "staking-operations",
          "title": "Staking Operations",
          "icon": "🥩",
          "type": "page",
          "content": "# 🥩 Staking Operations\n\n## Check Delegations\n\n```bash\n# Navigate to the directory containing .env file\ncd $HOME/.story/story/config/\n\n# Check delegations\nstory query staking delegations YOUR_DELEGATOR_ADDRESS --rpc https://aeneid.storyrpc.io\n```\n\n## Unstake Tokens\n\n```bash\n# Unstake tokens\nstory validator unstake \\\n  --validator-pubkey $VALIDATOR_PUBKEY \\\n  --unstake 1000000000000000000000 \\\n  --delegation-id 0 \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n## Redelegate\n\n```bash\n# Redelegate to another validator\nstory validator redelegate \\\n  --validator-src-pubkey $SOURCE_VALIDATOR_PUBKEY \\\n  --validator-dst-pubkey $DEST_VALIDATOR_PUBKEY \\\n  --redelegate 1000000000000000000000 \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```"
        }
      ]
    },
    {
      "id": "upgrades",
      "title": "Upgrades & Maintenance",
      "icon": "🔄",
      "type": "section",
      "children": [
        {
          "id": "where-to-follow",
          "title": "Where to Follow Upgrades",
          "icon": "📡",
          "type": "page",
          "content": "# 📡 Where to Follow Upgrade Announcements\n\n## 1. Official GitHub Releases (Primary Source)\n- **Story Consensus Client:** [https://github.com/piplabs/story/releases](https://github.com/piplabs/story/releases)\n- **Story-Geth Execution Client:** [https://github.com/piplabs/story-geth/releases](https://github.com/piplabs/story-geth/releases)\n\n## 2. Official Documentation\n- **Release Notes:** [https://docs.story.foundation/network/releases](https://docs.story.foundation/network/releases)\n- **Node Upgrade Guide:** [https://docs.story.foundation/network/operate/upgrade](https://docs.story.foundation/network/operate/upgrade)\n\n## 3. Community Channels\n- **Discord:** [https://discord.gg/storyprotocol](https://discord.gg/storyprotocol) (announcements channel)\n- **Telegram:** [https://t.me/storyprotocol](https://t.me/storyprotocol) (official announcements)\n- **Twitter/X:** [@Story_Protocol](https://twitter.com/Story_Protocol) (follow for upgrade alerts)\n\n## 🔔 Upgrade Types and Urgency\n\n| Type | Description | Action Required | Timeline |\n|------|-------------|-----------------|----------|\n| **Major** | Hard fork upgrade with block height | **MANDATORY** before block height | Usually 1-2 weeks notice |\n| **Minor** | Bug fixes, improvements | **RECOMMENDED** ASAP | Deploy within 24-48 hours |\n| **Critical** | Security fixes | **URGENT** | Deploy immediately |\n| **Optional** | Performance improvements | Optional | Deploy when convenient |"
        },
        {
          "id": "why-build-from-source",
          "title": "Why Build from Source",
          "icon": "⚠️",
          "type": "page",
          "content": "# ⚠️ Important: Why Build from Source?\n\n**Pre-compiled binaries on GitHub are built with Ubuntu 24.04** and may not work properly on Ubuntu 22.04 due to library dependencies. **Building from source ensures compatibility** with your system.\n\n## ❌ Pre-compiled Binaries Issue\n- Built for Ubuntu 24.04\n- Different glibc versions\n- Library dependency conflicts\n- May cause crashes or failures\n\n## ✅ Build from Source (Required for Ubuntu 22.04)\n- **Full compatibility** with your system\n- **Correct library linking**\n- **Stable operation**\n- **No dependency issues**"
        },
        {
          "id": "cosmovisor-upgrade",
          "title": "Cosmovisor Auto-Upgrade",
          "icon": "🚀",
          "type": "page",
          "content": "# 🚀 Build for Cosmovisor Auto-Upgrade (Recommended)\n\n```bash\n# Get the latest release tag\nLATEST_VERSION=$(curl -s https://api.github.com/repos/piplabs/story/releases/latest | jq -r '.tag_name')\necho \"Latest version: $LATEST_VERSION\"\n\n# ⚠️ IMPORTANT: Set the upgrade height from official announcement\nUPGRADE_HEIGHT=\"REPLACE_WITH_ACTUAL_HEIGHT\"  # Example: 2065886\n\necho \"⚠️ CRITICAL: Replace UPGRADE_HEIGHT with actual height from announcement!\"\necho \"📡 Check official channels for upgrade height\"\n\n# Validate upgrade height is set\nif [ \"$UPGRADE_HEIGHT\" = \"REPLACE_WITH_ACTUAL_HEIGHT\" ]; then\n    echo \"❌ ERROR: You must set the actual upgrade height!\"\n    echo \"📋 Current height: $(curl -s localhost:${STORY_PORT}657/status | jq -r '.result.sync_info.latest_block_height')\"\n    exit 1\nfi\n\n# Clone and build the new version\ncd $HOME\nrm -rf story-upgrade\ngit clone https://github.com/piplabs/story story-upgrade\ncd story-upgrade\ngit checkout $LATEST_VERSION\ngo build -o story ./client\n\n# Verify the build\n./story version\n\n# Create upgrade folder\nmkdir -p $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/bin\n\n# Copy built binary to upgrade directory\ncp ./story $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/bin/\n\n# Create upgrade info\necho \"{\\\"name\\\":\\\"$LATEST_VERSION\\\",\\\"time\\\":\\\"0001-01-01T00:00:00Z\\\",\\\"height\\\":$UPGRADE_HEIGHT}\" > $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/upgrade-info.json\n\n# Setup automatic upgrade with Cosmovisor\ncosmovisor add-upgrade $LATEST_VERSION $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/bin/story --force --upgrade-height $UPGRADE_HEIGHT\n\n# Verify setup\necho \"✅ Checking upgrade setup:\"\nls -l $HOME/.story/story/cosmovisor/current\ncat $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/upgrade-info.json\n\n# Show status\nCURRENT_HEIGHT=$(curl -s localhost:${STORY_PORT}657/status | jq -r '.result.sync_info.latest_block_height')\nBLOCKS_REMAINING=$((UPGRADE_HEIGHT - CURRENT_HEIGHT))\necho \"📊 Current Height: $CURRENT_HEIGHT\"\necho \"🎯 Upgrade Height: $UPGRADE_HEIGHT\"  \necho \"⏳ Blocks Remaining: $BLOCKS_REMAINING\"\n\necho \"✅ Automatic upgrade scheduled! Monitor with:\"\necho \"sudo journalctl -u story -f\"\n\n# Cleanup\nrm -rf $HOME/story-upgrade\n```"
        },
        {
          "id": "manual-upgrade",
          "title": "Manual Upgrade",
          "icon": "🔧",
          "type": "page",
          "content": "# 🔧 Manual Build and Replace (Advanced Users)\n\n```bash\n# Stop the service\nsudo systemctl stop story\n\n# Get the latest release tag and build\nLATEST_VERSION=$(curl -s https://api.github.com/repos/piplabs/story/releases/latest | jq -r '.tag_name')\necho \"Building version: $LATEST_VERSION\"\n\ncd $HOME\nrm -rf story-upgrade\ngit clone https://github.com/piplabs/story story-upgrade\ncd story-upgrade\ngit checkout $LATEST_VERSION\ngo build -o story ./client\n\n# Replace the main binary\nsudo mv story $HOME/go/bin/story\nsudo chmod +x $HOME/go/bin/story\n\n# Update cosmovisor current binary\ncosmovisor init $(which story)\n\n# Verify version\nstory version\n\n# Start the service\nsudo systemctl start story\n\n# Check if upgrade was successful\nsudo journalctl -u story -n 50 --no-pager\n\n# Cleanup\ncd $HOME\nrm -rf story-upgrade\n```"
        }
      ]
    },
    {
      "id": "troubleshooting",
      "title": "Troubleshooting",
      "icon": "🔍",
      "type": "section",
      "children": [
        {
          "id": "node-not-syncing",
          "title": "Node Not Syncing",
          "icon": "🚨",
          "type": "page",
          "content": "# 🚨 Node Not Syncing\n\n## Symptoms\n- Node stuck at same block height\n- `catching_up: true` for extended periods\n- No new blocks being processed\n\n## Solutions\n\n```bash\n# Check current sync status\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info'\n\n# Check peer connections\ncurl localhost:${STORY_PORT}657/net_info | jq '.result.n_peers'\n\n# Get fresh peers and restart\n./get_fresh_peers.sh\n\n# Restart services\nsudo systemctl restart story story-geth\n\n# Check if geth is syncing\nstory-geth --exec \"eth.syncing\" attach ~/.story/geth/aeneid/geth.ipc\n```"
        },
        {
          "id": "disk-space-issues",
          "title": "Disk Space Issues",
          "icon": "💾",
          "type": "page",
          "content": "# 💾 Disk Space Issues\n\n## Symptoms\n- Services crashing due to disk space\n- `No space left on device` errors\n- Node stops syncing\n\n## Solutions\n\n```bash\n# Check disk usage\ndf -h\ndu -sh $HOME/.story/*\n\n# Clean old logs\nsudo journalctl --vacuum-time=3d\n\n# Prune geth data (CAUTION: Will require re-sync)\nsudo systemctl stop story-geth\nstory-geth --datadir ~/.story/geth/aeneid removedb\nsudo systemctl start story-geth\n\n# Check for large log files\nfind $HOME/.story -name \"*.log\" -size +100M\n```"
        },
        {
          "id": "port-conflicts",
          "title": "Port Conflicts",
          "icon": "🔌",
          "type": "page",
          "content": "# 🔌 Port Conflicts\n\n## Symptoms\n- Services fail to start\n- `Address already in use` errors\n- Cannot bind to port\n\n## Solutions\n\n```bash\n# Check what's using your ports\nsudo netstat -tulpn | grep :${STORY_PORT}657  # RPC\nsudo netstat -tulpn | grep :${STORY_PORT}656  # P2P\nsudo netstat -tulpn | grep :${STORY_PORT}545  # Geth RPC\n\n# Kill conflicting processes\nsudo kill -9 PID_NUMBER\n\n# Change port prefix if needed\necho \"export STORY_PORT=\\\"56\\\"\" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n\n# Reconfigure ports\nsed -i.bak -e \"s%:26657%:${STORY_PORT}657%g\" $HOME/.story/story/config/config.toml\n```"
        },
        {
          "id": "service-wont-start",
          "title": "Service Won't Start",
          "icon": "🚫",
          "type": "page",
          "content": "# 🚫 Service Won't Start\n\n## Symptoms\n- `systemctl start` fails\n- Service shows `failed` status\n- Immediate crashes\n\n## Solutions\n\n```bash\n# Check service status and logs\nsudo systemctl status story\nsudo systemctl status story-geth\n\n# Check recent logs for errors\nsudo journalctl -u story -n 50 --no-pager\nsudo journalctl -u story-geth -n 50 --no-pager\n\n# Check binary permissions\nls -la $HOME/go/bin/story*\nchmod +x $HOME/go/bin/story\nchmod +x $HOME/go/bin/story-geth\n\n# Verify environment variables\necho \"DAEMON_HOME: $DAEMON_HOME\"\necho \"STORY_PORT: $STORY_PORT\"\n\n# Test binary manually\n$HOME/go/bin/story version\n```"
        },
        {
          "id": "cosmovisor-issues",
          "title": "Cosmovisor Issues",
          "icon": "🔄",
          "type": "page",
          "content": "# 🔄 Cosmovisor Issues\n\n## Symptoms\n- Upgrades not working\n- Binary not found errors\n- Version mismatches\n\n## Solutions\n\n```bash\n# Check cosmovisor setup\ncosmovisor version\nls -la $DAEMON_HOME/cosmovisor/\n\n# Verify current binary\nls -la $DAEMON_HOME/cosmovisor/current/bin/\n\n# Check upgrade directory\nls -la $DAEMON_HOME/cosmovisor/upgrades/\n\n# Reset to genesis binary\ncp $HOME/go/bin/story $DAEMON_HOME/cosmovisor/genesis/bin/\n\n# Check environment\nenv | grep DAEMON\n```"
        },
        {
          "id": "validator-issues",
          "title": "Validator Issues",
          "icon": "⚠️",
          "type": "page",
          "content": "# ⚠️ Validator Issues\n\n## Symptoms\n- Not signing blocks\n- Validator offline\n- Missing attestations\n\n## Solutions\n\n```bash\n# Check validator status\ncurl localhost:${STORY_PORT}657/status | jq '.result.validator_info'\n\n# Verify validator key\nls -la $HOME/.story/story/config/priv_validator_key.json\n\n# Check if node is synced\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info.catching_up'\n\n# Monitor validator performance\ncurl localhost:${STORY_PORT}657/validators | jq '.result.validators[] | select(.address==\"YOUR_VALIDATOR_ADDRESS\")'\n\n# Restart if needed\nsudo systemctl restart story\n```"
        },
        {
          "id": "log-analysis",
          "title": "Log Analysis & Monitoring",
          "icon": "📊",
          "type": "page",
          "content": "# 📊 Log Analysis and Monitoring\n\n## Essential Log Commands\n\n```bash\n# Monitor real-time logs\nsudo journalctl -u story -f\nsudo journalctl -u story-geth -f\n\n# Check for specific errors\nsudo journalctl -u story --since \"1 hour ago\" | grep -i error\nsudo journalctl -u story-geth --since \"1 hour ago\" | grep -i error\n\n# Check connection issues\nsudo journalctl -u story --since \"1 hour ago\" | grep -i \"peer\\|connection\"\n\n# Monitor resource usage\nhtop\niostat -x 1\n```\n\n## Performance Monitoring Script\n\n```bash\n# Create monitoring script\ncat > $HOME/performance_monitor.sh << 'EOF'\n#!/bin/bash\n\necho \"=== Story Node Performance Monitor ===\"\necho \"=====================================\"\n\n# System resources\necho \"📊 System Resources:\"\necho \"CPU Usage: $(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | awk -F'%' '{print $1}')%\"\necho \"Memory: $(free -h | awk '/^Mem:/ {print $3 \"/\" $2}')\"\necho \"Disk: $(df -h $HOME/.story | awk 'NR==2 {print $3 \"/\" $2 \" (\" $5 \" used)\"}')\"\n\n# Node status\necho \"\"\necho \"🌐 Node Status:\"\nSYNC_INFO=$(curl -s localhost:${STORY_PORT}657/status)\nHEIGHT=$(echo $SYNC_INFO | jq -r '.result.sync_info.latest_block_height')\nCATCHING_UP=$(echo $SYNC_INFO | jq -r '.result.sync_info.catching_up')\nPEERS=$(curl -s localhost:${STORY_PORT}657/net_info | jq -r '.result.n_peers')\n\necho \"Block Height: $HEIGHT\"\necho \"Catching Up: $CATCHING_UP\"\necho \"Connected Peers: $PEERS\"\n\n# Service status\necho \"\"\necho \"🔧 Service Status:\"\nSTORY_STATUS=$(systemctl is-active story)\nGETH_STATUS=$(systemctl is-active story-geth)\necho \"Story Service: $STORY_STATUS\"\necho \"Geth Service: $GETH_STATUS\"\n\necho \"=====================================\"\nEOF\n\nchmod +x $HOME/performance_monitor.sh\n```"
        },
        {
          "id": "complete-reset",
          "title": "Complete Node Reset",
          "icon": "🔧",
          "type": "page",
          "content": "# 🔧 Complete Node Reset\n\n## ⚠️ WARNING: This will delete all data and require full re-sync\n\n```bash\necho \"⚠️ WARNING: This will delete ALL node data!\"\necho \"Make sure you have backed up your validator keys!\"\nread -p \"Continue? (y/N): \" confirm\n\nif [ \"$confirm\" = \"y\" ]; then\n    # Stop services\n    sudo systemctl stop story story-geth\n    \n    # Backup validator keys\n    cp $HOME/.story/story/config/priv_validator_key.json $HOME/validator_key_backup.json\n    cp $HOME/.story/story/config/node_key.json $HOME/node_key_backup.json\n    \n    # Remove data directories\n    rm -rf $HOME/.story/story/data\n    rm -rf $HOME/.story/geth/aeneid/geth/chaindata\n    \n    # Reinitialize\n    story init --moniker $STORY_MONIKER --network aeneid\n    \n    # Restore keys\n    cp $HOME/validator_key_backup.json $HOME/.story/story/config/priv_validator_key.json\n    cp $HOME/node_key_backup.json $HOME/.story/story/config/node_key.json\n    \n    # Restart services\n    sudo systemctl start story-geth\n    sleep 5\n    sudo systemctl start story\n    \n    echo \"✅ Node reset complete. Monitor sync with: ./monitor.sh\"\nfi\n```"
        },
        {
          "id": "network-test",
          "title": "Network Connectivity Test",
          "icon": "🌐",
          "type": "page",
          "content": "# 🌐 Network Connectivity Test\n\n```bash\n# Test network connectivity\ncat > $HOME/network_test.sh << 'EOF'\n#!/bin/bash\n\necho \"🌐 Network Connectivity Test\"\necho \"==========================\"\n\n# Test RPC endpoints\necho \"Testing RPC endpoints...\"\ncurl -s --max-time 5 https://aeneid.storyrpc.io/status >/dev/null && echo \"✅ Official RPC: OK\" || echo \"❌ Official RPC: Failed\"\ncurl -s --max-time 5 https://story-aeneid-testnet-rpc.coinsspor.com/status >/dev/null && echo \"✅ Coinsspor RPC: OK\" || echo \"❌ Coinsspor RPC: Failed\"\n\n# Test local services\necho \"\"\necho \"Testing local services...\"\ncurl -s --max-time 5 localhost:${STORY_PORT}657/status >/dev/null && echo \"✅ Local Story RPC: OK\" || echo \"❌ Local Story RPC: Failed\"\ncurl -s --max-time 5 localhost:${STORY_PORT}545 -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' >/dev/null && echo \"✅ Local Geth RPC: OK\" || echo \"❌ Local Geth RPC: Failed\"\n\n# Test DNS resolution\necho \"\"\necho \"Testing DNS resolution...\"\nnslookup aeneid.storyrpc.io >/dev/null && echo \"✅ DNS Resolution: OK\" || echo \"❌ DNS Resolution: Failed\"\n\necho \"==========================\"\nEOF\n\nchmod +x $HOME/network_test.sh\n./network_test.sh\n```"
        },
        {
          "id": "emergency-recovery",
          "title": "Emergency Recovery",
          "icon": "🆘",
          "type": "page",
          "content": "# 🆘 Emergency Procedures\n\n## Emergency Validator Recovery\n\n```bash\n# If validator is offline and you need quick recovery\necho \"🆘 Emergency Validator Recovery\"\n\n# 1. Check if keys exist\nif [ ! -f \"$HOME/.story/story/config/priv_validator_key.json\" ]; then\n    echo \"❌ Validator key not found! Restore from backup immediately!\"\n    exit 1\nfi\n\n# 2. Force restart everything\nsudo systemctl stop story story-geth\nsleep 5\nsudo systemctl start story-geth\nsleep 10\nsudo systemctl start story\n\n# 3. Monitor recovery\necho \"📊 Monitoring recovery...\"\nfor i in {1..30}; do\n    CATCHING_UP=$(curl -s localhost:${STORY_PORT}657/status | jq -r '.result.sync_info.catching_up')\n    echo \"Attempt $i/30 - Catching up: $CATCHING_UP\"\n    if [ \"$CATCHING_UP\" = \"false\" ]; then\n        echo \"✅ Node synced! Checking validator status...\"\n        break\n    fi\n    sleep 10\ndone\n```\n\n## Emergency Contact Information\n\n```bash\necho \"🆘 Emergency Support Contacts:\"\necho \"==============================\"\necho \"Discord: https://discord.gg/storyprotocol\"\necho \"Telegram: https://t.me/storyprotocol\"\necho \"GitHub Issues: https://github.com/piplabs/story/issues\"\necho \"Coinsspor Support: https://t.me/coinsspor\"\necho \"==============================\"\n```"
        }
      ]
    },
    {
      "id": "complete-removal",
      "title": "Complete Node Removal",
      "icon": "🧹",
      "type": "section",
      "children": [
        {
          "id": "remove-node",
          "title": "Remove Node",
          "icon": "🗑️",
          "type": "page",
          "content": "# 🧹 Complete Node Removal\n\n```bash\n# Stop services\nsudo systemctl stop story story-geth\nsudo systemctl disable story story-geth\n\n# Remove service files\nsudo rm /etc/systemd/system/story.service\nsudo rm /etc/systemd/system/story-geth.service\nsudo systemctl daemon-reload\n\n# Remove data directories\nrm -rf $HOME/.story\nrm -rf $HOME/story\nrm -rf $HOME/story-geth\n\n# Remove binaries\nrm $HOME/go/bin/story\nrm $HOME/go/bin/story-geth\n\necho \"✅ Node completely removed\"\n```"
        }
      ]
    },
    {
      "id": "support",
      "title": "Support & Community",
      "icon": "📞",
      "type": "section",
      "children": [
        {
          "id": "community-links",
          "title": "Community Links",
          "icon": "🌐",
          "type": "page",
          "content": "# 📞 Support & Community\n\n| Platform | Link | Description |\n|----------|------|-------------|\n| **Discord** | [https://discord.gg/storyprotocol](https://discord.gg/storyprotocol) | Community Support |\n| **Telegram** | [https://t.me/storyprotocol](https://t.me/storyprotocol) | Official Announcements |\n| **Documentation** | [https://docs.story.foundation](https://docs.story.foundation) | Technical Documentation |\n| **GitHub** | [https://github.com/piplabs](https://github.com/piplabs) | Source Code & Issues |\n| **Coinsspor** | [https://coinsspor.com](https://coinsspor.com) | Service Provider |\n\n## 🎯 Quick Start Summary\n\n1. **🔧 Install dependencies and Go 1.22.11**\n2. **⚙️ Set moniker and port prefix variables**\n3. **🏗️ Build story-geth v1.1.1 and story v1.3.0**\n4. **🔄 Setup Cosmovisor for automatic upgrades**\n5. **🌐 Initialize node for Aeneid testnet**\n6. **📡 Configure dynamic ports, peers, and monitoring**\n7. **🚀 Create and start systemd services**\n8. **⏳ Wait for sync completion**\n9. **🏆 Create validator with 1024+ IP stake**\n10. **📊 Monitor performance and participate in competition**\n\n## 🚀 Good luck with your Story Protocol validator! 🚀\n\n---\n\n*This guide is maintained by the [Coinsspor](https://coinsspor.com) team. For updates and support, visit our endpoints and community channels.*"
        }
      ]
    }
  ],
  "lastUpdated": "2025-01-14T00:00:00Z",
  "projectId": "story-protocol",
  "version": "1.0.0"
}
