{
  "documentation": [
    {
      "id": "getting-started",
      "title": "Getting Started",
      "icon": "üöÄ",
      "type": "section",
      "children": [
        {
          "id": "introduction",
          "title": "Introduction",
          "type": "page",
          "content": "# üåå Story Protocol Aeneid Testnet Complete Node Setup Guide\n\n> **The Ultimate Guide to Setting Up Your Story Protocol Aeneid Testnet Node with Cosmovisor**\n\nWelcome to the most comprehensive guide for setting up a Story Protocol Aeneid Testnet node! This guide covers everything from installation to validator setup, monitoring, and maintenance.\n\n## What is Story Protocol?\n\nStory Protocol is a revolutionary blockchain platform designed specifically for intellectual property management and creative content. The Aeneid Testnet is the testing environment where validators can participate in securing the network.\n\n## Guide Overview\n\nThis documentation will walk you through:\n- Complete node installation from scratch\n- Cosmovisor setup for automatic upgrades\n- Validator creation and management\n- Monitoring and maintenance tools\n- Troubleshooting common issues\n\n## Competition Information\n\n**üèÜ Story Protocol Validator Competition**\n- **üìÖ Competition Period:** June 30, 2025 - July 28, 2025\n- **üéØ Active Validators:** 80\n- **üìà Average Uptime:** 99.9%\n- **Round 1 Results:** [https://storytable.coinsspor.com](https://storytable.coinsspor.com)\n- **Round 2 Tracking:** [https://storytable.coinsspor.com/round2](https://storytable.coinsspor.com/round2)"
        },
        {
          "id": "system-requirements",
          "title": "System Requirements",
          "type": "page",
          "content": "# üñ•Ô∏è System Requirements\n\n## Minimum Hardware Requirements\n\n| Component | Minimum | Recommended |\n|-----------|---------|-------------|\n| **CPU** | 4 cores | 8 cores |\n| **RAM** | 16 GB | 32 GB |\n| **Storage** | 500 GB NVMe SSD | 1 TB NVMe SSD |\n| **OS** | Ubuntu 22.04 LTS | Ubuntu 22.04 LTS |\n| **Network** | 100 Mbps | 1 Gbps |\n\n## üîå Port Configuration\n\nThe ports are dynamically configured based on your chosen prefix. Here's how they work:\n\n| Service | Port Formula | Example (prefix=26) | Example (prefix=56) |\n|---------|--------------|---------------------|---------------------|\n| Story P2P | `${STORY_PORT}656` | 26656 | 56656 |\n| Story RPC | `${STORY_PORT}657` | 26657 | 56657 |\n| Story API | `${STORY_PORT}317` | 26317 | 56317 |\n| Story Prometheus | `${STORY_PORT}660` | 26660 | 56660 |\n| Story-Geth P2P | `${STORY_PORT}303` | 26303 | 56303 |\n| Story-Geth RPC | `${STORY_PORT}545` | 26545 | 56545 |\n| Story-Geth WS | `${STORY_PORT}546` | 26546 | 56546 |\n| Story-Geth Auth | `${STORY_PORT}551` | 26551 | 56551 |\n| Story-Geth Metrics | `${STORY_PORT}060` | 26060 | 56060 |\n\n:::tip\nChoose a unique port prefix to avoid conflicts with other services running on your server. Common choices are 26, 56, 62, etc.\n:::\n\n## Operating System Preparation\n\nBefore starting, ensure your Ubuntu 22.04 LTS system is up to date:\n\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Check Ubuntu version\nlsb_release -a\n```"
        },
        {
          "id": "quick-installation",
          "title": "Quick Installation Script",
          "type": "page",
          "content": "# ‚ö° Quick Installation Script\n\nFor experienced users who want to get started quickly, here's a complete installation script:\n\n```bash\n#!/bin/bash\n# Story Protocol Quick Installation Script\n# For Ubuntu 22.04 LTS\n\nset -e\n\n# Set your moniker (node name)\nread -p \"Enter your node name (moniker): \" STORY_MONIKER\nread -p \"Enter your desired port prefix (e.g., 26): \" STORY_PORT\n\necho \"Installing Story Protocol node with:\"\necho \"  Moniker: $STORY_MONIKER\"\necho \"  Port Prefix: $STORY_PORT\"\nread -p \"Continue? (y/n) \" -n 1 -r\necho\nif [[ ! $REPLY =~ ^[Yy]$ ]]; then\n    exit 1\nfi\n\n# Update system\nsudo apt update && sudo apt upgrade -y\nsudo apt install -y curl git wget htop tmux build-essential jq make lz4 gcc unzip aria2\n\n# Install Go 1.22.11\ncd $HOME\nwget \"https://golang.org/dl/go1.22.11.linux-amd64.tar.gz\"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf \"go1.22.11.linux-amd64.tar.gz\"\nrm \"go1.22.11.linux-amd64.tar.gz\"\n\n# Set environment variables\necho \"export PATH=$PATH:/usr/local/go/bin:~/go/bin\" >> ~/.bash_profile\necho \"export STORY_MONIKER=\\\"$STORY_MONIKER\\\"\" >> ~/.bash_profile\necho \"export STORY_PORT=\\\"$STORY_PORT\\\"\" >> ~/.bash_profile\nsource ~/.bash_profile\n\n# Install Story-Geth\ncd $HOME\nrm -rf story-geth\ngit clone https://github.com/piplabs/story-geth.git\ncd story-geth\ngit checkout v1.1.1\ngo build -v ./cmd/geth\nmv ./geth $HOME/go/bin/story-geth\n\n# Install Story\ncd $HOME\nrm -rf story\ngit clone https://github.com/piplabs/story\ncd story\ngit checkout v1.3.0\ngo build -o story ./client\nmv ./story $HOME/go/bin/story\n\n# Initialize node\nstory init --moniker $STORY_MONIKER --network aeneid\n\n# Download genesis and addrbook\nwget -O $HOME/.story/story/config/genesis.json https://raw.githubusercontent.com/coinsspor/Story-Aeneid/refs/heads/main/genesis.json\nwget -O $HOME/.story/story/config/addrbook.json https://raw.githubusercontent.com/coinsspor/Story-Aeneid/refs/heads/main/addrbook.json\n\necho \"‚úÖ Installation complete!\"\necho \"Next steps:\"\necho \"1. Configure your node (see Configuration section)\"\necho \"2. Set up Cosmovisor (see Cosmovisor Setup section)\"\necho \"3. Start your services (see Start Services section)\"\n```\n\n:::warning\nThis script will install all components with default settings. For production use, review each step and customize as needed.\n:::"
        }
      ]
    },
    {
      "id": "installation",
      "title": "Installation",
      "icon": "üîß",
      "type": "section",
      "children": [
        {
          "id": "install-dependencies",
          "title": "Install Dependencies",
          "type": "page",
          "content": "# üì¶ Install Dependencies\n\n## Step 1: System Preparation\n\nFirst, update your system and install required packages:\n\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install dependencies\nsudo apt install -y curl git wget htop tmux build-essential jq make lz4 gcc unzip aria2\n```\n\n## Step 2: Install Go 1.22.11\n\nStory Protocol requires Go version 1.22.11:\n\n```bash\ncd $HOME\nVER=\"1.22.11\"\nwget \"https://golang.org/dl/go$VER.linux-amd64.tar.gz\"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf \"go$VER.linux-amd64.tar.gz\"\nrm \"go$VER.linux-amd64.tar.gz\"\n\n# Add to PATH\necho \"export PATH=$PATH:/usr/local/go/bin:~/go/bin\" >> ~/.bash_profile\nsource ~/.bash_profile\n\n# Verify installation\ngo version\n```\n\n:::tip\nYou can request testnet tokens from the faucet once every 24 hours.\n:::"
        }
      ]
    },
    {
      "id": "resources",
      "title": "Resources",
      "icon": "üì°",
      "type": "section",
      "children": [
        {
          "id": "endpoints",
          "title": "Endpoints & APIs",
          "type": "page",
          "content": "# üì° Endpoints & Resources\n\n## üåü Coinsspor Endpoints\n\n| Service | Endpoint | Type |\n|---------|----------|------|\n| üîπ **Cosmos RPC** | [https://story-aeneid-testnet-rpc.coinsspor.com](https://story-aeneid-testnet-rpc.coinsspor.com) | REST API |\n| üîπ **Cosmos WebSocket** | [wss://story-aeneid-testnet-rpc.coinsspor.com/websocket](wss://story-aeneid-testnet-rpc.coinsspor.com/websocket) | WebSocket |\n| üîπ **Cosmos REST API** | [https://story-aeneid-testnet-api.coinsspor.com](https://story-aeneid-testnet-api.coinsspor.com) | REST API |\n| üü£ **EVM RPC** | [https://story-aeneid-testnet-evm.coinsspor.com](https://story-aeneid-testnet-evm.coinsspor.com) | JSON-RPC |\n| üü£ **EVM WebSocket** | [wss://story-aeneid-testnet-evm.coinsspor.com](wss://story-aeneid-testnet-evm.coinsspor.com) | WebSocket |\n\n## üåê Official Resources\n\n| Resource | Link | Description |\n|----------|------|-------------|\n| **Chain ID** | `1315` | Aeneid Testnet Chain ID |\n| **Official RPC** | [https://aeneid.storyrpc.io](https://aeneid.storyrpc.io) | Official RPC Endpoint |\n| **Explorer** | [https://aeneid.storyscan.io](https://aeneid.storyscan.io) | Block Explorer |\n| **IP Explorer** | [https://aeneid.explorer.story.foundation](https://aeneid.explorer.story.foundation) | IP Explorer |\n| **Faucet** | [https://faucet.story.foundation](https://faucet.story.foundation) | Testnet Faucet |\n\n## üõ†Ô∏è Development Resources\n\n| Resource | Link | Description |\n|----------|------|-------------|\n| **Story Geth Releases** | [https://github.com/piplabs/story-geth/releases](https://github.com/piplabs/story-geth/releases) | Latest Releases |\n| **Story Releases** | [https://github.com/piplabs/story/releases](https://github.com/piplabs/story/releases) | Latest Releases |\n| **Documentation** | [https://docs.story.foundation](https://docs.story.foundation) | Official Docs |\n| **GitHub** | [https://github.com/piplabs](https://github.com/piplabs) | Source Code |\n\n## Using Custom Endpoints\n\nTo use Coinsspor endpoints instead of official ones:\n\n```bash\n# For RPC calls\ncurl -s https://story-aeneid-testnet-rpc.coinsspor.com/status | jq\n\n# For API calls\ncurl -s https://story-aeneid-testnet-api.coinsspor.com/cosmos/base/tendermint/v1beta1/blocks/latest | jq\n\n# For EVM calls\ncurl -X POST https://story-aeneid-testnet-evm.coinsspor.com \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n```"
        },
        {
          "id": "useful-commands",
          "title": "Useful Commands",
          "type": "page",
          "content": "# üîß Useful Commands\n\n## Service Management\n\n```bash\n# View logs\nsudo journalctl -u story -f -o cat\nsudo journalctl -u story-geth -f -o cat\n\n# View last 100 lines\nsudo journalctl -u story -n 100 --no-pager\nsudo journalctl -u story-geth -n 100 --no-pager\n\n# Restart services\nsudo systemctl restart story\nsudo systemctl restart story-geth\n\n# Stop services\nsudo systemctl stop story story-geth\n\n# Start services\nsudo systemctl start story-geth\nsleep 5\nsudo systemctl start story\n\n# Check service status\nsudo systemctl status story\nsudo systemctl status story-geth\n```\n\n## Node Information\n\n```bash\n# Get node ID\ncurl localhost:${STORY_PORT}657/status | jq '.result.node_info.id'\n\n# Get validator address\nstory status 2>&1 | jq '.ValidatorInfo.address'\n\n# Check validator status\ncurl localhost:${STORY_PORT}657/validators | jq '.result.validators[] | select(.address==\"YOUR_VALIDATOR_ADDRESS\")'\n\n# Check node sync info\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info'\n\n# Check number of connected peers\ncurl -s localhost:${STORY_PORT}657/net_info | jq '.result.n_peers'\n\n# List all peers with details\ncurl -s localhost:${STORY_PORT}657/net_info | jq -r '.result.peers[] | \"\\(.node_info.id)@\\(.remote_ip):\\(.node_info.listen_addr | capture(\":(?<port>[0-9]+)$\").port) - \\(.node_info.moniker)\"'\n```\n\n## Backup Commands\n\n```bash\n# Backup validator keys\ncp $HOME/.story/story/config/priv_validator_key.json $HOME/priv_validator_key_backup.json\ncp $HOME/.story/story/config/node_key.json $HOME/node_key_backup.json\n\n# Backup all config\ntar -czf story_config_backup.tar.gz $HOME/.story/story/config/\n\n# Restore from backup\ntar -xzf story_config_backup.tar.gz -C $HOME/.story/story/\n```\n\n## Disk Usage Management\n\n```bash\n# Check disk usage\ndf -h\ndu -sh $HOME/.story/*\n\n# Clean old logs\nsudo journalctl --vacuum-time=3d\n\n# Find large files\nfind $HOME/.story -name \"*.log\" -size +100M\n```\n\n## Network Diagnostics\n\n```bash\n# Test RPC connectivity\ncurl -s localhost:${STORY_PORT}657/health\n\n# Check listening ports\nsudo netstat -tulpn | grep -E \"story|geth\"\n\n# Test peer connectivity\nnc -zv PEER_IP PEER_PORT\n```"
        }
      ]
    },
    {
      "id": "troubleshooting",
      "title": "Troubleshooting",
      "icon": "üîç",
      "type": "section",
      "children": [
        {
          "id": "common-issues",
          "title": "Common Issues",
          "type": "page",
          "content": "# üö® Common Issues and Solutions\n\n## Node Not Syncing\n\n**Symptoms:**\n- Node stuck at same block height\n- `catching_up: true` for extended periods\n- No new blocks being processed\n\n**Solutions:**\n```bash\n# Check current sync status\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info'\n\n# Check peer connections\ncurl localhost:${STORY_PORT}657/net_info | jq '.result.n_peers'\n\n# Get fresh peers and restart\n./get_fresh_peers.sh\n\n# Restart services\nsudo systemctl restart story story-geth\n\n# Check if geth is syncing\nstory-geth --exec \"eth.syncing\" attach ~/.story/geth/aeneid/geth.ipc\n```\n\n## Disk Space Issues\n\n**Symptoms:**\n- Services crashing due to disk space\n- `No space left on device` errors\n- Node stops syncing\n\n**Solutions:**\n```bash\n# Check disk usage\ndf -h\ndu -sh $HOME/.story/*\n\n# Clean old logs\nsudo journalctl --vacuum-time=3d\n\n# Prune geth data (CAUTION: Will require re-sync)\nsudo systemctl stop story-geth\nstory-geth --datadir ~/.story/geth/aeneid removedb\nsudo systemctl start story-geth\n\n# Check for large log files\nfind $HOME/.story -name \"*.log\" -size +100M\n```\n\n## Port Conflicts\n\n**Symptoms:**\n- Services fail to start\n- `Address already in use` errors\n- Cannot bind to port\n\n**Solutions:**\n```bash\n# Check what's using your ports\nsudo netstat -tulpn | grep :${STORY_PORT}657  # RPC\nsudo netstat -tulpn | grep :${STORY_PORT}656  # P2P\nsudo netstat -tulpn | grep :${STORY_PORT}545  # Geth RPC\n\n# Kill conflicting processes\nsudo kill -9 PID_NUMBER\n\n# Change port prefix if needed\necho \"export STORY_PORT=\\\"56\\\"\" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n\n# Reconfigure ports\nsed -i.bak -e \"s%:26657%:${STORY_PORT}657%g\" $HOME/.story/story/config/config.toml\n```\n\n## Service Won't Start\n\n**Symptoms:**\n- `systemctl start` fails\n- Service shows `failed` status\n- Immediate crashes\n\n**Solutions:**\n```bash\n# Check service status and logs\nsudo systemctl status story\nsudo systemctl status story-geth\n\n# Check recent logs for errors\nsudo journalctl -u story -n 50 --no-pager\nsudo journalctl -u story-geth -n 50 --no-pager\n\n# Check binary permissions\nls -la $HOME/go/bin/story*\nchmod +x $HOME/go/bin/story\nchmod +x $HOME/go/bin/story-geth\n\n# Verify environment variables\necho \"DAEMON_HOME: $DAEMON_HOME\"\necho \"STORY_PORT: $STORY_PORT\"\n\n# Test binary manually\n$HOME/go/bin/story version\n```"
        },
        {
          "id": "advanced-troubleshooting",
          "title": "Advanced Troubleshooting",
          "type": "page",
          "content": "# üîß Advanced Troubleshooting\n\n## Cosmovisor Issues\n\n**Symptoms:**\n- Upgrades not working\n- Binary not found errors\n- Version mismatches\n\n**Solutions:**\n```bash\n# Check cosmovisor setup\ncosmovisor version\nls -la $DAEMON_HOME/cosmovisor/\n\n# Verify current binary\nls -la $DAEMON_HOME/cosmovisor/current/bin/\n\n# Check upgrade directory\nls -la $DAEMON_HOME/cosmovisor/upgrades/\n\n# Reset to genesis binary\ncp $HOME/go/bin/story $DAEMON_HOME/cosmovisor/genesis/bin/\n\n# Check environment\nenv | grep DAEMON\n```\n\n## Validator Issues\n\n**Symptoms:**\n- Not signing blocks\n- Validator offline\n- Missing attestations\n\n**Solutions:**\n```bash\n# Check validator status\ncurl localhost:${STORY_PORT}657/status | jq '.result.validator_info'\n\n# Verify validator key\nls -la $HOME/.story/story/config/priv_validator_key.json\n\n# Check if node is synced\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info.catching_up'\n\n# Monitor validator performance\ncurl localhost:${STORY_PORT}657/validators | jq '.result.validators[] | select(.address==\"YOUR_VALIDATOR_ADDRESS\")'\n\n# Restart if needed\nsudo systemctl restart story\n```\n\n## Complete Node Reset\n\n:::warning\n**WARNING**: This will delete all data and require full re-sync!\n:::\n\n```bash\n# ‚ö†Ô∏è WARNING: This will delete ALL node data!\necho \"‚ö†Ô∏è WARNING: This will delete ALL node data!\"\necho \"Make sure you have backed up your validator keys!\"\nread -p \"Continue? (y/N): \" confirm\n\nif [ \"$confirm\" = \"y\" ]; then\n    # Stop services\n    sudo systemctl stop story story-geth\n    \n    # Backup validator keys\n    cp $HOME/.story/story/config/priv_validator_key.json $HOME/validator_key_backup.json\n    cp $HOME/.story/story/config/node_key.json $HOME/node_key_backup.json\n    \n    # Remove data directories\n    rm -rf $HOME/.story/story/data\n    rm -rf $HOME/.story/geth/aeneid/geth/chaindata\n    \n    # Reinitialize\n    story init --moniker $STORY_MONIKER --network aeneid\n    \n    # Restore keys\n    cp $HOME/validator_key_backup.json $HOME/.story/story/config/priv_validator_key.json\n    cp $HOME/node_key_backup.json $HOME/.story/story/config/node_key.json\n    \n    # Restart services\n    sudo systemctl start story-geth\n    sleep 5\n    sudo systemctl start story\n    \n    echo \"‚úÖ Node reset complete. Monitor sync with: ./monitor.sh\"\nfi\n```\n\n## Network Connectivity Test\n\n```bash\n# Test network connectivity\ncat > $HOME/network_test.sh << 'EOF'\n#!/bin/bash\n\necho \"üåê Network Connectivity Test\"\necho \"==========================\"\n\n# Test RPC endpoints\necho \"Testing RPC endpoints...\"\ncurl -s --max-time 5 https://aeneid.storyrpc.io/status >/dev/null && echo \"‚úÖ Official RPC: OK\" || echo \"‚ùå Official RPC: Failed\"\ncurl -s --max-time 5 https://story-aeneid-testnet-rpc.coinsspor.com/status >/dev/null && echo \"‚úÖ Coinsspor RPC: OK\" || echo \"‚ùå Coinsspor RPC: Failed\"\n\n# Test local services\necho \"\"\necho \"Testing local services...\"\ncurl -s --max-time 5 localhost:${STORY_PORT}657/status >/dev/null && echo \"‚úÖ Local Story RPC: OK\" || echo \"‚ùå Local Story RPC: Failed\"\ncurl -s --max-time 5 localhost:${STORY_PORT}545 -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' >/dev/null && echo \"‚úÖ Local Geth RPC: OK\" || echo \"‚ùå Local Geth RPC: Failed\"\n\n# Test DNS resolution\necho \"\"\necho \"Testing DNS resolution...\"\nnslookup aeneid.storyrpc.io >/dev/null && echo \"‚úÖ DNS Resolution: OK\" || echo \"‚ùå DNS Resolution: Failed\"\n\necho \"==========================\"\nEOF\n\nchmod +x $HOME/network_test.sh\n./network_test.sh\n```"
        },
        {
          "id": "emergency-procedures",
          "title": "Emergency Procedures",
          "type": "page",
          "content": "# üÜò Emergency Procedures\n\n## Emergency Validator Recovery\n\n```bash\n# If validator is offline and you need quick recovery\necho \"üÜò Emergency Validator Recovery\"\n\n# 1. Check if keys exist\nif [ ! -f \"$HOME/.story/story/config/priv_validator_key.json\" ]; then\n    echo \"‚ùå Validator key not found! Restore from backup immediately!\"\n    exit 1\nfi\n\n# 2. Force restart everything\nsudo systemctl stop story story-geth\nsleep 5\nsudo systemctl start story-geth\nsleep 10\nsudo systemctl start story\n\n# 3. Monitor recovery\necho \"üìä Monitoring recovery...\"\nfor i in {1..30}; do\n    CATCHING_UP=$(curl -s localhost:${STORY_PORT}657/status | jq -r '.result.sync_info.catching_up')\n    echo \"Attempt $i/30 - Catching up: $CATCHING_UP\"\n    if [ \"$CATCHING_UP\" = \"false\" ]; then\n        echo \"‚úÖ Node synced! Checking validator status...\"\n        break\n    fi\n    sleep 10\ndone\n```\n\n## Double Sign Protection\n\nIf you're migrating your validator to a new server:\n\n```bash\n# On OLD server - STOP the validator first!\nsudo systemctl stop story story-geth\n\n# Backup priv_validator_state.json (contains last signed height)\ncp $HOME/.story/story/data/priv_validator_state.json $HOME/priv_validator_state_backup.json\n\n# Transfer keys and state to NEW server\nscp $HOME/.story/story/config/priv_validator_key.json user@new-server:~/\nscp $HOME/.story/story/config/node_key.json user@new-server:~/\nscp $HOME/priv_validator_state_backup.json user@new-server:~/\n\n# On NEW server - restore with state\ncp ~/priv_validator_key.json $HOME/.story/story/config/\ncp ~/node_key.json $HOME/.story/story/config/\ncp ~/priv_validator_state_backup.json $HOME/.story/story/data/priv_validator_state.json\n\n# Start services on NEW server\nsudo systemctl start story-geth\nsleep 5\nsudo systemctl start story\n```\n\n:::danger\n**CRITICAL**: Never run the same validator on two servers simultaneously! This will cause double signing and result in slashing.\n:::\n\n## Log Analysis Commands\n\n```bash\n# Monitor real-time logs\nsudo journalctl -u story -f\nsudo journalctl -u story-geth -f\n\n# Check for specific errors\nsudo journalctl -u story --since \"1 hour ago\" | grep -i error\nsudo journalctl -u story-geth --since \"1 hour ago\" | grep -i error\n\n# Check connection issues\nsudo journalctl -u story --since \"1 hour ago\" | grep -i \"peer\\|connection\"\n\n# Monitor resource usage\nhtop\niostat -x 1\n```\n\n## Emergency Contact Information\n\n```bash\necho \"üÜò Emergency Support Contacts:\"\necho \"==============================\"\necho \"Discord: https://discord.gg/storyprotocol\"\necho \"Telegram: https://t.me/storyprotocol\"\necho \"GitHub Issues: https://github.com/piplabs/story/issues\"\necho \"Coinsspor Support: https://t.me/coinsspor\"\necho \"==============================\"\n```"
        },
        {
          "id": "complete-removal",
          "title": "Complete Node Removal",
          "type": "page",
          "content": "# üßπ Complete Node Removal\n\nIf you need to completely remove the Story node from your server:\n\n```bash\n# Stop services\nsudo systemctl stop story story-geth\nsudo systemctl disable story story-geth\n\n# Remove service files\nsudo rm /etc/systemd/system/story.service\nsudo rm /etc/systemd/system/story-geth.service\nsudo systemctl daemon-reload\n\n# Backup important files before removal\ncp $HOME/.story/story/config/priv_validator_key.json $HOME/\ncp $HOME/.story/story/config/node_key.json $HOME/\ncp $HOME/.story/story/config/.env $HOME/\n\n# Remove data directories\nrm -rf $HOME/.story\nrm -rf $HOME/story\nrm -rf $HOME/story-geth\n\n# Remove binaries\nrm $HOME/go/bin/story\nrm $HOME/go/bin/story-geth\nrm $HOME/go/bin/cosmovisor\n\n# Remove environment variables\nsed -i '/STORY_MONIKER/d' $HOME/.bash_profile\nsed -i '/STORY_PORT/d' $HOME/.bash_profile\nsed -i '/DAEMON_NAME/d' $HOME/.bash_profile\nsed -i '/DAEMON_HOME/d' $HOME/.bash_profile\nsed -i '/DAEMON_DATA_BACKUP_DIR/d' $HOME/.bash_profile\nsed -i '/DAEMON_ALLOW_DOWNLOAD_BINARIES/d' $HOME/.bash_profile\nsed -i '/DAEMON_RESTART_AFTER_UPGRADE/d' $HOME/.bash_profile\n\n# Remove helper scripts\nrm -f $HOME/monitor.sh\nrm -f $HOME/get_fresh_peers.sh\nrm -f $HOME/performance_monitor.sh\nrm -f $HOME/network_test.sh\n\necho \"‚úÖ Story node completely removed\"\necho \"‚ö†Ô∏è  Validator keys backed up in $HOME directory\"\n```\n\n:::warning\n**Important**: Always backup your validator keys before removing the node!\n:::"
        }
      ]
    },
    {
      "id": "upgrades",
      "title": "Upgrades",
      "icon": "üîÑ",
      "type": "section",
      "children": [
        {
          "id": "upgrade-announcements",
          "title": "Where to Follow Upgrades",
          "type": "page",
          "content": "# üì° Where to Follow Upgrade Announcements\n\n## 1. **Official GitHub Releases** (Primary Source)\n- **Story Consensus Client:** [https://github.com/piplabs/story/releases](https://github.com/piplabs/story/releases)\n- **Story-Geth Execution Client:** [https://github.com/piplabs/story-geth/releases](https://github.com/piplabs/story-geth/releases)\n\n## 2. **Official Documentation** \n- **Release Notes:** [https://docs.story.foundation/network/releases](https://docs.story.foundation/network/releases)\n- **Node Upgrade Guide:** [https://docs.story.foundation/network/operate/upgrade](https://docs.story.foundation/network/operate/upgrade)\n\n## 3. **Community Channels**\n- **Discord:** [https://discord.gg/storyprotocol](https://discord.gg/storyprotocol) (announcements channel)\n- **Telegram:** [https://t.me/storyprotocol](https://t.me/storyprotocol) (official announcements)\n- **Twitter/X:** [@Story_Protocol](https://twitter.com/Story_Protocol) (follow for upgrade alerts)\n\n## Upgrade Types and Urgency\n\n| Type | Description | Action Required | Timeline |\n|------|-------------|-----------------|----------|\n| **Major** | Hard fork upgrade with block height | **MANDATORY** before block height | Usually 1-2 weeks notice |\n| **Minor** | Bug fixes, improvements | **RECOMMENDED** ASAP | Deploy within 24-48 hours |\n| **Critical** | Security fixes | **URGENT** | Deploy immediately |\n| **Optional** | Performance improvements | Optional | Deploy when convenient |\n\n## ‚ö†Ô∏è **Important: Why Build from Source?**\n\n**Pre-compiled binaries on GitHub are built with Ubuntu 24.04** and may not work properly on Ubuntu 22.04 due to library dependencies. **Building from source ensures compatibility** with your system.\n\n### ‚ùå **Pre-compiled Binaries Issue**\n- Built for Ubuntu 24.04\n- Different glibc versions\n- Library dependency conflicts\n- May cause crashes or failures\n\n### ‚úÖ **Build from Source (Required for Ubuntu 22.04)**\n- **Full compatibility** with your system\n- **Correct library linking**\n- **Stable operation**\n- **No dependency issues**\n\n:::warning\nAlways build from source on Ubuntu 22.04 to avoid compatibility issues!\n:::"
        }
      ]
    },
    {
      "id": "support",
      "title": "Support",
      "icon": "üìû",
      "type": "section",
      "children": [
        {
          "id": "community",
          "title": "Community & Support",
          "type": "page",
          "content": "# üìû Support & Community\n\n## Official Channels\n\n| Platform | Link | Description |\n|----------|------|-------------|\n| **Discord** | [https://discord.gg/storyprotocol](https://discord.gg/storyprotocol) | Community Support |\n| **Telegram** | [https://t.me/storyprotocol](https://t.me/storyprotocol) | Official Announcements |\n| **Documentation** | [https://docs.story.foundation](https://docs.story.foundation) | Technical Documentation |\n| **GitHub** | [https://github.com/piplabs](https://github.com/piplabs) | Source Code & Issues |\n\n## Coinsspor Resources\n\n| Resource | Link | Description |\n|----------|------|-------------|\n| **Website** | [https://coinsspor.com](https://coinsspor.com) | Main Website |\n| **Telegram** | [https://t.me/coinsspor](https://t.me/coinsspor) | Support Channel |\n| **GitHub** | [https://github.com/coinsspor](https://github.com/coinsspor) | Scripts & Tools |\n| **Competition Tracker** | [https://storytable.coinsspor.com](https://storytable.coinsspor.com) | Validator Stats |\n\n## Getting Help\n\n### Before Asking for Help:\n\n1. **Check the logs**\n   ```bash\n   sudo journalctl -u story -n 100 --no-pager\n   sudo journalctl -u story-geth -n 100 --no-pager\n   ```\n\n2. **Check sync status**\n   ```bash\n   curl localhost:${STORY_PORT}657/status | jq '.result.sync_info'\n   ```\n\n3. **Check service status**\n   ```bash\n   sudo systemctl status story\n   sudo systemctl status story-geth\n   ```\n\n4. **Review this documentation**\n\n### When Asking for Help, Provide:\n\n- Node version (`story version`)\n- Operating system (`lsb_release -a`)\n- Error messages from logs\n- Sync status\n- What you've already tried\n\n## Contributing\n\nFound an issue or want to improve this guide?\n\n- Report issues on GitHub\n- Submit pull requests with improvements\n- Share your experience in the community\n\n---\n\n## üéØ Quick Start Summary\n\n1. **üîß Install dependencies and Go 1.22.11**\n2. **‚öôÔ∏è Set moniker and port prefix variables**\n3. **üèóÔ∏è Build story-geth v1.1.1 and story v1.3.0**\n4. **üîÑ Setup Cosmovisor for automatic upgrades**\n5. **üåê Initialize node for Aeneid testnet**\n6. **üì° Configure dynamic ports, peers, and monitoring**\n7. **üöÄ Create and start systemd services**\n8. **‚è≥ Wait for sync completion**\n9. **üèÜ Create validator with 1024+ IP stake**\n10. **üìä Monitor performance and participate in competition**\n\n---\n\n**üöÄ Good luck with your Story Protocol validator! üöÄ**\n\n---\n\n*This guide is maintained by the [Coinsspor](https://coinsspor.com) team. For updates and support, visit our endpoints and community channels.*"
        }
      ]
    }
  ],
  "lastUpdated": "2024-12-20T00:00:00Z",
  "projectId": "story-protocol"
} should see `go version go1.22.11 linux/amd64` after running the verify command.\n:::\n\n## Step 3: Set Variables and Port Configuration\n\nSet up your node name and port configuration:\n\n```bash\n# Set your moniker (node name)\necho \"export STORY_MONIKER=\\\"YourNodeName\\\"\" >> $HOME/.bash_profile\n\n# Set port prefix (change this to your desired prefix, e.g., 26, 56, 62, etc.)\necho \"export STORY_PORT=\\\"26\\\"\" >> $HOME/.bash_profile\n\nsource $HOME/.bash_profile\n\n# Verify variables\necho \"Moniker: $STORY_MONIKER\"\necho \"Port Prefix: $STORY_PORT\"\n```\n\n:::warning\nReplace `YourNodeName` with your actual desired node name. Choose a unique name that identifies your validator.\n:::"
        },
        {
          "id": "install-story-geth",
          "title": "Install Story-Geth",
          "type": "page",
          "content": "# ‚öôÔ∏è Install Story-Geth (Execution Client)\n\nStory-Geth is the execution layer client for Story Protocol.\n\n## Build from Source\n\n```bash\ncd $HOME\nrm -rf story-geth\ngit clone https://github.com/piplabs/story-geth.git\ncd story-geth\ngit checkout v1.1.1\ngo build -v ./cmd/geth\nmv ./geth $HOME/go/bin/story-geth\n\n# Verify installation\nstory-geth version\n```\n\n:::info\n**Current Version:** v1.1.1\n\nStory-Geth is a modified version of go-ethereum (geth) optimized for Story Protocol.\n:::\n\n## What is Story-Geth?\n\nStory-Geth handles:\n- Transaction execution\n- Smart contract deployment and execution\n- State management\n- EVM compatibility\n\n## Verify Installation\n\nAfter installation, verify the binary is working:\n\n```bash\n# Check version\nstory-geth version\n\n# Check binary location\nwhich story-geth\n```\n\nYou should see output similar to:\n```\nVersion: 1.1.1-stable\nGit Commit: [commit hash]\nArchitecture: amd64\nGo Version: go1.22.11\nOperating System: linux\n```"
        },
        {
          "id": "install-story",
          "title": "Install Story",
          "type": "page",
          "content": "# üìö Install Story (Consensus Client)\n\nStory is the consensus layer client for Story Protocol.\n\n## Build from Source\n\n```bash\ncd $HOME\nrm -rf story\ngit clone https://github.com/piplabs/story\ncd story\ngit checkout v1.3.0\ngo build -o story ./client \nmv ./story $HOME/go/bin/story\n\n# Verify installation\nstory version\n```\n\n:::info\n**Current Version:** v1.3.0\n\nStory handles consensus, block production, and validator management.\n:::\n\n## Initialize Node\n\nAfter installing the Story binary, initialize your node:\n\n```bash\n# Initialize the node\nstory init --moniker $STORY_MONIKER --network aeneid\n\n# Create necessary directories\nmkdir -p $HOME/.story/story\nmkdir -p $HOME/.story/geth\n```\n\n## What Does Initialization Do?\n\nThe initialization process:\n1. Creates the `.story` directory structure\n2. Generates node keys\n3. Creates default configuration files\n4. Sets up the network parameters for Aeneid testnet\n5. Prepares validator keys (if applicable)\n\n## Verify Initialization\n\nCheck that initialization was successful:\n\n```bash\n# List created files\nls -la $HOME/.story/story/config/\nls -la $HOME/.story/geth/\n\n# Check node key was created\ncat $HOME/.story/story/config/node_key.json | jq '.id'\n```"
        }
      ]
    },
    {
      "id": "cosmovisor",
      "title": "Cosmovisor Setup",
      "icon": "üîÑ",
      "type": "section",
      "children": [
        {
          "id": "cosmovisor-installation",
          "title": "Install Cosmovisor",
          "type": "page",
          "content": "# üîÑ Cosmovisor Setup\n\nCosmovisor is a process manager for Cosmos SDK applications that automates binary upgrades.\n\n## Why Use Cosmovisor?\n\n- **Automatic Upgrades**: No manual intervention needed during chain upgrades\n- **Zero Downtime**: Seamless binary swaps at upgrade heights\n- **Backup Management**: Automatic backup before upgrades\n- **Version Control**: Easy rollback if issues occur\n\n## Step 1: Install Cosmovisor\n\n```bash\n# Install Cosmovisor\ngo install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@v1.6.0\n\n# Verify installation\ncosmovisor version\n```\n\n## Step 2: Configure Cosmovisor Environment\n\n```bash\n# Set environment variables\necho \"export DAEMON_NAME=story\" >> $HOME/.bash_profile\necho \"export DAEMON_HOME=$HOME/.story/story\" >> $HOME/.bash_profile\necho \"export DAEMON_DATA_BACKUP_DIR=$DAEMON_HOME/cosmovisor/backup\" >> $HOME/.bash_profile\necho \"export DAEMON_ALLOW_DOWNLOAD_BINARIES=false\" >> $HOME/.bash_profile\necho \"export DAEMON_RESTART_AFTER_UPGRADE=true\" >> $HOME/.bash_profile\n\nsource $HOME/.bash_profile\n```\n\n## Step 3: Initialize Cosmovisor with Current Binary\n\n```bash\n# Initialize cosmovisor with story binary\ncosmovisor init $(which story)\n\n# Create backup directory\nmkdir -p $DAEMON_HOME/cosmovisor/backup\n\n# Set proper permissions\nsudo chown -R $USER:$USER $HOME/.story\n```\n\n## Directory Structure\n\nAfter setup, your Cosmovisor directory structure should look like:\n\n```\n$HOME/.story/story/cosmovisor/\n‚îú‚îÄ‚îÄ current -> genesis or upgrades/<name>\n‚îú‚îÄ‚îÄ genesis\n‚îÇ   ‚îî‚îÄ‚îÄ bin\n‚îÇ       ‚îî‚îÄ‚îÄ story\n‚îú‚îÄ‚îÄ upgrades\n‚îÇ   ‚îî‚îÄ‚îÄ <upgrade-name>\n‚îÇ       ‚îú‚îÄ‚îÄ bin\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ story\n‚îÇ       ‚îî‚îÄ‚îÄ upgrade-info.json\n‚îî‚îÄ‚îÄ backup\n    ‚îî‚îÄ‚îÄ <backup-files>\n```\n\n:::tip\nCosmovisor will automatically handle upgrades when the chain reaches the designated upgrade height. No manual intervention required!\n:::"
        },
        {
          "id": "cosmovisor-upgrades",
          "title": "Managing Upgrades",
          "type": "page",
          "content": "# üöÄ Managing Upgrades with Cosmovisor\n\n## Automatic Upgrade Setup\n\nWhen a new upgrade is announced, use this script to prepare:\n\n```bash\n# Get the latest release tag\nLATEST_VERSION=$(curl -s https://api.github.com/repos/piplabs/story/releases/latest | jq -r '.tag_name')\necho \"Latest version: $LATEST_VERSION\"\n\n# ‚ö†Ô∏è IMPORTANT: Set the upgrade height from official announcement\nUPGRADE_HEIGHT=\"REPLACE_WITH_ACTUAL_HEIGHT\"  # Example: 2065886\n\necho \"‚ö†Ô∏è CRITICAL: Replace UPGRADE_HEIGHT with actual height from announcement!\"\necho \"üì° Check official channels for upgrade height\"\n\n# Validate upgrade height is set\nif [ \"$UPGRADE_HEIGHT\" = \"REPLACE_WITH_ACTUAL_HEIGHT\" ]; then\n    echo \"‚ùå ERROR: You must set the actual upgrade height!\"\n    echo \"üìã Current height: $(curl -s localhost:${STORY_PORT}657/status | jq -r '.result.sync_info.latest_block_height')\"\n    exit 1\nfi\n\n# Clone and build the new version\ncd $HOME\nrm -rf story-upgrade\ngit clone https://github.com/piplabs/story story-upgrade\ncd story-upgrade\ngit checkout $LATEST_VERSION\ngo build -o story ./client\n\n# Verify the build\n./story version\n\n# Create upgrade folder\nmkdir -p $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/bin\n\n# Copy built binary to upgrade directory\ncp ./story $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/bin/\n\n# Create upgrade info\necho \"{\\\"name\\\":\\\"$LATEST_VERSION\\\",\\\"time\\\":\\\"0001-01-01T00:00:00Z\\\",\\\"height\\\":$UPGRADE_HEIGHT}\" > $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/upgrade-info.json\n\n# Setup automatic upgrade with Cosmovisor\ncosmovisor add-upgrade $LATEST_VERSION $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/bin/story --force --upgrade-height $UPGRADE_HEIGHT\n\n# Verify setup\necho \"‚úÖ Checking upgrade setup:\"\nls -l $HOME/.story/story/cosmovisor/current\ncat $HOME/.story/story/cosmovisor/upgrades/$LATEST_VERSION/upgrade-info.json\n\n# Show status\nCURRENT_HEIGHT=$(curl -s localhost:${STORY_PORT}657/status | jq -r '.result.sync_info.latest_block_height')\nBLOCKS_REMAINING=$((UPGRADE_HEIGHT - CURRENT_HEIGHT))\necho \"üìä Current Height: $CURRENT_HEIGHT\"\necho \"üéØ Upgrade Height: $UPGRADE_HEIGHT\"  \necho \"‚è≥ Blocks Remaining: $BLOCKS_REMAINING\"\n\necho \"‚úÖ Automatic upgrade scheduled! Monitor with:\"\necho \"sudo journalctl -u story -f\"\n\n# Cleanup\nrm -rf $HOME/story-upgrade\n```\n\n## Manual Upgrade (If Needed)\n\nIf automatic upgrade fails, use manual upgrade:\n\n```bash\n# Stop the service\nsudo systemctl stop story\n\n# Build new version\nLATEST_VERSION=$(curl -s https://api.github.com/repos/piplabs/story/releases/latest | jq -r '.tag_name')\ncd $HOME\ngit clone https://github.com/piplabs/story story-upgrade\ncd story-upgrade\ngit checkout $LATEST_VERSION\ngo build -o story ./client\n\n# Replace the binary\nsudo mv story $HOME/go/bin/story\ncosmovisor init $(which story)\n\n# Start the service\nsudo systemctl start story\n```\n\n:::warning\n**Important**: Always build from source on Ubuntu 22.04. Pre-compiled binaries may have compatibility issues.\n:::"
        }
      ]
    },
    {
      "id": "configuration",
      "title": "Configuration",
      "icon": "‚öôÔ∏è",
      "type": "section",
      "children": [
        {
          "id": "configure-ports",
          "title": "Configure Ports",
          "type": "page",
          "content": "# üîå Configure Ports\n\nConfigure all ports using your chosen prefix to avoid conflicts.\n\n## Configure Story Ports\n\n```bash\n# Configure Story ports using your prefix\nsed -i.bak -e \"s%:1317%:${STORY_PORT}317%g;\ns%:8551%:${STORY_PORT}551%g\" $HOME/.story/story/config/story.toml\n\nsed -i.bak -e \"s%:26658%:${STORY_PORT}658%g;\ns%:26657%:${STORY_PORT}657%g;\ns%:26656%:${STORY_PORT}656%g;\ns%^external_address = \\\"\\\"%external_address = \\\"$(wget -qO- eth0.me):${STORY_PORT}656\\\"%;\ns%:26660%:${STORY_PORT}660%g\" $HOME/.story/story/config/config.toml\n\necho \"‚úÖ Configured ports with prefix: $STORY_PORT\"\necho \"üåê RPC Port: ${STORY_PORT}657\"\necho \"üîó P2P Port: ${STORY_PORT}656\"\necho \"üì° API Port: ${STORY_PORT}317\"\n```\n\n## Port Overview After Configuration\n\nHere's what each port is used for:\n\n| Port | Service | Description |\n|------|---------|-------------|\n| `${STORY_PORT}656` | P2P | Peer-to-peer communication |\n| `${STORY_PORT}657` | RPC | RPC server for queries |\n| `${STORY_PORT}317` | API | REST API endpoint |\n| `${STORY_PORT}660` | Prometheus | Metrics endpoint |\n| `${STORY_PORT}303` | Geth P2P | Geth peer communication |\n| `${STORY_PORT}545` | Geth RPC | Geth JSON-RPC |\n| `${STORY_PORT}546` | Geth WS | Geth WebSocket |\n| `${STORY_PORT}551` | Geth Auth | Authentication RPC |\n| `${STORY_PORT}060` | Geth Metrics | Geth metrics |\n\n## Verify Port Configuration\n\n```bash\n# Check configured ports\ngrep -E \"laddr|address\" $HOME/.story/story/config/config.toml | grep -v \"#\"\ngrep -E \"listen-addr|addr\" $HOME/.story/story/config/story.toml | grep -v \"#\"\n```\n\n:::tip\nMake sure these ports are open in your firewall if you're running a public node.\n:::"
        },
        {
          "id": "configure-peers",
          "title": "Configure Peers",
          "type": "page",
          "content": "# üåê Configure Seeds and Peers\n\n## Static Peers Configuration\n\nConfigure default seeds and peers:\n\n```bash\nSEEDS=\"944e8889ecd7c13623ef1081aae4555d6f525041@b1-b.odyssey-devnet.storyrpc.io:26656\"\nPEERS=\"3b1aaa03f996d619cb2f4230ebace45686ab3b8a@34.140.167.127:26656,36ca8b119bf5851cd1e37060af914cb07dec24f9@34.79.40.193:26656,2a28bd1a6ecb0a1d8ceade599b311d202447d635@193.122.141.78:26656\"\n\nsed -i -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*seeds *=.*/seeds = \\\"$SEEDS\\\"/}\" \\\n       -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*persistent_peers *=.*/persistent_peers = \\\"$PEERS\\\"/}\" $HOME/.story/story/config/config.toml\n```\n\n## üçÄ Fresh Peers Discovery (Recommended)\n\nFor better connectivity and faster sync, use our fresh peer discovery system:\n\n```bash\n# Get fresh peers from Coinsspor RPC\nURL=\"https://story-aeneid-testnet-rpc.coinsspor.com/net_info\"\n\necho \"üîç Discovering fresh peers from Coinsspor RPC...\"\nresponse=$(curl -s $URL)\n\n# Extract active peers with valid IP addresses\nPEERS=$(echo $response | jq -r '.result.peers[] | select(.remote_ip | test(\"^[0-9]{1,3}(\\\\.[0-9]{1,3}){3}$\")) | \"\\(.node_info.id)@\\(.remote_ip):\" + (.node_info.listen_addr | capture(\":(?<port>[0-9]+)$\").port)' | paste -sd \",\" -)\n\nif [ -n \"$PEERS\" ]; then\n    echo \"‚úÖ Found fresh peers: $PEERS\"\n    echo \"üîß Updating config.toml with fresh peers...\"\n    \n    # Update persistent_peers in config.toml\n    sed -i 's|^persistent_peers *=.*|persistent_peers = \"'$PEERS'\"|' $HOME/.story/story/config/config.toml\n    \n    echo \"‚úÖ Fresh peers configured successfully!\"\nelse\n    echo \"‚ö†Ô∏è  No fresh peers found, using default peers\"\nfi\n```\n\n## Create Fresh Peers Script\n\n```bash\n# Create fresh peers function for easy use\ncat > $HOME/get_fresh_peers.sh << 'EOF'\n#!/bin/bash\n\nget_fresh_peers() {\n    echo \"üîç Fetching fresh peers from Coinsspor RPC...\"\n    URL=\"https://story-aeneid-testnet-rpc.coinsspor.com/net_info\"\n    response=$(curl -s $URL)\n    \n    if [ -z \"$response\" ]; then\n        echo \"‚ùå Failed to connect to RPC endpoint\"\n        return 1\n    fi\n    \n    PEERS=$(echo $response | jq -r '.result.peers[] | select(.remote_ip | test(\"^[0-9]{1,3}(\\\\.[0-9]{1,3}){3}$\")) | \"\\(.node_info.id)@\\(.remote_ip):\" + (.node_info.listen_addr | capture(\":(?<port>[0-9]+)$\").port)' | paste -sd \",\" -)\n    \n    if [ -n \"$PEERS\" ]; then\n        echo \"‚úÖ Fresh peers found:\"\n        echo \"$PEERS\" | tr ',' '\\n' | head -10  # Show first 10 peers\n        echo \"\"\n        echo \"üîß Apply these peers? (y/n)\"\n        read -r apply_peers\n        \n        if [ \"$apply_peers\" = \"y\" ] || [ \"$apply_peers\" = \"Y\" ]; then\n            sed -i 's|^persistent_peers *=.*|persistent_peers = \"'$PEERS'\"|' $HOME/.story/story/config/config.toml\n            sudo systemctl restart story\n            echo \"‚úÖ Fresh peers applied and service restarted!\"\n            \n            # Check connection after restart\n            sleep 10\n            peer_count=$(curl -s localhost:${STORY_PORT}657/net_info | jq '.result.n_peers')\n            echo \"üìä Connected to $peer_count peers\"\n        fi\n    else\n        echo \"‚ùå No fresh peers found\"\n    fi\n}\n\n# Run the function\nget_fresh_peers\nEOF\n\nchmod +x $HOME/get_fresh_peers.sh\necho \"‚úÖ Fresh peers script created: $HOME/get_fresh_peers.sh\"\n```\n\n:::tip\nRun `./get_fresh_peers.sh` anytime to update your peer list with active nodes!\n:::"
        },
        {
          "id": "configure-genesis",
          "title": "Download Genesis & Addrbook",
          "type": "page",
          "content": "# üì• Download Genesis and Addrbook\n\n## Download Genesis File\n\nThe genesis file contains the initial state of the blockchain:\n\n```bash\n# Download genesis file from Coinsspor GitHub\nwget -O $HOME/.story/story/config/genesis.json https://raw.githubusercontent.com/coinsspor/Story-Aeneid/refs/heads/main/genesis.json\n\n# Verify genesis file\nif [ -f \"$HOME/.story/story/config/genesis.json\" ]; then\n    genesis_size=$(stat -c%s \"$HOME/.story/story/config/genesis.json\")\n    echo \"‚úÖ Genesis file downloaded successfully (Size: $genesis_size bytes)\"\nelse\n    echo \"‚ùå Genesis download failed\"\n    exit 1\nfi\n\n# Check genesis hash\nsha256sum $HOME/.story/story/config/genesis.json\n```\n\n## Download Addrbook\n\nThe addrbook contains a list of peers for faster discovery:\n\n```bash\n# Download addrbook for faster peer discovery\nwget -O $HOME/.story/story/config/addrbook.json https://raw.githubusercontent.com/coinsspor/Story-Aeneid/refs/heads/main/addrbook.json\n\n# Verify addrbook\nif [ -f \"$HOME/.story/story/config/addrbook.json\" ]; then\n    addrbook_size=$(stat -c%s \"$HOME/.story/story/config/addrbook.json\")\n    echo \"‚úÖ Addrbook downloaded successfully (Size: $addrbook_size bytes)\"\nelse\n    echo \"‚ö†Ô∏è  Addrbook download failed - node will discover peers automatically\"\nfi\n```\n\n## Set Proper Permissions\n\n```bash\n# Set proper permissions\nchmod 644 $HOME/.story/story/config/genesis.json\nchmod 644 $HOME/.story/story/config/addrbook.json\n\necho \"‚úÖ Genesis and addrbook setup completed\"\n```\n\n## Configure Indexer and Prometheus\n\nOptimize node performance:\n\n```bash\n# Enable Prometheus and disable indexer for better performance\nsed -i -e \"s/prometheus = false/prometheus = true/\" $HOME/.story/story/config/config.toml\nsed -i -e \"s/^indexer *=.*/indexer = \\\"null\\\"/\" $HOME/.story/story/config/config.toml\n```\n\n:::info\n**Why disable indexer?**\nDisabling the indexer reduces disk usage and improves sync performance. Only enable if you need to query historical transactions.\n:::"
        }
      ]
    },
    {
      "id": "services",
      "title": "System Services",
      "icon": "üîß",
      "type": "section",
      "children": [
        {
          "id": "create-services",
          "title": "Create Services",
          "type": "page",
          "content": "# üîß Create System Services\n\n## Story-Geth Service\n\nCreate the Story-Geth systemd service:\n\n```bash\nsudo tee /etc/systemd/system/story-geth.service > /dev/null <<EOF\n[Unit]\nDescription=Story Geth Client\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$HOME/go/bin/story-geth --aeneid --syncmode full --port ${STORY_PORT}303 --http --http.api eth,net,web3,engine --http.vhosts '*' --http.addr 0.0.0.0 --http.port ${STORY_PORT}545 --authrpc.addr 127.0.0.1 --authrpc.port ${STORY_PORT}551 --authrpc.vhosts=* --ws --ws.api eth,web3,net,txpool --ws.addr 0.0.0.0 --ws.port ${STORY_PORT}546 --ws.origins '*' --metrics --metrics.addr 0.0.0.0 --metrics.port ${STORY_PORT}060\nRestart=on-failure\nRestartSec=3\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n## Story Service with Cosmovisor\n\nCreate the Story systemd service with Cosmovisor:\n\n```bash\nsudo tee /etc/systemd/system/story.service > /dev/null <<EOF\n[Unit]\nDescription=Story Cosmovisor\nAfter=network.target\n\n[Service]\nType=simple\nUser=$USER\nExecStart=$HOME/go/bin/cosmovisor run run --api-enable --api-address=0.0.0.0:${STORY_PORT}317\nRestart=on-failure\nRestartSec=5\nLimitNOFILE=65535\nEnvironment=\"DAEMON_NAME=story\"\nEnvironment=\"DAEMON_HOME=$HOME/.story/story\"\nEnvironment=\"DAEMON_ALLOW_DOWNLOAD_BINARIES=false\"\nEnvironment=\"DAEMON_RESTART_AFTER_UPGRADE=true\"\nEnvironment=\"DAEMON_DATA_BACKUP_DIR=$HOME/.story/story/cosmovisor/backup\"\nWorkingDirectory=$HOME/.story/story\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n## Enable and Start Services\n\n```bash\n# Reload systemd and start services\nsudo systemctl daemon-reload\n\n# Enable services\nsudo systemctl enable story-geth story\n\n# Start story-geth first\nsudo systemctl start story-geth\n\n# Wait a few seconds then start story\nsleep 5\nsudo systemctl start story\n\n# Check status\nsudo systemctl status story-geth\nsudo systemctl status story\n```\n\n## Service Management Commands\n\n```bash\n# View logs\nsudo journalctl -u story -f -o cat\nsudo journalctl -u story-geth -f -o cat\n\n# Restart services\nsudo systemctl restart story\nsudo systemctl restart story-geth\n\n# Stop services\nsudo systemctl stop story story-geth\n\n# Start services\nsudo systemctl start story-geth\nsleep 5\nsudo systemctl start story\n```\n\n:::tip\nAlways start `story-geth` before `story` and wait a few seconds between them.\n:::"
        },
        {
          "id": "snapshot-service",
          "title": "Snapshot Service",
          "type": "page",
          "content": "# ‚ö° Coinsspor Advanced Snapshot Service\n\n## üì∏ Overview\n\n**Next-generation snapshot service with ZSTD compression and aria2c multi-connection downloads**\n\n- üîÑ **Updated**: Every 6 hours (00:00, 06:00, 12:00, 18:00 UTC)\n- üóúÔ∏è **Compression**: ZSTD format (superior to LZ4)\n- ‚ö° **Download Tool**: aria2c multi-connection\n- üîí **Security**: SSL secured with validator-safe backup/restore\n- üíæ **Size**: ~36GB Consensus + ~15GB Execution (optimized compression)\n\n## Prerequisites Installation\n\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y aria2 zstd jq curl\n\n# Verify installation\naria2c --version\nzstd --version\n```\n\n## Check Latest Snapshot Status\n\n```bash\n# Get current snapshot height\necho \"Coinsspor Snapshot Height: $(curl -s https://snaps.coinsspor.com/story/aeneid/coinsspor-height.txt)\"\n\n# Get detailed snapshot information\ncurl -s https://snaps.coinsspor.com/story/aeneid/coinsspor-info.json | jq '.'\n```\n\n## üöÄ Advanced Download Script\n\n```bash\n#!/bin/bash\n\n# Coinsspor Advanced Snapshot Download - Server Optimized\n# Using aria2c + ZSTD for maximum performance\n\nset -e\n\necho \"üåü Coinsspor Advanced Snapshot Download (Server Optimized)\"\necho \"=========================================================\"\n\n# Configuration\nCOINSSPOR_BASE=\"https://snaps.coinsspor.com/story/aeneid\"\nSTORY_DATA=\"$HOME/.story\"\nTEMP_DIR=\"/tmp/coinsspor_sync\"\n\n# Enhanced Story RPC port detection with connectivity test\ndetect_story_port() {\n    local config_file=\"$STORY_DATA/story/config/config.toml\"\n    \n    # Primary method: Test common Story ports with connectivity (fast & reliable)\n    for test_port in 16657 26657 27657; do\n        if timeout 2 curl -s \"localhost:$test_port/status\" >/dev/null 2>&1; then\n            echo \"$test_port\"\n            return\n        fi\n    done\n    \n    # Backup method: Extract from config if available\n    if [[ -f \"$config_file\" ]]; then\n        local extracted_port=$(grep \"laddr.*tcp\" \"$config_file\" | grep -oE \":[0-9]+\" | tr -d ':' | head -1)\n        if [[ -n \"$extracted_port\" ]] && [[ \"$extracted_port\" =~ ^[0-9]+$ ]]; then\n            if timeout 2 curl -s \"localhost:$extracted_port/status\" >/dev/null 2>&1; then\n                echo \"$extracted_port\"\n                return\n            fi\n        fi\n    fi\n    \n    # Final fallback\n    echo \"26657\"\n}\n\nSTORY_PORT=$(detect_story_port)\nLOCAL_RPC=\"localhost:$STORY_PORT\"\n\n# Check dependencies\necho \"üì¶ Checking dependencies...\"\nfor cmd in aria2c zstd jq; do\n    if ! command -v $cmd &> /dev/null; then\n        echo \"‚ùå Missing dependency: $cmd\"\n        echo \"üí° Install with: sudo apt install aria2 zstd jq\"\n        exit 1\n    fi\ndone\necho \"‚úÖ All dependencies ready\"\n\n# Discover snapshots via JSON API\necho \"üîç Discovering latest snapshots...\"\nMETADATA=$(curl -s \"$COINSSPOR_BASE/coinsspor-info.json\")\nCONSENSUS_FILE=$(echo \"$METADATA\" | jq -r '.snapshots.consensus')\nEXECUTION_FILE=$(echo \"$METADATA\" | jq -r '.snapshots.execution')\nBLOCK_HEIGHT=$(echo \"$METADATA\" | jq -r '.block_height')\n\nif [ \"$CONSENSUS_FILE\" = \"null\" ] || [ \"$EXECUTION_FILE\" = \"null\" ]; then\n    echo \"‚ùå Could not discover snapshot files\"\n    exit 1\nfi\n\necho \"üìä Snapshot Information:\"\necho \"  Block Height: $BLOCK_HEIGHT\"\necho \"  Consensus: $CONSENSUS_FILE\"\necho \"  Execution: $EXECUTION_FILE\"\necho \"  Detected RPC Port: $STORY_PORT\"\n\n# Confirmation\nread -p \"üöÄ Continue with download? (y/N): \" -n 1 -r\necho\nif [[ ! $REPLY =~ ^[Yy]$ ]]; then\n    echo \"Download cancelled\"\n    exit 0\nfi\n\n# Prepare environment\nmkdir -p \"$TEMP_DIR\"\n\necho \"üõë Stopping services...\"\nsudo systemctl stop story story-geth\n\necho \"üíæ Backing up validator state...\"\nif [[ -f \"$STORY_DATA/story/data/priv_validator_state.json\" ]]; then\n    cp \"$STORY_DATA/story/data/priv_validator_state.json\" \"$TEMP_DIR/validator_backup.json\"\n    echo \"‚úÖ Validator state backed up\"\nfi\n\necho \"üßπ Cleaning target directories...\"\nrm -rf \"$STORY_DATA/story/data\"\nrm -rf \"$STORY_DATA/geth/aeneid/geth/chaindata\"\nmkdir -p \"$STORY_DATA/geth/aeneid/geth\"\n\necho \"\"\necho \"üì• Downloading with optimized aria2c settings...\"\n\n# SERVER OPTIMIZED aria2c configuration - 3x Faster Version\nARIA2C_OPTIONS=(\n    --max-connection-per-server=12\n    --split=12\n    --min-split-size=15M\n    --max-concurrent-downloads=2\n    --disk-cache=64M\n    --file-allocation=falloc\n    --continue=true\n    --max-tries=5\n    --retry-wait=2\n    --timeout=90\n    --connect-timeout=20\n    --lowest-speed-limit=400K\n    --user-agent=\"Coinsspor-Client/3.0-Fast\"\n)\n\n# Download consensus with server-optimized aria2c\necho \"üîπ Downloading consensus snapshot...\"\naria2c \"${ARIA2C_OPTIONS[@]}\" \\\n    --dir=\"$TEMP_DIR\" \\\n    --out=\"$CONSENSUS_FILE\" \\\n    \"$COINSSPOR_BASE/$CONSENSUS_FILE\"\n\n# Download execution with server-optimized aria2c\necho \"üî∏ Downloading execution snapshot...\"\naria2c \"${ARIA2C_OPTIONS[@]}\" \\\n    --dir=\"$TEMP_DIR\" \\\n    --out=\"$EXECUTION_FILE\" \\\n    \"$COINSSPOR_BASE/$EXECUTION_FILE\"\n\necho \"\"\necho \"üìÇ Extracting with ZSTD compression...\"\n\n# Extract consensus\necho \"üîπ Extracting consensus snapshot...\"\nif ! zstd -d --stdout \"$TEMP_DIR/$CONSENSUS_FILE\" | tar -xf - -C \"$STORY_DATA/story\"; then\n    echo \"‚ùå Error extracting consensus snapshot\"\n    exit 1\nfi\n\n# Extract execution\necho \"üî∏ Extracting execution snapshot...\"\nif ! zstd -d --stdout \"$TEMP_DIR/$EXECUTION_FILE\" | tar -xf - -C \"$STORY_DATA/geth/aeneid/geth\"; then\n    echo \"‚ùå Error extracting execution snapshot\"\n    exit 1\nfi\n\necho \"üîÑ Restoring validator state...\"\nif [[ -f \"$TEMP_DIR/validator_backup.json\" ]]; then\n    cp \"$TEMP_DIR/validator_backup.json\" \"$STORY_DATA/story/data/priv_validator_state.json\"\n    echo \"‚úÖ Validator state restored\"\nfi\n\necho \"üöÄ Starting services...\"\nsudo systemctl start story-geth\nsleep 10\nsudo systemctl start story\n\necho \"üßπ Cleaning up temporary files...\"\nrm -rf \"$TEMP_DIR\"\n\necho \"\"\necho \"‚úÖ Coinsspor snapshot download completed successfully!\"\necho \"üìä Monitor sync with: sudo journalctl -u story -u story-geth -f\"\n\n# Enhanced final status with reliable port detection\necho \"\"\necho \"üéØ Final Status Check:\"\nsleep 5\n\n# Verify RPC connectivity and get status\nif timeout 5 curl -s \"$LOCAL_RPC/status\" >/dev/null 2>&1; then\n    LOCAL_HEIGHT=$(curl -s \"$LOCAL_RPC/status\" 2>/dev/null | jq -r '.result.sync_info.latest_block_height' 2>/dev/null || echo \"Unknown\")\n    CATCHING_UP=$(curl -s \"$LOCAL_RPC/status\" 2>/dev/null | jq -r '.result.sync_info.catching_up' 2>/dev/null || echo \"unknown\")\n    \n    echo \"üìà Node Status:\"\n    echo \"  ‚Ä¢ RPC Port: $STORY_PORT ‚úÖ\"\n    echo \"  ‚Ä¢ Current Height: $LOCAL_HEIGHT\"\n    echo \"  ‚Ä¢ Target Height: $BLOCK_HEIGHT\"\n    echo \"  ‚Ä¢ Catching Up: $CATCHING_UP\"\n    \n    if [[ \"$LOCAL_HEIGHT\" =~ ^[0-9]+$ ]] && [[ \"$BLOCK_HEIGHT\" =~ ^[0-9]+$ ]]; then\n        blocks_behind=$((BLOCK_HEIGHT - LOCAL_HEIGHT))\n        if [[ $blocks_behind -lt 100 ]]; then\n            echo \"  ‚Ä¢ Status: üéâ Nearly synced! ($blocks_behind blocks behind)\"\n        else\n            echo \"  ‚Ä¢ Status: üîÑ Syncing... ($blocks_behind blocks behind)\"\n        fi\n    fi\nelse\n    echo \"‚ö†Ô∏è  Could not connect to RPC on port $STORY_PORT\"\n    echo \"   Node may still be starting up. Check with:\"\n    echo \"   sudo journalctl -u story -u story-geth -f\"\nfi\n\necho \"\"\necho \"üåü Snapshot installation completed! Happy validating! üöÄ\"\n```\n\n## Service Information\n\n| Feature | Details |\n|---------|---------||\n| **URL** | https://snaps.coinsspor.com/story/aeneid/ |\n| **API Endpoint** | `coinsspor-info.json` |\n| **Update Frequency** | Every 6 hours |\n| **Compression** | ZSTD (superior to LZ4) |\n| **Download Tool** | aria2c multi-connection |\n| **File Format** | `coinsspor-aeneid-TYPE-HEIGHT-DATE.tar.zst` |\n| **Security** | Validator state preservation |\n| **SSL** | ‚úÖ HTTPS secured |\n\n:::tip\n**Performance Benefits:**\n- üöÄ Ultra-Fast Downloads: ~270MB/s with aria2c\n- üóúÔ∏è Superior Compression: ZSTD vs LZ4\n- üíæ Optimized Size: ~51GB total (vs ~200GB+ full node)\n- ‚è±Ô∏è Quick Sync: 3-5 minutes download + extraction\n:::"
        }
      ]
    },
    {
      "id": "monitoring",
      "title": "Monitoring",
      "icon": "üìä",
      "type": "section",
      "children": [
        {
          "id": "sync-status",
          "title": "Check Sync Status",
          "type": "page",
          "content": "# üìä Monitoring & Sync Status\n\n## Check Sync Status\n\n```bash\n# Check if node is catching up\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info.catching_up'\n\n# Get current block height\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info.latest_block_height'\n\n# Check geth sync status\nstory-geth --exec \"eth.syncing\" attach ~/.story/geth/aeneid/geth.ipc\n```\n\n## üìà Live Sync Monitor Script\n\nCreate an advanced monitoring script:\n\n```bash\n# Remove any existing broken monitor script\nrm -f $HOME/monitor.sh\n\n# Create new monitoring script\ncat > $HOME/monitor.sh << 'EOF'\n#!/bin/bash\n\n# Get port from environment variable\nsource $HOME/.bash_profile\nrpc_port=\"${STORY_PORT}657\"\nlocal_rpc=\"localhost:$rpc_port\"\nnetwork_rpc=\"https://aeneid.storyrpc.io\"\n\necho \"üöÄ Story Protocol Sync Monitor\"\necho \"==============================\"\necho \"Local RPC: $local_rpc\"\necho \"Network RPC: $network_rpc\"\necho \"Press Ctrl+C to stop monitoring\"\necho \"==============================\"\n\nwhile true; do\n local_height=$(curl -s \"$local_rpc/status\" | jq -r '.result.sync_info.latest_block_height')\n network_height=$(curl -s \"$network_rpc/status\" | jq -r '.result.sync_info.latest_block_height')\n\n if ! [[ \"$local_height\" =~ ^[0-9]+$ ]] || ! [[ \"$network_height\" =~ ^[0-9]+$ ]]; then\n   echo -e \"\\033[1;31m‚ùå Error: Failed to fetch block heights. Retrying...\\033[0m\"\n   sleep 5\n   continue\n fi\n\n blocks_left=$((network_height - local_height))\n if [ \"$blocks_left\" -lt 0 ]; then\n   blocks_left=0\n fi\n\n # Calculate sync percentage\n sync_percentage=$(echo \"scale=2; ($local_height / $network_height) * 100\" | bc -l 2>/dev/null || echo \"0\")\n\n echo -e \"\\033[1;33müìä Node Height:\\033[1;34m $local_height\\033[0m \\033[1;33m| üåê Network Height:\\033[1;36m $network_height\\033[0m \\033[1;33m| ‚è≥ Blocks Left:\\033[1;31m $blocks_left\\033[0m \\033[1;32m| üîÑ Sync: ${sync_percentage}%\\033[0m\"\n sleep 5\ndone\nEOF\n\n# Set execute permissions\nchmod +x $HOME/monitor.sh\n\n# Run the monitor\necho \"üöÄ Starting sync monitor...\"\ncd $HOME\n./monitor.sh\n```\n\n## Node Information Commands\n\n```bash\n# Get node ID\ncurl localhost:${STORY_PORT}657/status | jq '.result.node_info.id'\n\n# Get validator address\nstory status 2>&1 | jq '.ValidatorInfo.address'\n\n# Check validator status\ncurl localhost:${STORY_PORT}657/validators | jq '.result.validators[] | select(.address==\"YOUR_VALIDATOR_ADDRESS\")'\n\n# Check node sync info\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info'\n\n# Check number of connected peers\ncurl -s localhost:${STORY_PORT}657/net_info | jq '.result.n_peers'\n\n# Check peer details\ncurl -s localhost:${STORY_PORT}657/net_info | jq -r '.result.peers[] | \"\\(.node_info.id)@\\(.remote_ip):\\(.node_info.listen_addr | capture(\":(?<port>[0-9]+)$\").port) - \\(.node_info.moniker)\"'\n```\n\n## Performance Monitoring Script\n\n```bash\n# Create performance monitoring script\ncat > $HOME/performance_monitor.sh << 'EOF'\n#!/bin/bash\n\necho \"=== Story Node Performance Monitor ===\"\necho \"======================================\"\n\n# System resources\necho \"üìä System Resources:\"\necho \"CPU Usage: $(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | awk -F'%' '{print $1}')%\"\necho \"Memory: $(free -h | awk '/^Mem:/ {print $3 \"/\" $2}')\"\necho \"Disk: $(df -h $HOME/.story | awk 'NR==2 {print $3 \"/\" $2 \" (\" $5 \" used)\"}')\"\n\n# Node status\necho \"\"\necho \"üåê Node Status:\"\nSYNC_INFO=$(curl -s localhost:${STORY_PORT}657/status)\nHEIGHT=$(echo $SYNC_INFO | jq -r '.result.sync_info.latest_block_height')\nCATCHING_UP=$(echo $SYNC_INFO | jq -r '.result.sync_info.catching_up')\nPEERS=$(curl -s localhost:${STORY_PORT}657/net_info | jq -r '.result.n_peers')\n\necho \"Block Height: $HEIGHT\"\necho \"Catching Up: $CATCHING_UP\"\necho \"Connected Peers: $PEERS\"\n\n# Service status\necho \"\"\necho \"üîß Service Status:\"\nSTORY_STATUS=$(systemctl is-active story)\nGETH_STATUS=$(systemctl is-active story-geth)\necho \"Story Service: $STORY_STATUS\"\necho \"Geth Service: $GETH_STATUS\"\n\necho \"======================================\"\nEOF\n\nchmod +x $HOME/performance_monitor.sh\n```\n\n:::tip\nRun monitoring scripts in tmux or screen sessions to keep them running in the background.\n:::"
        }
      ]
    },
    {
      "id": "validator",
      "title": "Validator Setup",
      "icon": "üèÜ",
      "type": "section",
      "children": [
        {
          "id": "create-validator",
          "title": "Create Validator",
          "type": "page",
          "content": "# üèÜ Validator Creation\n\n## Prerequisites\n\n:::warning\n**Important**: Before creating a validator, ensure:\n1. Your node is fully synced (`catching_up: false`)\n2. You have at least 1024 IP tokens for staking\n3. You have backed up your keys\n:::\n\n## Step 1: Export Validator Keys\n\n```bash\n# Export validator public key\nstory validator export\n\n# Export EVM private key to file\nstory validator export --export-evm-key\n```\n\n## Step 2: Setup .env File\n\n:::danger\n**Security Warning**: Never share your private key or .env file!\n:::\n\n```bash\n# Create .env file in the Story config directory (more secure and organized)\necho \"PRIVATE_KEY=$(cat $HOME/.story/story/config/private_key.txt | grep \"PRIVATE_KEY\" | awk -F'=' '{print $2}')\" > $HOME/.story/story/config/.env\n\n# Verify .env file (DO NOT share this output)\necho \"‚úÖ .env file created in $HOME/.story/story/config/\"\necho \"‚ö†Ô∏è  Keep your .env file secure and never share it!\"\n\n# Check if .env file is correctly formatted\nif [ -f \"$HOME/.story/story/config/.env\" ]; then\n    echo \"‚úÖ .env file exists in config directory\"\nelse\n    echo \"‚ùå .env file creation failed\"\n    exit 1\nfi\n\n# Set proper permissions for security\nchmod 600 $HOME/.story/story/config/.env\necho \"‚úÖ .env file permissions set to 600 (owner read/write only)\"\n```\n\n## Step 3: Create Validator\n\nWait until your node is fully synced, then create your validator:\n\n```bash\n# Check sync status first\ncurl localhost:${STORY_PORT}657/status | jq '.result.sync_info.catching_up'\n\n# Navigate to the directory containing .env file\ncd $HOME/.story/story/config/\n\n# If catching_up is false, proceed with validator creation\n# For LOCKED tokens (recommended for competition):\nstory validator create \\\n  --stake 1024000000000000000000 \\\n  --moniker \"$STORY_MONIKER\" \\\n  --chain-id 1315 \\\n  --unlocked=false \\\n  --rpc \"https://aeneid.storyrpc.io\"\n\n# For UNLOCKED tokens:\nstory validator create \\\n  --stake 1024000000000000000000 \\\n  --moniker \"$STORY_MONIKER\" \\\n  --chain-id 1315 \\\n  --unlocked=true \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n## Important Notes\n\n- ‚úÖ Story v1.2.0+ requires `.env` file for all operations\n- ‚úÖ The `.env` file must be in the same directory where you run commands\n- ‚úÖ Never commit or share your `.env` file\n- ‚úÖ Minimum stake is 1024 IP (1024000000000000000000 wei)\n- ‚úÖ For competition, use `--unlocked=false` to lock your tokens\n\n## Verify Validator Creation\n\n```bash\n# Check your validator in the explorer\necho \"Check your validator at: https://aeneid.storyscan.io/validators\"\n\n# Get your validator address\nstory status 2>&1 | jq '.ValidatorInfo.address'\n\n# Check validator status via RPC\ncurl localhost:${STORY_PORT}657/validators | jq '.result.validators[] | select(.address==\"YOUR_VALIDATOR_ADDRESS\")'\n```"
        },
        {
          "id": "delegate-tokens",
          "title": "Delegate Tokens",
          "type": "page",
          "content": "# üí∞ Delegate to Your Validator\n\n## Get Validator Public Key\n\n```bash\n# Get your validator public key\nVALIDATOR_PUBKEY=$(story validator export | grep \"Compressed Public Key (hex)\" | awk '{print $NF}')\necho \"Your validator pubkey: $VALIDATOR_PUBKEY\"\n```\n\n## Delegate Additional Stake\n\n```bash\n# Navigate to the directory containing .env file\ncd $HOME/.story/story/config/\n\n# Delegate additional stake\nstory validator stake \\\n  --chain-id 1315 \\\n  --validator-pubkey $VALIDATOR_PUBKEY \\\n  --stake 1000000000000000000000 \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n## Check Delegations\n\n```bash\n# Check your delegations\nstory query staking delegations YOUR_DELEGATOR_ADDRESS --rpc https://aeneid.storyrpc.io\n```\n\n## Unstake Tokens\n\n```bash\n# Navigate to the directory containing .env file\ncd $HOME/.story/story/config/\n\n# Unstake tokens\nstory validator unstake \\\n  --validator-pubkey $VALIDATOR_PUBKEY \\\n  --unstake 1000000000000000000000 \\\n  --delegation-id 0 \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n## Redelegate Tokens\n\n```bash\n# Redelegate to another validator\nstory validator redelegate \\\n  --validator-src-pubkey $SOURCE_VALIDATOR_PUBKEY \\\n  --validator-dst-pubkey $DEST_VALIDATOR_PUBKEY \\\n  --redelegate 1000000000000000000000 \\\n  --rpc \"https://aeneid.storyrpc.io\"\n```\n\n:::info\nAll staking operations require the `.env` file to be present in the current directory.\n:::"
        },
        {
          "id": "wallet-operations",
          "title": "Wallet Operations",
          "type": "page",
          "content": "# üí≥ Wallet Operations\n\n## Check Balance\n\n```bash\n# Check balance (replace YOUR_ADDRESS with your actual address)\ncurl -s \"https://aeneid.storyrpc.io/cosmos/bank/v1beta1/balances/YOUR_ADDRESS\" | jq\n```\n\n## Send Tokens\n\n```bash\n# Navigate to the directory containing .env file\ncd $HOME/.story/story/config/\n\n# Send tokens (replace addresses and adjust amount as needed)\nstory tx bank send YOUR_ADDRESS RECIPIENT_ADDRESS 1000000000000000000000uip \\\n  --chain-id 1315 \\\n  --rpc https://aeneid.storyrpc.io\n```\n\n## Check Transaction Status\n\n```bash\n# Check transaction status\ncurl -s \"https://aeneid.storyrpc.io/cosmos/tx/v1beta1/txs/TX_HASH\" | jq\n```\n\n## Get Faucet Tokens\n\nVisit the official faucet:\n- **Faucet URL**: [https://faucet.story.foundation](https://faucet.story.foundation)\n\n:::tip\nYou
