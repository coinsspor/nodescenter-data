{
  "documentation": [
    {
      "id": "page-1758825521184",
      "title": "Tellor Layer Mainnet Node Installation Guide",
      "icon": "ðŸ“„",
      "type": "page",
      "content": "# Tellor Layer Mainnet Node Installation Guide\n\n## System Requirements\n\n- **Operating System**: Ubuntu 20.04/22.04 LTS\n- **CPU**: 8+ cores\n- **RAM**: 32 GB\n- **Storage**: 1 TB NVMe SSD\n- **Go**: 1.23.3\n\n## 1. System Preparation\n\n```bash\n# System update\nsudo apt update && sudo apt upgrade -y\n\n# Install required packages\nsudo apt install -y build-essential jq sed curl wget git make gcc g++ unzip snapd lz4\n```\n\n## 2. Go Installation\n\n```bash\ncd $HOME\nwget https://go.dev/dl/go1.23.3.linux-amd64.tar.gz\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf go1.23.3.linux-amd64.tar.gz\nrm go1.23.3.linux-amd64.tar.gz\n\n# PATH configuration\ncat << 'EOF' >> ~/.bashrc\nexport PATH=$PATH:/usr/local/go/bin:$HOME/go/bin\nexport GOPATH=$HOME/go\nEOF\n\nsource ~/.bashrc\ngo version\n```\n\n## 3. Binary Download and Installation\n\n```bash\n# Create binary directory\nmkdir -p ~/layer/binaries/v5.1.1 && cd ~/layer/binaries/v5.1.1\n\n# Download binary\nwget https://github.com/tellor-io/layer/releases/download/v5.1.1/layer_Linux_x86_64.tar.gz\ntar -xvzf layer_Linux_x86_64.tar.gz\n\n# Copy to system-wide location\nsudo cp layerd /usr/local/bin/\nsudo chmod +x /usr/local/bin/layerd\n\n# Version check\nlayerd version\n```\n\n## 4. Node Initialization\n\n```bash\n# Initialize node (replace YOUR_NODE_NAME with your own name)\nlayerd init \"YOUR_NODE_NAME\" --chain-id tellor-1\n\n# Download genesis file\ncurl -Ls https://ss.tellor.nodestake.org/genesis.json > $HOME/.layer/config/genesis.json\n```\n\n## 5. Port Configuration\n\n```bash\n# Change CUSTOM_PORT value for custom port (default: 45)\nCUSTOM_PORT=45\n\n# Port settings\nsed -i -e \"s|tcp://127.0.0.1:26657|tcp://0.0.0.0:${CUSTOM_PORT}657|g\" $HOME/.layer/config/config.toml\nsed -i -e \"s|:26656|:${CUSTOM_PORT}656|g\" $HOME/.layer/config/config.toml\nsed -i -e \"s|:26658|:${CUSTOM_PORT}658|g\" $HOME/.layer/config/config.toml\nsed -i -e \"s|proxy_app = \\\"tcp://127.0.0.1:26658\\\"|proxy_app = \\\"tcp://127.0.0.1:${CUSTOM_PORT}658\\\"|g\" $HOME/.layer/config/config.toml\nsed -i -e \"s|tcp://localhost:26657|tcp://localhost:${CUSTOM_PORT}657|g\" $HOME/.layer/config/client.toml\n```\n\n## 6. Configuration Files\n\n### app.toml Settings\n```bash\n# Gas prices\nsed -i -e \"s/^minimum-gas-prices *=.*/minimum-gas-prices = \\\"0loya\\\"/\" $HOME/.layer/config/app.toml\n\n# Enable API\nsed -i -e \"s/^enable *=.*/enable = true/\" $HOME/.layer/config/app.toml\nsed -i -e \"s/^swagger *=.*/swagger = true/\" $HOME/.layer/config/app.toml\n\n# Pruning settings\nsed -i -e \"s/^pruning *=.*/pruning = \\\"custom\\\"/\" $HOME/.layer/config/app.toml\nsed -i -e \"s/^pruning-keep-recent *=.*/pruning-keep-recent = \\\"100\\\"/\" $HOME/.layer/config/app.toml\nsed -i -e \"s/^pruning-interval *=.*/pruning-interval = \\\"10\\\"/\" $HOME/.layer/config/app.toml\n```\n\n### config.toml Settings\n```bash\n# Add peer list\nPEERS=\"3037a8c239cdcdcf7fbc0ed050a11ecdc0397374@91.99.194.56:26656,17355981bc61dc3c4169158e3d73f22099a5f9c0@152.53.254.219:41767,5ef1ed1fec8700bf9ee16625db2718997ceb499d@157.180.52.245:41656,23a9da592ee6688eac45c82a256ef302a661469b@195.3.223.78:51656,95e55a6cfb850db8c23e969ddd461eac28b98702@3.91.103.4:26656,7fd4d34f3b19c41218027d3b91c90d073ab2ba66@54.221.149.61:26656,2737f23b2223ab1673ce682afdf50d34633f5f7c@69.250.123.126:26656,9358c72aa8be31ce151ef591e6ecf08d25812993@18.143.181.83:26656,2904aa32501548e127d3198c8f5181fb4d67bbe6@18.116.23.104:26656,2b8af463a1f0e84aec6e4dbf3126edf3225df85e@13.52.231.70:26656,f2644778a8a2ca3b55ec65f1b7799d32d4a7098e@54.149.160.93:26656,5a9db46eceb055c9238833aa54e15a2a32a09c9a@54.67.36.145:26656\"\n\nsed -i -e \"s/^persistent_peers *=.*/persistent_peers = \\\"$PEERS\\\"/\" $HOME/.layer/config/config.toml\n\n# Other settings\nsed -i -e \"s/^cors_allowed_origins *=.*/cors_allowed_origins = [\\\"*\\\"]/\" $HOME/.layer/config/config.toml\nsed -i -e \"s/^timeout_commit *=.*/timeout_commit = \\\"1s\\\"/\" $HOME/.layer/config/config.toml\nsed -i -e \"s/^indexer *=.*/indexer = \\\"kv\\\"/\" $HOME/.layer/config/config.toml\n```\n\n### client.toml Settings\n```bash\nsed -i -e \"s/^chain-id *=.*/chain-id = \\\"tellor-1\\\"/\" $HOME/.layer/config/client.toml\nsed -i -e \"s/^keyring-backend *=.*/keyring-backend = \\\"test\\\"/\" $HOME/.layer/config/client.toml\n```\n\n## 7. Wallet Creation\n\n```bash\n# Create new wallet (save your seed phrase!)\nlayerd keys add wallet --keyring-backend test\n\n# Display wallet address\nlayerd keys show wallet -a --keyring-backend test\n```\n\n## 8. Ethereum RPC Settings\n\n```bash\n# Get API key from Alchemy or Infura and replace\nETH_RPC_URL=\"wss://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY\"\n\n# Add environment variables\ncat << EOF >> ~/.bashrc\nexport ETH_RPC_URL=\"$ETH_RPC_URL\"\nexport ETH_RPC_URL_PRIMARY=\"$ETH_RPC_URL\"\nexport ETH_RPC_URL_FALLBACK=\"${ETH_RPC_URL/wss/https}\"\nexport TOKEN_BRIDGE_CONTRACT=\"0x5589e306b1920F009979a50B88caE32aecD471E4\"\nEOF\n\nsource ~/.bashrc\n```\n\n## 9. Cosmovisor Installation\n\n```bash\n# Install Cosmovisor\ngo install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest\n\n# Environment variables\ncat << 'EOF' >> ~/.bashrc\nexport DAEMON_NAME=layerd\nexport DAEMON_HOME=$HOME/.layer\nexport DAEMON_RESTART_AFTER_UPGRADE=true\nexport DAEMON_ALLOW_DOWNLOAD_BINARIES=false\nexport DAEMON_POLL_INTERVAL=300ms\nexport UNSAFE_SKIP_BACKUP=true\nexport DAEMON_PREUPGRADE_MAX_RETRIES=0\nEOF\n\nsource ~/.bashrc\n\n# Create directory structure\nmkdir -p $HOME/.layer/cosmovisor/genesis/bin\ncp /usr/local/bin/layerd $HOME/.layer/cosmovisor/genesis/bin/\nchmod +x $HOME/.layer/cosmovisor/genesis/bin/layerd\n\n# Test\ncosmovisor version\n```\n\n## 10. Snapshot Download (Fast Sync)\n\n```bash\n# Clean data directory\nrm -rf $HOME/.layer/data\nlayerd tendermint unsafe-reset-all --home $HOME/.layer/ --keep-addr-book\n\n# Download snapshot (30+ GB, be patient)\necho \"Downloading snapshot...\"\nSNAP_NAME=$(curl -s https://ss.tellor.nodestake.org/ | egrep -o \">20.*\\.tar.lz4\" | tr -d \">\")\ncurl -o - -L https://ss.tellor.nodestake.org/${SNAP_NAME} | lz4 -c -d - | tar -x -C $HOME/.layer\n\necho \"Snapshot successfully loaded!\"\n```\n\n## 11. Create Systemd Service\n\n```bash\nsudo tee /etc/systemd/system/tellor.service > /dev/null <<EOF\n[Unit]\nDescription=Tellor Layer Node\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME\nExecStart=$HOME/go/bin/cosmovisor run start --home $HOME/.layer --keyring-backend test --key-name wallet --api.enable --api.swagger\nRestart=always\nRestartSec=3\nLimitNOFILE=65535\nEnvironment=\"DAEMON_NAME=layerd\"\nEnvironment=\"DAEMON_HOME=$HOME/.layer\"\nEnvironment=\"DAEMON_RESTART_AFTER_UPGRADE=true\"\nEnvironment=\"DAEMON_ALLOW_DOWNLOAD_BINARIES=false\"\nEnvironment=\"ETH_RPC_URL=$ETH_RPC_URL\"\nEnvironment=\"ETH_RPC_URL_PRIMARY=$ETH_RPC_URL\"\nEnvironment=\"ETH_RPC_URL_FALLBACK=${ETH_RPC_URL/wss/https}\"\nEnvironment=\"TOKEN_BRIDGE_CONTRACT=0x5589e306b1920F009979a50B88caE32aecD471E4\"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Start service\nsudo systemctl daemon-reload\nsudo systemctl enable tellor\nsudo systemctl start tellor\n```\n\n## 12. Check Node Status\n\n```bash\n# Watch logs\nsudo journalctl -u tellor -f\n\n# Wait 30 seconds, then check status\nsleep 30\ncurl -s localhost:45657/status | jq '.result.sync_info | {height: .latest_block_height, catching_up: .catching_up}'\n\n# Check peer count\ncurl -s localhost:45657/net_info | jq -r '.result.n_peers'\n\n# Check current block height\ncurl -s https://mainnet.tellorlayer.com/rpc/status | jq -r '.result.sync_info.latest_block_height'\n```\n\n## 13. Validator Creation\n\n### Prerequisites\n- Node must be fully synced (catching_up: false)\n- Minimum 1 TRB token required\n- Bridge your TRB tokens from https://bridge.tellor.io\n\n### Validator Creation Steps\n\n#### 1. Balance Check\n```bash\n# Show wallet address\nlayerd keys show wallet -a --keyring-backend test\n\n# Check balance (minimum 1 TRB = 1000000 loya required)\nlayerd query bank balances $(layerd keys show wallet -a --keyring-backend test)\n```\n\n#### 2. Create Validator JSON File\n```bash\n# Get your validator public key\nVALIDATOR_PUBKEY=$(layerd tendermint show-validator)\n\n# Create validator JSON file (edit information)\ncat > tellor-validator.json << EOF\n{\n  \"pubkey\": $VALIDATOR_PUBKEY,\n  \"amount\": \"1000000loya\",\n  \"moniker\": \"YOUR_VALIDATOR_NAME\",\n  \"identity\": \"YOUR_KEYBASE_ID\",\n  \"website\": \"YOUR_WEBSITE\",\n  \"security\": \"YOUR_EMAIL\",\n  \"details\": \"YOUR_VALIDATOR_DESCRIPTION\",\n  \"commission-rate\": \"0.1\",\n  \"commission-max-rate\": \"0.2\",\n  \"commission-max-change-rate\": \"0.01\",\n  \"min-self-delegation\": \"1\"\n}\nEOF\n```\n\n#### 3. Create Validator\n```bash\n# Create validator with JSON file (fee is mandatory!)\nlayerd tx staking create-validator tellor-validator.json \\\n  --from=wallet \\\n  --chain-id=tellor-1 \\\n  --keyring-backend=test \\\n  --fees=\"10000loya\" \\\n  -y\n```\n\n#### 4. Check Validator Status\n```bash\n# Get your validator address\nVALOPER=$(layerd keys show wallet --bech val -a --keyring-backend test)\n\n# Check validator info\nlayerd query staking validator $VALOPER\n\n# Check on explorer\necho \"Explorer: https://tellorexplorer.com/validators/$VALOPER\"\n```\n\n## Useful Commands\n\n### Service Management\n```bash\nsudo systemctl stop tellor      # Stop\nsudo systemctl start tellor     # Start\nsudo systemctl restart tellor   # Restart\nsudo systemctl status tellor    # Check status\nsudo journalctl -u tellor -f    # Watch logs\n```\n\n### Wallet Operations\n```bash\n# Wallet list\nlayerd keys list --keyring-backend test\n\n# Wallet address\nlayerd keys show wallet -a --keyring-backend test\n\n# Balance check\nlayerd query bank balances $(layerd keys show wallet -a --keyring-backend test)\n```\n\n### Node Information\n```bash\n# Sync status\nlayerd status 2>&1 | jq '.SyncInfo.catching_up'\n\n# Node ID\nlayerd status 2>&1 | jq '.NodeInfo.id'\n\n# Validator info\nlayerd query staking validator $(layerd keys show wallet --bech val -a --keyring-backend test)\n```\n\n### Validator Operations\n```bash\n# Unjail\nlayerd tx slashing unjail \\\n  --from wallet \\\n  --chain-id tellor-1 \\\n  --keyring-backend test \\\n  --fees=\"10000loya\" \\\n  -y\n\n# Delegate (stake tokens)\nlayerd tx staking delegate $(layerd keys show wallet --bech val -a --keyring-backend test) 1000000loya \\\n  --from wallet \\\n  --chain-id tellor-1 \\\n  --keyring-backend test \\\n  --fees=\"10000loya\" \\\n  -y\n```\n\n## Troubleshooting\n\n### Node not starting\n```bash\n# Check logs\nsudo journalctl -u tellor -n 100\n\n# Check port conflicts\nsudo lsof -i :45657\n```\n\n### Slow synchronization\n```bash\n# Check peer count (should be 10+)\ncurl -s localhost:45657/net_info | jq -r '.result.n_peers'\n\n# Download new snapshot\nsudo systemctl stop tellor\nrm -rf $HOME/.layer/data\n# Repeat snapshot download step\n```\n\n### Validator not visible\n```bash\n# Check jail status\nlayerd query staking validator $(layerd keys show wallet --bech val -a --keyring-backend test) | jq '.jailed'\n\n# Check if TX was successful\nlayerd query tx TX_HASH\n```\n\n## Important Notes\n\n- ðŸ”´ **Always save your seed phrase in a secure location!**\n- ðŸŸ¡ **Ethereum RPC requires Alchemy or Infura API key**\n- ðŸŸ¢ **Edit CUSTOM_PORT value to change ports**\n- ðŸ”µ **Minimum 1 TRB (1000000 loya) required for validator**\n- âšª **Gas fee is mandatory (--fees=\"10000loya\")**\n- ðŸŸ£ **Snapshot download is 30+ GB, be patient**\n\n## Resources\n\n- [Tellor Layer Documentation](https://docs.tellor.io)\n- [Tellor Explorer](https://tellorexplorer.com)\n- [Discord](https://discord.gg/tellor)\n- [Bridge](https://bridge.tellor.io)"
    }
  ],
  "projectInfo": {
    "name": "Tellor",
    "logo": "https://raw.githubusercontent.com/coinsspor/coinsspor/refs/heads/main/tellorlogo.png",
    "banner": "https://raw.githubusercontent.com/coinsspor/coinsspor/refs/heads/main/tellorbanner.png",
    "description": "Tellor",
    "theme": {
      "primary": "#10b981",
      "secondary": "#8b5cf6"
    }
  },
  "lastUpdated": "2025-09-25T18:39:35.256Z",
  "projectId": "tellor-mainnet",
  "version": "1.0.0"
}
