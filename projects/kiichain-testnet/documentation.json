{
  "documentation": [
    {
      "id": "getting-started",
      "title": "Getting Started",
      "icon": "ðŸš€",
      "type": "section",
      "children": [
        {
          "id": "introduction",
          "title": "Introduction",
          "type": "page",
          "content": "---\ndescription: Onboarding for validators\n---\n\n# Step-by-Step Guide\n\nIt's always nice to see new users onboarding into the Testnet Oro.\n\nThis will guide you through the process of running your own full node, then [becoming a validator](step-by-step-guide/becoming-a-validator) and finally running[ the price feeder](running-the-price-feeder)\n\n## Install\n\n`kiichaind` is the command-line interface (CLI) for interacting with the Kiichain blockchain. This section covers the installation of the necessary binaries to run a Kiichain node.\n\n### Requirements\n\n* **Golang version:** `v1.23.x`\n* **Build tools:** `build-essential` package (Linux)\n\n### Binary installation\n\nTo install Kiichain, download the pre-built binaries:\n\n```bash\ngit clone https://github.com/KiiChain/kiichain.git\ncd kiichain\nmake install\n```\n\nVerify the installation by checking the version of kiichaind:\n\n```bash\nkiichaind version\n```\n\n## Joining the Testnet\n\nTo join the Testnet Oro, you must have the daemon `kiichaind` installed in your machine.\n\n### Recommended configuration\n\nFor optimal performance, we recommend:\n\n* 4 vCPU x86\\_64\n* 8 GB RAM\n* 1 TB NVME SSD\n\n### Quick bootstrap\n\nThe easiest way to prepare a node is by using our provided scripts.\n\n{% hint style=\"info\" %}\nThese scripts are designed for systems running **Ubuntu 20.04** or **Ubuntu 22.04**. Ensure your operating system matches this requirement before proceeding.\n{% endhint %}\n\n* **Join Testnet Oro Script**: Use this script to bootstrap a full node quickly.\n\n```bash\ncurl -O https://raw.githubusercontent.com/KiiChain/testnets/refs/heads/main/testnet_oro/join_oro.sh\nchmod +x join_oro.sh\n./join_oro.sh\n```\n\n* **Join Testnet with Cosmosvisor Script**: Use this script to set up a full node with Cosmosvisor for automated upgrades\n\n```bash\ncurl -O https://raw.githubusercontent.com/KiiChain/testnets/refs/heads/main/testnet_oro/join_oro_cv.sh\nchmod +x join_oro_cv.sh\n./join_oro_cv.sh\n```\n\n### Running your node\n\nPrepare your system by backing up and removing old configurations:\n\n```bash\n# Backup old configuration\ncp -r $HOME/.kiichain $HOME/.kiichain-bk\n# Clean any old configuration\nrm -r $HOME/.kiichain\n```\n\nConnect to the testnet with the following commands:\n\n```bash\n# Variables used during the configuration\nPERSISTENT_PEERS=\"5b6aa55124c0fd28e47d7da091a69973964a9fe1@uno.sentry.testnet.v3.kiivalidator.com:26656,5e6b283c8879e8d1b0866bda20949f9886aff967@dos.sentry.testnet.v3.kiivalidator.com:26656\"\nCHAIN_ID=\"oro_1336-1\"\nNODE_HOME=~/.kiichain\nNODE_MONIKER=testnet_oro\nGENESIS_URL=https://raw.githubusercontent.com/KiiChain/testnets/refs/heads/main/testnet_oro/genesis.json\nMINIMUM_GAS_PRICES=\"1000000000akii\"\n\n# Initialize the chain\nkiichaind init $NODE_MONIKER --chain-id $CHAIN_ID --home $NODE_HOME\n\n# Set the persistent-peers\nsed -i -e \"/persistent-peers =/ s^= .*^= \\\"$PERSISTENT_PEERS\\\"^\" $NODE_HOME/config/config.toml\n# Set the min gas price\nsed -i -e \"/minimum-gas-prices =/ s^= .*^= \\\"$MINIMUM_GAS_PRICES\\\"^\" $NODE_HOME/config/app.toml\n\n# Set the genesis\nwget $GENESIS_URL -O genesis.json\nmv genesis.json $NODE_HOME/config/genesis.json\n\n# Start the chain\nkiichaind start --home $NODE_HOME\n```\n\n**(Optional but recommended)**: Before running the chain you can also check the SHA256:\n\n```bash\nsha256sum $NODE_HOME/config/genesis.json\n```\n\nThe expected SHA256 checksum is: `2805ae1752dc8c3435afd6bdceea929b3bbd2883606f3f3589f4d62c99156d2d`\n\n{% hint style=\"warning\" %}\nThis configuration runs a full node. For validators, update the configuration accordingly!\n{% endhint %}\n\n### Cosmosvisor\n\nCosmosvisor is a process manager for handling chain upgrades. It enables low maintenance and automatic updates for nodes.\n\n* If an upgrade is scheduled, cosmosvisor has the capability of automatically downloading binaries and restarting any Kiichain processes\n* This gives the node low maintenance and auto updates capabilities\n\nA version of our node bootstrapper can install cosmosvisor for you:\n\n```\ncurl -O https://raw.githubusercontent.com/KiiChain/testnets/refs/heads/main/testnet_oro/join_oro_cv.sh\nchmod +x join_oro_cv.sh\n./join_oro_cv.sh\n```\n\nMore information about cosmovision can be found at [Cosmosvisor Quick Start](https://docs.cosmos.network/v0.45/run-node/cosmovisor.html).\n\n#### Preparing cosmosvisor upgrade\n\nFirst, you need to compile new binaries:\n\n* A new Kiichaind binary must be compiled with the target OS in mind\n* Ideally, you should compile all binaries on itâ€™s own machines\n* **The build must be done on top of the upgrade tag (E.g. v1.0.1, v2.0.0)**\n* Check the section [Binary Installation](#binary-installation) on how to do it\n\nMake sure that the binary has the correct version with:\n\n```\nkiichaind version\n```\n\nTo add a new upgrade you must run the following command on Cosmovisor:\n\n```\ncosmovisor add-upgrade <upgrade-name> <path-to-binary>\n```\n\nWhere:\n\n* `<upgrade-name>` is the on-chain upgrade name\n* `<path-to-binary>` is the full path for the binary\n\nExample:\n\n```\ncosmovisor add-upgrade 1.3.0 /home/ubuntu/kiichain/build/kiichaind\n```\n\n### Configure state sync\n\nState sync significantly reduces the time required to synchronize a node by downloading and verifying state data from trusted peers rather than replaying every historical block. This is particularly beneficial for nodes joining the network late or recovering from a significant downtime.\n\nFollow these steps to configure state sync for your Kiichain node:\n\n1. **Set Trust Height Delta and Fetch Block Information**\n\nDefine a height delta and retrieve the latest block height and block hash from the primary RPC endpoint.\n\n```shellscript\n# Configure state-sync\nTRUST_HEIGHT_DELTA=500\nLATEST_HEIGHT=$(curl -s https://rpc.uno.sentry.testnet.v3.kiivalidator.com/block | jq -r \".block.header.height\")\nif [[ \"$LATEST_HEIGHT\" -gt \"$TRUST_HEIGHT_DELTA\" ]]; then\nSYNC_BLOCK_HEIGHT=$(($LATEST_HEIGHT - $TRUST_HEIGHT_DELTA))\nelse\nSYNC_BLOCK_HEIGHT=$LATEST_HEIGHT\nfi\n\n# Get the sync block hash\nSYNC_BLOCK_HASH=$(curl -s \"https://rpc.uno.sentry.testnet.v3.kiivalidator.com/block?height=$SYNC_BLOCK_HEIGHT\" | jq -r \".block_id.hash\")\n```\n\n2. Enable State Sync in Configuration\n\nModify the `config.toml` file to enable state sync and set the required parameters.\n\n```bash\nsed -i.bak -e \"s|^enable *=.*|enable = true|\" $NODE_HOME/config/config.toml\nsed -i.bak -e \"s|^rpc_servers *=.*|rpc_servers = \\\"$PRIMARY_ENDPOINT,$SECONDARY_ENDPOINT\\\"|\" $NODE_HOME/config/config.toml\nsed -i.bak -e \"s|^trust_height *=.*|trust_height = $SYNC_BLOCK_HEIGHT|\" $NODE_HOME/config/config.toml\nsed -i.bak -e \"s|^trust_hash *=.*|trust_hash = \\\"$SYNC_BLOCK_HASH\\\"|\" $NODE_HOME/config/config.toml\n```\n\n### Turning your node into an archival node\n\nNewly created nodes have the pruning option configured as default. If you desire to turn your node into an archival node, the following flag must be changed:\n\n1. Go to `$NODE_HOME/config/app.toml`and update the following flag:\n\n```\npruning = \"nothing\"\n```\n\nOther options available as default for pruning are:\n\n* `default`: Keep the recent 362880 blocks and prune is triggered every 10 blocks\n* `nothing`: all historic states will be saved, and nothing will be deleted (i.e. archiving node)\n* `everything`: all saved states will be deleted, storing only the recent 2 blocks; pruning at every block\n* `custom`: allow pruning options to be manually specified through 'pruning-keep-recent' and 'pruning-interval'\n\n### Node Architecture for Validators\n\nFurther instructions on how to build a great node architecture can be found on:\n\n* [Playbook For Cosmos Validators: Node Architecture Choices](https://medium.com/@kidinamoto/tech-choices-for-cosmos-validators-27c7242061ea)\n\n## References\n\n* [Running a Validator](https://hub.cosmos.network/main/validators/validator-setup.html)\n* [Playbook For Cosmos Validators: Node Architecture Choices](https://medium.com/@kidinamoto/tech-choices-for-cosmos-validators-27c7242061ea)\n* [Cosmosvisor Quick Start](https://docs.cosmos.network/v0.45/run-node/cosmovisor.html)\n* [Join Testnet Oro](https://raw.githubusercontent.com/KiiChain/testnets/refs/heads/main/testnet_oro/join_oro.sh)\n* [Join Testnet Oro CV](https://raw.githubusercontent.com/KiiChain/testnets/refs/heads/main/testnet_oro/join_oro_cv.sh)\n"
        }
      ]
    }
  ],
  "lastUpdated": "2025-08-12T13:27:23.546Z",
  "projectId": "kiichain-testnet"
}