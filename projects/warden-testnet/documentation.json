{
  "documentation": [
    {
      "id": "section-1755120886134",
      "title": "Warden Protocol",
      "icon": "‚òÄÔ∏è",
      "type": "section",
      "children": [
        {
          "id": "page-1755120915938",
          "title": "Warden Protocol Chiado Testnet Node Guide",
          "icon": "üìÑ",
          "type": "page",
          "content": "# Warden Protocol Chiado Testnet Node Guide\n\n<div align=\"center\">\n\n![Warden Protocol](https://img.shields.io/badge/Warden-Chiado%20Testnet-purple)\n![Version](https://img.shields.io/badge/Version-v0.6.3-green)\n![Go](https://img.shields.io/badge/Go-1.23.1-00ADD8?logo=go)\n![License](https://img.shields.io/badge/License-MIT-yellow)\n\n**The First Modular Intent-Centric Blockchain**\n\n[Website](https://wardenprotocol.org) | [Discord](https://discord.gg/wardenprotocol) | [Twitter](https://twitter.com/wardenprotocol) | [Documentation](https://docs.wardenprotocol.org)\n\n</div>\n\n## üìë Table of Contents\n\n- [System Requirements](#-system-requirements)\n- [Installation Methods](#-installation-methods)\n  - [Manual Installation](#manual-installation)\n  - [Automatic Installation](#automatic-installation)\n- [Wallet Management](#-wallet-management)\n- [Create Validator](#-create-validator)\n- [Oracle Installation](#-oracle-installation)\n- [Service Operations](#Ô∏è-service-operations)\n- [Key Management](#-key-management)\n- [Token Operations](#-token-operations)\n- [Validator Operations](#-validator-operations)\n- [Governance](#-governance)\n- [Security](#-security)\n- [Monitoring](#-monitoring)\n- [Delete Node](#-delete-node)\n- [Useful Commands](#-useful-commands)\n\n## üíª System Requirements\n\n### Minimum Hardware Requirements\n- **CPU**: 4 Cores\n- **RAM**: 8GB\n- **Storage**: 200GB NVME SSD\n- **OS**: Ubuntu 20.04+ LTS\n- **Network**: Stable internet connection\n\n### Recommended Ports\n- **P2P**: 18656\n- **RPC**: 18657\n- **API**: 18317\n- **gRPC**: 18090\n- **Prometheus**: 18060\n\n## üöÄ Installation Methods\n\n## Manual Installation\n\n### Step 1: Install Dependencies\n\n```bash\nsudo apt update && sudo apt upgrade -y\nsudo apt install curl git wget htop tmux build-essential jq make lz4 gcc unzip -y\n```\n\n### Step 2: Install Go\n\n```bash\ncd $HOME\nVER=\"1.23.1\"\nwget \"https://golang.org/dl/go$VER.linux-amd64.tar.gz\"\nsudo rm -rf /usr/local/go\nsudo tar -C /usr/local -xzf \"go$VER.linux-amd64.tar.gz\"\nrm \"go$VER.linux-amd64.tar.gz\"\n\n[ ! -f ~/.bash_profile ] && touch ~/.bash_profile\necho \"export PATH=$PATH:/usr/local/go/bin:~/go/bin\" >> ~/.bash_profile\nsource $HOME/.bash_profile\n[ ! -d ~/go/bin ] && mkdir -p ~/go/bin\n```\n\n### Step 3: Set Environment Variables\n\n> ‚ö†Ô∏è **Important**: Replace `wallet` and `test` with your own values\n\n```bash\necho \"export WALLET=\\\"wallet\\\"\" >> $HOME/.bash_profile\necho \"export MONIKER=\\\"test\\\"\" >> $HOME/.bash_profile\necho \"export WARDEN_CHAIN_ID=\\\"chiado_10010-1\\\"\" >> $HOME/.bash_profile\necho \"export WARDEN_PORT=\\\"18\\\"\" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n```\n\n### Step 4: Download Binary\n\n```bash\ncd $HOME\nrm -rf bin\nmkdir bin && cd bin\nwget -O wardend https://github.com/warden-protocol/wardenprotocol/releases/download/v0.6.3/wardend-0.6.3-linux-amd64\nchmod +x wardend\nmv $HOME/bin/wardend $HOME/go/bin\n```\n\n### Step 5: Initialize Node\n\n```bash\nwardend init $MONIKER\nsed -i -e \"s|^node *=.*|node = \\\"tcp://localhost:${WARDEN_PORT}657\\\"|\" $HOME/.warden/config/client.toml\n```\n\n### Step 6: Download Genesis & Addrbook\n\n```bash\nwget -O $HOME/.warden/config/genesis.json https://server-2.itrocket.net/testnet/warden/genesis.json\nwget -O $HOME/.warden/config/addrbook.json https://server-2.itrocket.net/testnet/warden/addrbook.json\n```\n\n### Step 7: Configure Seeds & Peers\n\n```bash\nSEEDS=\"8288657cb2ba075f600911685670517d18f54f3b@warden-testnet-seed.itrocket.net:18656\"\nPEERS=\"b14f35c07c1b2e58c4a1c1727c89a5933739eeea@warden-testnet-peer.itrocket.net:18656,de9e8c44039e240ff31cbf976a0d4d673d4e4734@188.165.213.192:26656,8a46610d69921c1031ea536cd5dca0a2979cf1b2@168.119.10.134:29479,56f46b5a7fd2c5cdc24d8964cc8d3ec12ee6cc4e@138.201.62.254:27356,73a865805db875019306049cf9bc83a05180ff80@57.128.193.18:20145,8616e56514557f9006f42e19313e50b1776b9435@74.241.250.28:30856,fa9955b398952c4a1b73f53ca649fd4e9cad9c81@65.108.74.113:11956,d5b7f132587c4bbfb1b024e37fd5989130756f69@95.217.200.98:27356,8a2624792884eb8135ae7b11b739688388fa2e55@65.109.83.40:27356,4eebb0b81c59639f9c82de3525de18fcfc55318e@5.9.116.21:27356,8a3bde424363d40264f5ea7fc4626108472cd9fd@65.108.227.207:16656,4c54d61784741680d7398367a47c42b6ff32ae7e@38.242.249.55:18656,52cda545941f6bc85daf379a5661c8747c8272f3@15.204.143.180:18656,3f59e02ff9372caf39186b2ed3e74e328d3f4ca8@65.108.14.235:11956,29dfeed0f7933111c5452a1af4ca67b2fe4346f5@198.27.80.53:26656,1b364274f2327ff55c1e5a11566b4e9789dcef82@94.130.143.122:30656,bee9e9daec3ca13b7961115790db642f84e1c277@37.27.97.16:26656,4f721cf7df1ae8833f2c41437e25d8b188a2b3be@65.109.75.155:11956,4291fec222303269daf0cb564f5f321262e84bb4@46.4.169.227:27656,7e886df20e746a360ddc22e622ae9448089bde40@49.12.129.31:26656,bc864f9f16ccf5244ed3a0537f5838ffb3c61269@65.108.203.61:39656\"\n\nsed -i -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*seeds *=.*/seeds = \\\"$SEEDS\\\"/}\" \\\n       -e \"/^\\[p2p\\]/,/^\\[/{s/^[[:space:]]*persistent_peers *=.*/persistent_peers = \\\"$PEERS\\\"/}\" $HOME/.warden/config/config.toml\n```\n\n### Step 8: Configure Custom Ports\n\n```bash\n# app.toml ports\nsed -i.bak -e \"s%:1317%:${WARDEN_PORT}317%g;\ns%:8080%:${WARDEN_PORT}080%g;\ns%:9090%:${WARDEN_PORT}090%g;\ns%:9091%:${WARDEN_PORT}091%g;\ns%:8545%:${WARDEN_PORT}545%g;\ns%:8546%:${WARDEN_PORT}546%g;\ns%:6065%:${WARDEN_PORT}065%g\" $HOME/.warden/config/app.toml\n\n# config.toml ports\nsed -i.bak -e \"s%:26658%:${WARDEN_PORT}658%g;\ns%:26657%:${WARDEN_PORT}657%g;\ns%:6060%:${WARDEN_PORT}060%g;\ns%:26656%:${WARDEN_PORT}656%g;\ns%^external_address = \\\"\\\"%external_address = \\\"$(wget -qO- eth0.me):${WARDEN_PORT}656\\\"%;\ns%:26660%:${WARDEN_PORT}660%g\" $HOME/.warden/config/config.toml\n```\n\n### Step 9: Configure Pruning & Indexing\n\n```bash\n# Pruning configuration\nsed -i -e \"s/^pruning *=.*/pruning = \\\"custom\\\"/\" $HOME/.warden/config/app.toml \nsed -i -e \"s/^pruning-keep-recent *=.*/pruning-keep-recent = \\\"100\\\"/\" $HOME/.warden/config/app.toml\nsed -i -e \"s/^pruning-interval *=.*/pruning-interval = \\\"19\\\"/\" $HOME/.warden/config/app.toml\n\n# Set minimum gas price, enable prometheus and disable indexing\nsed -i 's|minimum-gas-prices =.*|minimum-gas-prices = \"25000000award\"|g' $HOME/.warden/config/app.toml\nsed -i -e \"s/prometheus = false/prometheus = true/\" $HOME/.warden/config/config.toml\nsed -i -e \"s/^indexer *=.*/indexer = \\\"null\\\"/\" $HOME/.warden/config/config.toml\n```\n\n### Step 10: Create Service File\n\n```bash\nsudo tee /etc/systemd/system/wardend.service > /dev/null <<EOF\n[Unit]\nDescription=Warden node\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/.warden\nExecStart=$(which wardend) start --home $HOME/.warden\nRestart=on-failure\nRestartSec=5\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n### Step 11: Download Snapshot (Optional)\n\n```bash\nwardend tendermint unsafe-reset-all --home $HOME/.warden\nif curl -s --head curl https://server-2.itrocket.net/testnet/warden/warden_2025-08-13_4340744_snap.tar.lz4 | head -n 1 | grep \"200\" > /dev/null; then\n  curl https://server-2.itrocket.net/testnet/warden/warden_2025-08-13_4340744_snap.tar.lz4 | lz4 -dc - | tar -xf - -C $HOME/.warden\nelse\n  echo \"no snapshot found\"\nfi\n```\n\n### Step 12: Start Service\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable wardend\nsudo systemctl restart wardend && sudo journalctl -u wardend -fo cat\n```\n\n## Automatic Installation\n\nFor quick setup with predefined settings (pruning: custom: 100/0/19 | indexer: null):\n\n```bash\nsource <(curl -s https://itrocket.net/api/testnet/warden/autoinstall/)\n```\n\n## üëõ Wallet Management\n\n### Create New Wallet\n\n```bash\n# Create new wallet\nwardend keys add $WALLET\n\n# Recover existing wallet\nwardend keys add $WALLET --recover\n\n# Save wallet and validator addresses\nWALLET_ADDRESS=$(wardend keys show $WALLET -a)\nVALOPER_ADDRESS=$(wardend keys show $WALLET --bech val -a)\necho \"export WALLET_ADDRESS=\"$WALLET_ADDRESS >> $HOME/.bash_profile\necho \"export VALOPER_ADDRESS=\"$VALOPER_ADDRESS >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n```\n\n> ‚ö†Ô∏è **IMPORTANT**: Save your mnemonic phrase in a secure location!\n\n### Check Wallet Balance\n\n```bash\nwardend query bank balances $WALLET_ADDRESS\n```\n\n## ‚úÖ Create Validator\n\n### Check Sync Status\n\nBefore creating a validator, ensure your node is fully synced:\n\n```bash\nwardend status 2>&1 | jq .SyncInfo.catching_up\n```\n\nWhen the output is `false`, your node is synced.\n\n### Node Sync Status Checker Script\n\n```bash\n#!/bin/bash\nrpc_port=$(grep -m 1 -oP '^laddr = \"\\K[^\"]+' \"$HOME/.warden/config/config.toml\" | cut -d ':' -f 3)\nwhile true; do\n  local_height=$(curl -s localhost:$rpc_port/status | jq -r '.result.sync_info.latest_block_height')\n  network_height=$(curl -s https://warden-testnet-rpc.itrocket.net/status | jq -r '.result.sync_info.latest_block_height')\n\n  if ! [[ \"$local_height\" =~ ^[0-9]+$ ]] || ! [[ \"$network_height\" =~ ^[0-9]+$ ]]; then\n    echo -e \"\\033[1;31mError: Invalid block height data. Retrying...\\033[0m\"\n    sleep 5\n    continue\n  fi\n\n  blocks_left=$((network_height - local_height))\n  echo -e \"\\033[1;33mNode Height:\\033[1;34m $local_height\\033[0m \\033[1;33m| Network Height:\\033[1;36m $network_height\\033[0m \\033[1;33m| Blocks Left:\\033[1;31m $blocks_left\\033[0m\"\n  sleep 5\ndone\n```\n\n### Create Validator\n\n```bash\ncd $HOME\n# Create validator.json file\necho \"{\\\"pubkey\\\":{\\\"@type\\\":\\\"/cosmos.crypto.ed25519.PubKey\\\",\\\"key\\\":\\\"$(wardend comet show-validator | grep -Po '\\\"key\\\":\\s*\\\"\\K[^\"]*')\\\"},\n    \\\"amount\\\": \\\"1000000award\\\",\n    \\\"moniker\\\": \\\"$MONIKER\\\",\n    \\\"identity\\\": \\\"\\\",\n    \\\"website\\\": \\\"\\\",\n    \\\"security\\\": \\\"\\\",\n    \\\"details\\\": \\\"I love blockchain ‚ù§Ô∏è\\\",\n    \\\"commission-rate\\\": \\\"0.1\\\",\n    \\\"commission-max-rate\\\": \\\"0.2\\\",\n    \\\"commission-max-change-rate\\\": \\\"0.01\\\",\n    \\\"min-self-delegation\\\": \\\"1\\\"\n}\" > validator.json\n\n# Create validator using the JSON configuration\nwardend tx staking create-validator validator.json \\\n    --from $WALLET \\\n    --chain-id chiado_10010-1 \\\n    --gas auto --gas-adjustment 1.6 --fees 250000000000000award\n```\n\n## üîÆ Oracle Installation\n\n### Download and Install Oracle Binary\n\n```bash\ncd $HOME\nrm -rf connect\ngit clone https://github.com/skip-mev/connect.git\ncd connect\ngit checkout v1.0.13\nmake install\n```\n\n### Create Oracle Service\n\n```bash\nsudo tee /etc/systemd/system/warden-connect.service > /dev/null <<EOF\n[Unit]\nDescription=Warden Oracle\nAfter=network-online.target\n\n[Service]\nUser=$USER\nWorkingDirectory=$HOME/connect\nExecStart=$(which slinky) --market-map-endpoint 127.0.0.1:9090 --log-disable-file-rotation\nRestart=on-failure\nRestartSec=5\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n### Start Oracle Service\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable warden-connect\nsudo systemctl restart warden-connect && sudo journalctl -u warden-connect -f\n```\n\n### Validate Oracle Prices\n\nTest the oracle client:\n\n```bash\nmake run-oracle-client\n```\n\nCheck oracle logs:\n\n```bash\njournalctl -fu warden-connect --no-hostname\n```\n\n## ‚öôÔ∏è Service Operations\n\n### Node Service Commands\n\n```bash\n# Check logs\nsudo journalctl -u wardend -fo cat\n\n# Start service\nsudo systemctl start wardend\n\n# Stop service\nsudo systemctl stop wardend\n\n# Restart service\nsudo systemctl restart wardend\n\n# Check service status\nsudo systemctl status wardend\n\n# Reload services\nsudo systemctl daemon-reload\n\n# Enable service\nsudo systemctl enable wardend\n\n# Disable service\nsudo systemctl disable wardend\n```\n\n### Oracle Service Commands\n\n```bash\n# Check logs\njournalctl -fu warden-connect --no-hostname\n\n# Start service\nsudo systemctl start warden-connect\n\n# Stop service\nsudo systemctl stop warden-connect\n\n# Restart service\nsudo systemctl restart warden-connect\n\n# Check service status\nsudo systemctl status warden-connect\n```\n\n## üîë Key Management\n\n### Wallet Operations\n\n```bash\n# Add new wallet\nwardend keys add $WALLET\n\n# Restore wallet\nwardend keys add $WALLET --recover\n\n# List all wallets\nwardend keys list\n\n# Delete wallet\nwardend keys delete $WALLET\n\n# Check balance\nwardend q bank balances $WALLET_ADDRESS\n\n# Export key (save to wallet.backup)\nwardend keys export $WALLET\n\n# View EVM private key\nwardend keys unsafe-export-eth-key $WALLET\n\n# Import key (restore from wallet.backup)\nwardend keys import $WALLET wallet.backup\n```\n\n## üí∞ Token Operations\n\n### Staking Operations\n\n```bash\n# Withdraw all rewards\nwardend tx distribution withdraw-all-rewards --from $WALLET --chain-id chiado_10010-1 \\\n  --gas auto --gas-adjustment 1.6 --fees 250000000000000award\n\n# Withdraw rewards and commission\nwardend tx distribution withdraw-rewards $VALOPER_ADDRESS --from $WALLET --commission \\\n  --chain-id chiado_10010-1 --gas auto --gas-adjustment 1.6 --fees 250000000000000award -y\n\n# Delegate to yourself\nwardend tx staking delegate $(wardend keys show $WALLET --bech val -a) 1000000award \\\n  --from $WALLET --chain-id chiado_10010-1 --gas auto --gas-adjustment 1.6 --fees 250000000000000award -y\n\n# Delegate to another validator\nwardend tx staking delegate <TO_VALOPER_ADDRESS> 1000000award --from $WALLET \\\n  --chain-id chiado_10010-1 --gas auto --gas-adjustment 1.6 --fees 250000000000000award -y\n\n# Redelegate\nwardend tx staking redelegate $VALOPER_ADDRESS <TO_VALOPER_ADDRESS> 1000000award \\\n  --from $WALLET --chain-id chiado_10010-1 --gas auto --gas-adjustment 1.6 --fees 250000000000000award -y\n\n# Unbond\nwardend tx staking unbond $(wardend keys show $WALLET --bech val -a) 1000000award \\\n  --from $WALLET --chain-id chiado_10010-1 --gas auto --gas-adjustment 1.6 --fees 250000000000000award -y\n\n# Transfer funds\nwardend tx bank send $WALLET_ADDRESS <TO_WALLET_ADDRESS> 1000000award \\\n  --gas auto --gas-adjustment 1.6 --fees 250000000000000award -y\n```\n\n## üë• Validator Operations\n\n### Create New Validator\n\n```bash\nwardend tx staking create-validator \\\n  --amount 1000000award \\\n  --from $WALLET \\\n  --commission-rate 0.1 \\\n  --commission-max-rate 0.2 \\\n  --commission-max-change-rate 0.01 \\\n  --min-self-delegation 1 \\\n  --pubkey $(wardend tendermint show-validator) \\\n  --moniker \"$MONIKER\" \\\n  --identity \"\" \\\n  --details \"I love blockchain ‚ù§Ô∏è\" \\\n  --chain-id chiado_10010-1 \\\n  --gas auto --gas-adjustment 1.6 --fees 250000000000000award \\\n  -y\n```\n\n### Edit Validator\n\n```bash\nwardend tx staking edit-validator \\\n  --commission-rate 0.1 \\\n  --new-moniker \"$MONIKER\" \\\n  --identity \"\" \\\n  --details \"I love blockchain ‚ù§Ô∏è\" \\\n  --from $WALLET \\\n  --chain-id chiado_10010-1 \\\n  --gas auto --gas-adjustment 1.6 --fees 250000000000000award \\\n  -y\n```\n\n### Validator Information\n\n```bash\n# Validator info\nwardend status 2>&1 | jq\n\n# Validator details\nwardend q staking validator $(wardend keys show $WALLET --bech val -a)\n\n# Jailing info\nwardend q slashing signing-info $(wardend tendermint show-validator)\n\n# Slashing parameters\nwardend q slashing params\n\n# Unjail validator\nwardend tx slashing unjail --from $WALLET --chain-id chiado_10010-1 \\\n  --gas auto --gas-adjustment 1.6 --fees 250000000000000award -y\n\n# Active validators list\nwardend q staking validators -oj --limit=2000 | jq '.validators[] | select(.status==\"BOND_STATUS_BONDED\")' | \\\n  jq -r '(.tokens|tonumber/pow(10; 6)|floor|tostring) + \" \t \" + .description.moniker' | sort -gr | nl\n\n# Check validator key\n[[ $(wardend q staking validator $VALOPER_ADDRESS -oj | jq -r .consensus_pubkey.key) = $(wardend status | jq -r .ValidatorInfo.PubKey.value) ]] && \\\n  echo -e \"Your key status is ok\" || echo -e \"Your key status is error\"\n```\n\n## üó≥Ô∏è Governance\n\n### Create Proposal\n\n```bash\nwardend tx gov submit-proposal \\\n  --title \"Your Proposal Title\" \\\n  --description \"Your Proposal Description\" \\\n  --deposit 1000000award \\\n  --type Text \\\n  --from $WALLET \\\n  --gas auto --gas-adjustment 1.6 --fees 250000000000000award \\\n  -y\n```\n\n### Voting\n\n```bash\n# List all proposals\nwardend query gov proposals\n\n# View specific proposal\nwardend query gov proposal 1\n\n# Vote on proposal\nwardend tx gov vote 1 yes --from $WALLET --chain-id chiado_10010-1 \\\n  --gas auto --gas-adjustment 1.6 --fees 250000000000000award -y\n```\n\nVote options: `yes`, `no`, `no_with_veto`, `abstain`\n\n## üîí Security\n\n### SSH Key Authentication\n\nConfigure SSH keys for secure authentication and disable password authentication.\n\n### Firewall Configuration\n\n```bash\n# Set firewall rules\nsudo ufw default allow outgoing \nsudo ufw default deny incoming \nsudo ufw allow ssh/tcp \nsudo ufw allow ${WARDEN_PORT}656/tcp\nsudo ufw enable\n```\n\n### Security Best Practices\n\n1. **Never share your private keys or mnemonic phrase**\n2. **Use hardware wallets for large amounts**\n3. **Enable 2FA on your server**\n4. **Regular security updates**: `sudo apt update && sudo apt upgrade -y`\n5. **Monitor your validator regularly**\n6. **Keep backups of important files**\n\n## üìä Monitoring\n\nFor professional monitoring and alerting, consider using:\n- **TenderDuty**: Cosmos nodes monitoring with alerts\n- **Prometheus + Grafana**: Metrics visualization\n- **Node Exporter**: System metrics collection\n\n## üóëÔ∏è Delete Node\n\nComplete removal of the node:\n\n```bash\nsudo systemctl stop wardend\nsudo systemctl disable wardend\nsudo rm -rf /etc/systemd/system/wardend.service\nsudo rm $(which wardend)\nsudo rm -rf $HOME/.warden\nsed -i \"/WARDEN_/d\" $HOME/.bash_profile\n```\n\n## üìù Useful Commands\n\n### Quick Status Checks\n\n```bash\n# Node info\nwardend status 2>&1 | jq\n\n# Your node peer\necho $(wardend tendermint show-node-id)'@'$(wget -qO- eth0.me)':'$(cat $HOME/.warden/config/config.toml | sed -n '/Address to listen for incoming connection/{n;p;}' | sed 's/.*://; s/\".*//')\n\n# Check sync status\nwardend status 2>&1 | jq .SyncInfo\n\n# Check validator status\nwardend q staking validator $(wardend keys show $WALLET --bech val -a) -o json | jq\n```\n\n## üÜò Troubleshooting\n\n### Common Issues\n\n1. **Node not syncing**: Check peers and firewall settings\n2. **High memory usage**: Adjust pruning settings\n3. **Validator jailed**: Check signing info and unjail\n4. **RPC connection issues**: Verify port configurations\n\n### Getting Help\n\n- **Discord**: [Join Warden Discord](https://discord.gg/wardenprotocol)\n- **Documentation**: [Official Docs](https://docs.wardenprotocol.org)\n- **Telegram**: Check official channels\n\n---\n\n<div align=\"center\">\n\n**Built with ‚ù§Ô∏è for Warden Protocol Community**\n\n*Stay updated with the latest testnet announcements*\n\n</div>"
        }
      ]
    }
  ],
  "projectInfo": {
    "name": "Warden Protocol",
    "logo": "https://raw.githubusercontent.com/coinsspor/coinsspor/refs/heads/main/warden_logo.jpg",
    "banner": "https://raw.githubusercontent.com/coinsspor/coinsspor/refs/heads/main/wardenbanner.png",
    "description": "Loading documentation...",
    "theme": {
      "primary": "#10b981",
      "secondary": "#8b5cf6"
    }
  },
  "lastUpdated": "2025-08-13T21:35:34.241Z",
  "projectId": "warden-testnet",
  "version": "1.0.0"
}